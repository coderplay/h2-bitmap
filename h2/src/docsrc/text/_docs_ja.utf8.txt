@advanced_1000_h1
進歩したトピックス

@advanced_1001_a
Result Sets

@advanced_1002_a
大きなオブジェクト

@advanced_1003_a
リンクテーブル

@advanced_1004_a
トランザクション分離

@advanced_1005_a
#Multi-Version Concurrency Control (MVCC)

@advanced_1006_a
クラスタリング / 高可用性

@advanced_1007_a
2フェーズコミット

@advanced_1008_a
互換性

@advanced_1009_a
#Standards Compliance

@advanced_1010_a
Windowsサービスとして実行する

@advanced_1011_a
ODBCドライバ

@advanced_1012_a
#Using H2 in Microsoft .NET

@advanced_1013_a
ACID

@advanced_1014_a
永続性問題

@advanced_1015_a
リカバーツールを使用する

@advanced_1016_a
ファイルロックプロトコル

@advanced_1017_a
SQLインジェクションに対する防御

@advanced_1018_a
#Protection against Remote Access

@advanced_1019_a
#Restricting Class Loading and Usage

@advanced_1020_a
セキュリティプロトコル

@advanced_1021_a
SSL/TLS 接続

@advanced_1022_a
汎用一意識別子 (UUID)

@advanced_1023_a
システムプロパティから読み込まれた設定

@advanced_1024_a
#Setting the Server Bind Address

@advanced_1025_a
#Pluggable File System

@advanced_1026_a
#Limits and Limitations

@advanced_1027_a
用語集とリンク

@advanced_1028_h2
Result Sets

@advanced_1029_h3
行数の制限

@advanced_1030_p
アプリケーションから結果が返される前に、全ての行はデータベースによって読み取られます。 サーバー側のカーソルは現在サポートされていません。もし最初の数行がアプリケーションに読み取られたら、 result setサイズはパフォーマンスを改善するために制限されます。これは、クエリーの LIMIT を使用することで 実現できます (例: SELECT * FROM TEST LIMIT 100)、または Statement.setMaxRows(max) を使用します。

@advanced_1031_h3
大きなResult Set と外部ソート

@advanced_1032_p
#For large result set, the result is buffered to disk. The threshold can be defined using the statement SET MAX_MEMORY_ROWS. If ORDER BY is used, the sorting is done using an external sort algorithm. In this case, each block of rows is sorted using quick sort, then written to disk; when reading the data, the blocks are merged together.

@advanced_1033_h2
大きなオブジェクト

@advanced_1034_h3
大きなオブジェクトのソートと読み込み

@advanced_1035_p
#If it is possible that the objects don't fit into memory, then the data type CLOB (for textual data) or BLOB (for binary data) should be used. For these data types, the objects are not fully read into memory, by using streams. To store a BLOB, use PreparedStatement.setBinaryStream. To store a CLOB, use PreparedStatement.setCharacterStream. To read a BLOB, use ResultSet.getBinaryStream, and to read a CLOB, use ResultSet.getCharacterStream. When using the client/server mode, large BLOB and CLOB data is stored in a temporary file on the client side.

@advanced_1036_h3
#When to use CLOB/BLOB

@advanced_1037_p
#This database stores large LOB (CLOB and BLOB) objects as separate files. Small LOB objects are stored in-place, the threshold can be set using <a href="grammar.html#set_max_length_inplace_lob">MAX_LENGTH_INPLACE_LOB</a> , but there is still an overhead to use CLOB/BLOB. Because of this, BLOB and CLOB should never be used for columns with a maximum size below about 200 bytes. The best threshold depends on the use case; reading in-place objects is faster than reading from separate files, but slows down the performance of operations that don't involve this column.

@advanced_1038_h3
#Large Object Compression

@advanced_1039_p
#CLOB and BLOB values can be compressed by using <a href="grammar.html#set_compress_lob">SET COMPRESS_LOB</a> . The LZF algorithm is faster but needs more disk space. By default compression is disabled, which usually speeds up write operations. If you store many large compressible values such as XML, HTML, text, and uncompressed binary files, then compressing can save a lot of disk space (sometimes more than 50%), and read operations may even be faster.

@advanced_1040_h2
リンクテーブル

@advanced_1041_p
このデータベースはリンクテーブルをサポートしています。これは、 現在存在しないテーブルは、ただ他のデータベースへリンクするという意味です。 このようなリンクを作るには、CREATE LINKED TABLE ステートメントを使用します:

@advanced_1042_p
#You can then access the table in the usual way. Whenever the linked table is accessed, the database issues specific queries over JDBC. Using the example above, if you issue the query <code>SELECT * FROM LINK WHERE ID=1</code> , then the following query is run against the PostgreSQL database: <code>SELECT * FROM TEST WHERE ID=?</code> . The same happens for insert and update statements. Only simple statements are executed against the target database, that means no joins. Prepared statements are used where possible.

@advanced_1043_p
#To view the statements that are executed against the target table, set the trace level to 3.

@advanced_1044_p
#There is a restriction: when inserting into a linked table, and when updating a linked table, NULL and values that are not set are both inserted as NULL. This may not have the desired effect if the default value for this column in the target table is not NULL.

@advanced_1045_p
#If multiple linked tables point to the same database (using the same database URL), the connection is shared. To disable this, set the system property h2.shareLinkedConnections to false.

@advanced_1046_p
#The CREATE LINKED TABLE statement supports an optional schema name parameter. See the grammar for details.

@advanced_1047_h2
トランザクション分離

@advanced_1048_p
#Transaction isolation is provided for all data manipulation language (DML) statements. Most data definition language (DDL) statements commit the current transaction. See the <a href="grammar.html">grammar</a> for details.

@advanced_1049_p
このデータベースは次のトランザクション分離レベルをサポートしています:

@advanced_1050_b
Read Committed (コミット済み読み取り)

@advanced_1051_li
これはデフォルトレベルです。 read lockは早急に解除されます。 このレベルを使用する時、高い同時並行性が可能です。 これは多数のデータベースシステムで使用される分離レベルです。

@advanced_1052_li
これを有効にするには、 SQLステートメント 'SET LOCK_MODE 3' を実行します。

@advanced_1053_li
または、;LOCK_MODE=3 をデータベースURLに付け加えます: jdbc:h2:~/test;LOCK_MODE=3

@advanced_1054_b
Serializable (直列化)

@advanced_1055_li
これを有効にするには、 SQLステートメント 'SET LOCK_MODE 1' を実行します。

@advanced_1056_li
または、;LOCK_MODE=1 をデータベースURLに付け加えます: jdbc:h2:~/test;LOCK_MODE=1

@advanced_1057_b
Read Uncommitted (非コミット読み取り)

@advanced_1058_li
このレベルの意味は、トランザクション分離は無効だということです。

@advanced_1059_li
これを有効にするには、SQLステートメント 'SET LOCK_MODE 0' を実行します

@advanced_1060_li
または、;LOCK_MODE=0 をデータベースURLに付け加えます: jdbc:h2:~/test;LOCK_MODE=0

@advanced_1061_p
分離レベル "serializable" を使用している時、ダーティリード、反復不可能読み取り、 ファントムリードを防ぐことができます。

@advanced_1062_b
Dirty Reads (ダーティリード)

@advanced_1063_li
他の接続によるコミットされていない変更を読み取ることができる、という意味です。

@advanced_1064_li
実行可能: read uncommitted (非コミット読み取り)

@advanced_1065_b
Non-Repeatable Reads (反復不可能読み取り)

@advanced_1066_li
ひとつの接続が行を読み取り、 他の接続が行を変更し、コミットすると、最初の接続は同じ行を再読し、新しい結果を取得します。

@advanced_1067_li
実行可能: read uncommitted (非コミット読み取り)、read committed (コミット済み読み取り)

@advanced_1068_b
Phantom Reads (ファントムリード)

@advanced_1069_li
ひとつの接続が条件を使って行の集まりを読み取り、 他の接続がこの条件を壊して行を挿入し、コミットした時、最初の接続は同じ条件を使って再読し、 新しい行を取得します。

@advanced_1070_li
実行可能: read uncommitted (非コミット読み取り)、read committed (コミット済み読み取り)

@advanced_1071_h3
テーブルレベルロック

@advanced_1072_p
#The database allows multiple concurrent connections to the same database. To make sure all connections only see consistent data, table level locking is used by default. This mechanism does not allow high concurrency, but is very fast. Shared locks and exclusive locks are supported. Before reading from a table, the database tries to add a shared lock to the table (this is only possible if there is no exclusive lock on the object by another connection). If the shared lock is added successfully, the table can be read. It is allowed that other connections also have a shared lock on the same object. If a connection wants to write to a table (update or delete a row), an exclusive lock is required. To get the exclusive lock, other connection must not have any locks on the object. After the connection commits, all locks are released. This database keeps all locks in memory.

@advanced_1073_h3
ロックタイムアウト

@advanced_1074_p
もし接続がオブジェクト上でロックを取得できないのであれば、一定時間待機します (ロックタイムアウト)。この時間の間、うまくいけば接続はロックコミットを保有し、 この時、ロックを取得することが可能です。他の接続がロックを解除しないため、 これが不可能であれば、失敗した接続がロックタイムアウト例外を取得します。 それぞれの接続に個別にロックタイムアウトを設定することができます。

@advanced_1075_h2
#Multi-Version Concurrency Control (MVCC)

@advanced_1076_p
#The MVCC feature allows higher concurrency than using (table level or row level) locks. When using MVCC in this database, delete, insert and update operations will only issue a shared lock on the table. An exclusive lock is still used when adding or removing columns, when dropping the table, and when using SELECT ... FOR UPDATE. Connections only 'see' committed data, and own changes. That means, if connection A updates a row but doesn't commit this change yet, connection B will see the old value. Only when the change is committed, the new value is visible by other connections (read committed). If multiple connections concurrently try to update the same row, the database waits until it can apply the change, but at most until the lock timeout expires.

@advanced_1077_p
#To use the MVCC feature, append MVCC=TRUE to the database URL:

@advanced_1078_p
#The MVCC feature is not fully tested yet. The limitations of the MVCC mode are: it can not be used at the same time as MULTI_THREADED; the complete undo log must fit in memory when using multi-version concurrency (the setting MAX_MEMORY_UNDO has no effect).

@advanced_1079_h2
クラスタリング / 高可用性

@advanced_1080_p
このデータベースは簡単なクラスタリング / 高可用性メカニズムをサポートしています。 アーキテクチャ: 二つのデータベースサーバーは二つの異なったコンピューター上で動作し、 両方のコンピューターは同じデータベースのコピーです。もし両方のサーバーが動いたら、 それぞれのデータベース操作は両方のコンピューター上で実行されます。ひとつのサーバーがおちたら (電源、ハードウェア、またはネットワーク障害)、他のサーバーはまだ動作を続行します。 このポイントから、操作は他のサーバーがバックアップされるまで、ひとつのサーバー上で実行されます。

@advanced_1081_p
クラスタリングはサーバーモードでのみ使用できます (エンベッドモードはクラスタリングをサポートしていません)。 サーバーを停止しないでクラスタを回復することは可能ですが、二番目のデータベースが回復している間に、 他のどんなアプリケーションでも最初のデータベースのデータを変更しないことは重要なため、 クラスタを回復するのは現在手動プロセスです。

@advanced_1082_p
クラスタを初期化するには、次の手順に従います:

@advanced_1083_li
データベースを作成する

@advanced_1084_li
他の位置にデータベースをコピーし、クラスタリングを初期化するために、 CreateClusterツールを使用します。その後、同じデータが含まれる二つのデータベースを所有します。

@advanced_1085_li
二つのサーバーを起動します (ひとつはそれぞれのデータベースのコピー)

@advanced_1086_li
これでクライアントアプリケーションのデータベースに接続する準備ができました

@advanced_1087_h3
CreateClusterツールを使用する

@advanced_1088_p
クラスタリングがどのように機能するか理解するために、 次の例を試してみて下さい。この例では、二つのデータベースは同じコンピューター内に属していますが、 通常は、データベースは異なるサーバー内にあります。

@advanced_1089_li
二つのディレクトリを作成します: server1 と server2 です。それぞれのディレクトリは コンピューター上のディレクトリをシミュレートします。

@advanced_1090_li
最初のディレクトリを示してTCPサーバーを起動します。 次のコマンドラインを使用して実行できます:

@advanced_1091_li
二番目のディレクトリを示して二番目のTCPサーバーを起動します。 これは二番目の (重複の) コンピューターで動いているサーバーをシミュレートします。 次のコマンドラインを使用して実行できます:

@advanced_1092_li
クラスタリングを初期化するためにCreateClusterツールを使用します。 データベースが存在しなければ、自動的に新しい、空のデータベースを作成します。 次のコマンドラインでツールを実行します:

@advanced_1093_li
#You can now connect to the databases using an application or the H2 Console using the JDBC URL jdbc:h2:tcp://localhost:9101,localhost:9102/~/test

@advanced_1094_li
サーバーを止めたら (プロセスを無視して)、他のマシンは動作を続行し、 従ってデータベースもまだアクセス可能だということがわかります。

@advanced_1095_li
クラスタを回復するために、まず最初に失敗したデータベースを削除し、止められていたサーバーを 再起動します。そして、CreateClusterツールを再実行します。

@advanced_1096_h3
クラスタリングアルゴリズムと制限

@advanced_1097_p
読み取り専用クエリーは、最初のクラスタノードに対してのみ 実行されますが、他の全てのステートメントは全てのノードに対して実行されます。 現在、トランザクションの問題を回避するように作られたロードバランシングは存在しません。 次の関数は、異なったクラスタノード上で異なった結果をもたらすので、実行には注意して下さい: RANDOM_UUID()、SECURE_RAND()、SESSION_ID()、MEMORY_FREE()、 MEMORY_USED()、CSVREAD()、CSVWRITE()、RAND() [seed を使用していない時] 直接ステートメントを変更する際に、これらの関数を使用してはなりません (例: INSERT、 UPDATE、または MERGE)。しかし、読み取り専用ステートメントでは使用でき、 結果はステートメントを変更するために使用することができます。

@advanced_1098_h2
2フェーズコミット

@advanced_1099_p
2フェーズコミットプロトコルがサポートされています。 2フェーズコミットは次のように機能します:

@advanced_1100_li
オートコミットはOFFの状態であることが必要です

@advanced_1101_li
トランザクションは、例えば行を挿入することによって、起動されます

@advanced_1102_li
トランザクションは、SQLステートメント PREPARE COMMIT transactionName を実行することによって "prepared" とマークされます

@advanced_1103_li
現在トランザクションはコミット、またはロールバックすることができます

@advanced_1104_li
トランザクションがコミット、またはロールバックに成功する前に問題が起きたら (例えば、ネットワークの問題が起きたことによって)、トランザクションは "in-doubt" の状態になります

@advanced_1105_li
データベースへの再接続時、in-doubtトランザクションは SELECT * FROM INFORMATION_SCHEMA.IN_DOUBT でリストアップされます

@advanced_1106_li
リスト上のそれぞれのトランザクションは、COMMIT TRANSACTION transactionName または、 ROLLBACK TRANSACTION transactionName を実行してコミット、またはロールバックされなければなりません

@advanced_1107_li
変更を適用するために、データベースを終了し、再び開く必要があります

@advanced_1108_h2
互換性

@advanced_1109_p
このデータベースは (ある程度までは)、HSQLDB、MySQL や PostgreSQLのような 他のデータベースと互換性があります。H2が互換性のないある一定の領域があります。

@advanced_1110_h3
オートコミットがONの時のトランザクションコミット

@advanced_1111_p
この時、このデータベースエンジンは 結果が返ってくる直前にトランザクションをコミットします (オートコミットがONの場合)。 クエリーにとって、アプリケーションがresult setを通してスキャンする前や、result setが閉じられる前でさえも、 トランザクションはコミットされるということを意味しています。このケースでは、他のデータベースエンジンは result setが閉じられる時、トランザクションをコミットします。

@advanced_1112_h3
キーワード / 予約語

@advanced_1113_p
引用 (二重引用符で囲まれる) されない限り、識別子 (テーブル名、カラム名など) として使用できないキーワードのリストがあります。 現在のリスト:

@advanced_1114_p
#CROSS, CURRENT_DATE, CURRENT_TIME, CURRENT_TIMESTAMP, DISTINCT, EXCEPT, EXISTS, FALSE, FOR, FROM, FULL, GROUP, HAVING, INNER, INTERSECT, IS, JOIN, LIKE, LIMIT, MINUS, NATURAL, NOT, NULL, ON, ORDER, PRIMARY, ROWNUM, SELECT, SYSDATE, SYSTIME, SYSTIMESTAMP, TODAY, TRUE, UNION, WHERE

@advanced_1115_p
このリストのある特定のワードはキーワードです。なぜなら、例えば CURRENT_TIMESTAMP のような 互換性のため "()" なしで使用できる関数だからです。

@advanced_1116_h2
#Standards Compliance

@advanced_1117_p
#This database tries to be as much standard compliant as possible. For the SQL language, ANSI/ISO is the main standard. There are several versions that refer to the release date: SQL-92, SQL:1999, and SQL:2003. Unfortunately, the standard documentation is not freely available. Another problem is that important features are not standardized. Whenever this is the case, this database tries to be compatible to other databases.

@advanced_1118_h2
Windowsサービスとして実行する

@advanced_1119_p
ネイティブラッパー / アダプタを使用して、JavaアプリケーションはWindowsサービスとして実行できます。これを実行するために、様々なツールが有効です。Tanuki Software, Inc. (<a href="http://wrapper.tanukisoftware.org/">http://wrapper.tanukisoftware.org/</a>) のJavaサービスラッパーはインストールが含まれています。H2データベースエンジンサービスのインストール、起動、終了とアンインストールのためのバッチファイルが添付されます。このサービスは、TCPサーバーとH2コンソールWebアプリケーションが含まれます。バッチファイルは、H2/service ディレクトリに配置されています。

@advanced_1120_h3
サービスをインストールする

@advanced_1121_p
サービスは、最初にWindowsサービスとして登録することが必要です。 これを行うために、1_install_service.bat をダブルクリックします。 成功すれば、コマンドプロンプトウィンドウが開き、すぐに消えます。失敗したらメッセージが現れます。

@advanced_1122_h3
サービスを起動する

@advanced_1123_p
Windowsのサービスマネージャを使用するか、2_start_service.bat をダブルクリックして H2データベースエンジンサービスを起動することができます。サービスがインストールされていなければ、 バッチファイルはエラーメッセージを表示しないということに注意して下さい。

@advanced_1124_h3
H2コンソールに接続する

@advanced_1125_p
サービスのインストールと起動後、ブラウザを使用してH2コンソールアプリケーションに 接続することができます。3_start_browser.bat をダブルクリックして実行します。 デフォルトのポート (8082) はバッチファイルでハードコード化されているものです。

@advanced_1126_h3
サービスを終了する

@advanced_1127_p
サービスを終了するには、4_stop_service.bat をダブルクリックします。 サービスがインストール、または開始されていなければ、 バッチファイルはエラーメッセージを表示しないということに注意して下さい。

@advanced_1128_h3
サービスのアンインストール

@advanced_1129_p
サービスをアンインストールするには、5_uninstall_service.bat をダブルクリックします。成功すれば、コマンドプロンプトウィンドウが開き、すぐに消えます。 失敗したらメッセージが現れます。

@advanced_1130_h2
ODBCドライバ

@advanced_1131_p
このデータベースは現時点で、自身のODBCドライバと共に動作しませんが、PostgreSQLネットワークプロトコルをサポートしています。そのため、PostgreSQL ODBCドライバが使用可能です。PostgreSQLネットワークプロトコルのサポートは非常に新しく、試験的なものとして見なされます。製品アプリケーションで使用されるべきではありません。

@advanced_1132_p
#To use the PostgreSQL ODBC driver on 64 bit versions of Windows, first run <code>c:/windows/syswow64/odbcad32.exe</code> . At this point you set up your DSN just like you would on any other system. See also: <a href="http://archives.postgresql.org/pgsql-odbc/2005-09/msg00125.php">Re: ODBC Driver on Windows 64 bit</a>

@advanced_1133_h3
ODBCインストール

@advanced_1134_p
#First, the ODBC driver must be installed. Any recent PostgreSQL ODBC driver should work, however version 8.2 (psqlodbc-08_02*) or newer is recommended. The Windows version of the PostgreSQL ODBC driver is available at <a href="http://www.postgresql.org/ftp/odbc/versions/msi">http://www.postgresql.org/ftp/odbc/versions/msi</a> .

@advanced_1135_h3
サーバーの起動

@advanced_1136_p
ODBCドライバのインストール後、コマンドラインを使用してH2サーバーを起動します:

@advanced_1137_p
PGサーバー (PostgreSQLプロトコルのためのPG) が同様に起動します。デフォルトでは、データベースはサーバーが起動した現在作業中のディレクトリに保存されます。ユーザーホームディレクトリなど、別のディレクトリにデータベースを保存するには、-baseDir を使用します:

@advanced_1138_p
PGサーバーは次のJavaアプリケーション内から起動、終了することが可能です:

@advanced_1139_p
#By default, only connections from localhost are allowed. To allow remote connections, use <code>-pgAllowOthers</code> when starting the server.

@advanced_1140_h3
ODBC設定

@advanced_1141_p
ドライバのインストール後、新しいデータソースを追加しなければなりません。Windowsでは、データソースAdministratorを開くために、<code>odbcad32.exe</code> を実行します。"Add..." をクリックし、PostgreSQL Unicode driverを選択します。そして、"Finish" をクリックします。接続プロパティを変更することが可能です:

@advanced_1142_th
プロパティ

@advanced_1143_th
例

@advanced_1144_th
コメント

@advanced_1145_td
Data Source

@advanced_1146_td
H2 Test

@advanced_1147_td
ODBCデータソースの名称

@advanced_1148_td
Database

@advanced_1149_td
test

@advanced_1150_td
データベース名。現時点では簡易な名前のみサポートされています;

@advanced_1151_td
相対パス、または絶対パスはデータベース名にサポートされていません。

@advanced_1152_td
デフォルトでは、-baseDir 設定が使用された時を除き、

@advanced_1153_td
データベースはサーバーが起動された現在作業中のディレクトリに保存されます。

@advanced_1154_td
名前は少なくとも3文字でなければなりません。

@advanced_1155_td
Server

@advanced_1156_td
localhost

@advanced_1157_td
サーバー名、またはIPアドレス

@advanced_1158_td
デフォルトでは、リモート接続のみ許可されています。

@advanced_1159_td
User Name

@advanced_1160_td
sa

@advanced_1161_td
データベースのユーザー名

@advanced_1162_td
SSL Mode

@advanced_1163_td
disabled

@advanced_1164_td
現時点で、SSLはサポートされていません。

@advanced_1165_td
Port

@advanced_1166_td
5435

@advanced_1167_td
PGサーバーが傾聴しているポート

@advanced_1168_td
Password

@advanced_1169_td
sa

@advanced_1170_td
データベースパスワード

@advanced_1171_p
#To improve performance, please enable 'server side prepare' under Options / Datasource / Page 2 / Server side prepare.

@advanced_1172_p
この後、このデータソースを使用できます。

@advanced_1173_h3
PGプロトコルサポートの制限

@advanced_1174_p
現時点では、PostgreSQLネットワークプロトコルのサブセットのみ実装されています。また、カタログ、またはテキストエンコーディングでのSQLレベル上の互換性問題がある可能性があります。問題は発見されたら修正されます。現在、PGプロトコルが使用されている時、ステートメントはキャンセルされません。

@advanced_1175_p
#PostgreSQL ODBC Driver Setup requires a database password; that means it is not possible to connect to H2 databases without password. This is a limitation of the ODBC driver.

@advanced_1176_h3
セキュリティ考慮

@advanced_1177_p
現在、PGサーバーはchallenge response、またはパスワードの暗号化をサポートしていません。パスワードが読みやすいため、アタッカーがODBCドライバとサーバー間でのデータ転送を傾聴できる場合、これは問題になるでしょう。また、暗号化SSL接続も現在使用不可能です。そのため、ODBCドライバはセキュリティが重視される場面においては使用されるべきではありません。

@advanced_1178_h2
#Using H2 in Microsoft .NET

@advanced_1179_p
#The database can be used from Microsoft .NET even without using Java, by using IKVM.NET. You can access a H2 database on .NET using the JDBC API, or using the ADO.NET interface.

@advanced_1180_h3
#Using the ADO.NET API on .NET

@advanced_1181_p
#An implementation of the ADO.NET interface is available in the open source project <a href="http://code.google.com/p/h2sharp">H2Sharp</a> .

@advanced_1182_h3
#Using the JDBC API on .NET

@advanced_1183_li
#Install the .NET Framework from <a href="http://www.microsoft.com">Microsoft</a> .  Mono has not yet been tested.

@advanced_1184_li
#Install <a href="http://www.ikvm.net">IKVM.NET</a> .

@advanced_1185_li
#Copy the h2*.jar file to ikvm/bin

@advanced_1186_li
#Run the H2 Console using: <code>ikvm -jar h2*.jar</code>

@advanced_1187_li
#Convert the H2 Console to an .exe file using: <code>ikvmc -target:winexe h2*.jar</code> .  You may ignore the warnings.

@advanced_1188_li
#Create a .dll file using (change the version accordingly): <code>ikvmc.exe -target:library -version:1.0.69.0 h2*.jar</code>

@advanced_1189_p
#If you want your C# application use H2, you need to add the h2.dll and the IKVM.OpenJDK.ClassLibrary.dll to your C# solution. Here some sample code:

@advanced_1190_h2
ACID

@advanced_1191_p
データベースの世界では、ACIDとは以下を表しています:

@advanced_1192_li
#Atomicity: transactions must be atomic, meaning either all tasks are performed or none.

@advanced_1193_li
#Consistency: all operations must comply with the defined constraints.

@advanced_1194_li
#Isolation: transactions must be isolated from each other.

@advanced_1195_li
#Durability: committed transaction will not be lost.

@advanced_1196_h3
Atomicity (原子性)

@advanced_1197_p
このデータベースでのトランザクションは常にアトミックです。

@advanced_1198_h3
Consistency (一貫性)

@advanced_1199_p
#By default, this database is always in a consistent state. Referential integrity rules are enforced except when explicitly disabled.

@advanced_1200_h3
Isolation (独立性 / 分離性)

@advanced_1201_p
H2は、他の多くのデータベースシステムと同様に、デフォルトの分離レベルは "read committed" です。これはより良いパフォーマンスを提供しますが、トランザクションは完全に分離されていないということも意味します。H2はトランザクション分離レベル "serializable"、"read committed"、"read uncommitted" をサポートしています。

@advanced_1202_h3
Durability (永続性)

@advanced_1203_p
このデータベースは、全てのコミットされたトランザクションが電源異常に耐えられるということを保証しません。全てのデータベースが電源異常の状況において、一部トランザクションが失われるということをテストは示しています (詳細は下記をご覧下さい)。トランザクションが失われることを容認できない場面では、ノートパソコン、またはUPS (無停電電源装置) を使用します。永続性がハードウェア異常の起こり得る全ての可能性に対して必要とされるのであれば、H2クラスタリングモードのようなクラスタリングが使用されるべきです。

@advanced_1204_h2
永続性問題

@advanced_1205_p
完全な永続性とは、全てのコミットされたトランザクションは電源異常に耐えられる、ということを意味します。 いくつかのデータベースは、永続性を保証すると主張していますが、このような主張は誤っています。 永続性テストはH2、HSQLDB、PostgreSQL、Derbyに対して実行されました。これらの全てのデータベースは、 時々コミットされたトランザクションを失います。このテストはH2ダウンロードに含まれています。 org.h2.test.poweroff.Test をご覧下さい。

@advanced_1206_h3
永続性を実現する (しない) 方法

@advanced_1207_p
失われなかったコミット済みトランザクションは、最初に思うよりもより複雑だということを理解して下さい。 完全な永続性を保障するためには、データベースは、コミットの呼び出しが返ってくる前に ログレコードがハードドライブ上にあることを確実にしなければなりません。 これを行うために、データベースは異なったメソッドを使用します。ひとつは "同期書き込み" ファイルアクセスモードを使用することです。Javaでは、RandomAccessFile はモード "rws" と "rwd" を サポートしています:

@advanced_1208_li
#rwd: every update to the file's content is written synchronously to the underlying storage device.

@advanced_1209_li
#rws: in addition to rwd, every update to the metadata is written synchronously.

@advanced_1210_p
#A test (org.h2.test.poweroff.TestWrite) with one of those modes achieves around 50 thousand write operations per second. Even when the operating system write buffer is disabled, the write rate is around 50 thousand operations per second. This feature does not force changes to disk because it does not flush all buffers. The test updates the same byte in the file again and again. If the hard drive was able to write at this rate, then the disk would need to make at least 50 thousand revolutions per second, or 3 million RPM (revolutions per minute). There are no such hard drives. The hard drive used for the test is about 7200 RPM, or about 120 revolutions per second. There is an overhead, so the maximum write rate must be lower than that.

@advanced_1211_p
バッファーは fsync 関数を呼ぶことによってフラッシュされます。Javaでこれを行う二つの方法があります:

@advanced_1212_li
FileDescriptor.sync() ドキュメンテーションには、これは強制的に全てのシステムバッファーに基本となる デバイスとの同期を取らせる、と書かれています。このFileDescriptorに関連するバッファーのインメモリでの 変更コピーが全て物理メディアに書かれた後、Syncは返ることになっています。

@advanced_1213_li
FileChannel.force() (JDK 1.4 以来) このメソッドは、強制的にこのチャネルのファイルの更新は それを含むストレージデバイスに書き込まれることを行います。

@advanced_1214_p
#By default, MySQL calls fsync for each commit. When using one of those methods, only around 60 write operations per second can be achieved, which is consistent with the RPM rate of the hard drive used. Unfortunately, even when calling FileDescriptor.sync() or FileChannel.force(), data is not always persisted to the hard drive, because most hard drives do not obey fsync(): see <a href="http://hardware.slashdot.org/article.pl?sid=05/05/13/0529252">Your Hard Drive Lies to You</a> . In Mac OS X, fsync does not flush hard drive buffers. See <a href="http://lists.apple.com/archives/darwin-dev/2005/Feb/msg00072.html">Bad fsync?</a> . So the situation is confusing, and tests prove there is a problem.

@advanced_1215_p
#Trying to flush hard drive buffers is hard, and if you do the performance is very bad. First you need to make sure that the hard drive actually flushes all buffers. Tests show that this can not be done in a reliable way. Then the maximum number of transactions is around 60 per second. Because of those reasons, the default behavior of H2 is to delay writing committed transactions.

@advanced_1216_p
H2では、電源異常の後、1秒以上のコミットされたトランザクションが失われます。 この性質を変更するためには。 SET WRITE_DELAY と CHECKPOINT SYNC を使用します。 多くの他のデータベースも同様に遅延コミットをサポートしています。パフォーマンス比較では、 遅延コミットは、サポートする全てのデータベースによって使用されました。

@advanced_1217_h3
永続性テストを実行する

@advanced_1218_p
このデータベースと他のデータベースの、永続性 / 非永続性テストを行うために、 パッケージ内 org.h2.test.poweroff のテストアプリケーションを使用することができます。 ネットワーク接続の二つのコンピューターがこのテストを実行するのに必要です。 ひとつのコンピューターは、他のコンピューター上でテストアプリケーションが実行されている間 (電源は切られています) ただ聞いています。リスナーアプリケーションのコンピューターは TCP/IP ポートを開き、 次の接続のために聞きます。二つ目のコンピューターは最初リスナーに接続し、データベースを作成して レコードの挿入を開始します。この接続は "autocommit" に設定されます。それぞれのレコード挿入後のコミットが 自動的に行われるという意味です。その後、テストコンピューターはこのレコードの挿入に成功したということを リスナーに通知します。リスナーコンピューターは10秒ごとに最後に挿入されたレコードを表示します。 電源を手動でOFFにしてコンピューターを再起動し、アプリケーションを再び実行します。 多くのケースで、リスナーコンピューターが知る全てのレコードを含むデータベースはないということがわかります。 詳細は、リスナーのソースコードとテストアプリケーションを参照して下さい。

@advanced_1219_h2
リカバーツールを使用する

@advanced_1220_p
#The recover tool can be used to extract the contents of a data file, even if the database is corrupted. It also extracts the content of the log file or large objects (CLOB or BLOB). To run the tool, type on the command line:

@advanced_1221_p
#For each database in the current directory, a text file will be created. This file contains raw insert statements (for the data) and data definition (DDL) statements to recreate the schema of the database. This file can be executed using the RunScript tool or a <code>RUNSCRIPT FROM</code> SQL statement. The script includes at least one CREATE USER statement. If you run the script against a database that was created with the same user, or if there are conflicting users, running the script will fail. Consider running the script against a database that was created with a user name that is not in the script.

@advanced_1222_h2
ファイルロックプロトコル

@advanced_1223_p
#Whenever a database is opened, a lock file is created to signal other processes that the database is in use. If the database is closed, or if the process that opened the database terminates, this lock file is deleted.

@advanced_1224_p
#In special cases (if the process did not terminate normally, for example because there was a power failure), the lock file is not deleted by the process that created it. That means the existence of the lock file is not a safe protocol for file locking. However, this software uses a challenge-response protocol to protect the database files. There are two methods (algorithms) implemented to provide both security (that is, the same database files cannot be opened by two processes at the same time) and simplicity (that is, the lock file does not need to be deleted manually by the user). The two methods are 'file method' and 'socket methods'.

@advanced_1225_h3
ファイルロックメソッド "File"

@advanced_1226_p
データベースファイルロックのデフォルトメソッドは "Fileメソッド" です。アルゴリズム:

@advanced_1227_li
ロックファイルが存在しない時は、作成されます (アトミックオペレーション File.createNewFile を使用する)。 その時、プロセスは少し (20ms) 待機し、再びファイルをチェックします。 もしファイルがこの間に変更されたら、オペレーションは中止されます。 ロックファイルを作成したすぐ後にプロセスがロックファイルを削除する時、 これはレースコンディションから保護し、三番目のプロセスはファイルを再び作成します。 二つのライターしか存在しなければ、これは起こりません。

@advanced_1228_li
もしファイルが作成されたら、ロックメソッド ("file") でランダムな番号が一緒に挿入されます。 その後、ファイルが他のスレッド/ プロセスによって削除、または 修正された時、定期的にチェックする (デフォルトでは毎秒1回) watchdogスレッドは開始されます。 これが起きる時はいつも、ファイルは古いデータに上書きされます。システムが非常に混み合っている時でさえも、 非検出の状態で処理できないロックファイルを変更するために、watchdogスレッドは最優先に実行します。 しかし、watchdogスレッドはほとんどの時間待機しているため、非常に小さなリソース (CPU time) を使用します。 また、watchdogはハードディスクから読み取りのみ行い、書き込みはしません。

@advanced_1229_li
もしロックファイルが存在し、20ms内に変更されたら、プロセスは数回 (10回以上) 待機します。 まだ変更されていたら、例外が投げられます (データベースはロックされます)。 多数の並列ライターで競合している状態を排除するためにこれが行われます。 その後、ファイルは新しいバージョンに上書きされます。 そして、スレッドは2秒間待機します。もしファイルを保護するwatchdogスレッドが存在したら、 変更は上書きし、このプロセスはデータベースをロックするために機能しなくなります。 しかし、もしwatchdogスレッドが存在しなければ、ロックファイルはこのスレッドによって 書かれたままの状態です。このケースでは、ファイルは削除され、自動的にまた作成されます。 watchdogスレッドはこのケースでは起動され、ファイルはロックされます。

@advanced_1230_p
このアルゴリズムは100以上の並列スレッドでテストされました。いくつかのケースでは、 データベースをロックしようとする多数の並列スレッドが存在する時、それらはしばらくお互いをブロックします (それらのうちどれかがファイルをロックすることができないことを意味します)。 しかし、ファイルは同時に二つのスレッドによってロックされることは決してありません。 しかし、多数の並列スレッド / プロセスを使用することは一般的な使用ケースではありません。 通常、データベースを開くことができなかったり、(速い)ループのやり直しができなかったりした場合、 アプリケーションはユーザーにエラーを投げるべきです。

@advanced_1231_h3
ファイルロックメソッド "Socket"

@advanced_1232_p
#There is a second locking mechanism implemented, but disabled by default. To use it, append <code>;FILE_LOCK=SOCKET</code> to the database URL. The algorithm is:

@advanced_1233_li
ロックファイルが存在しない時は、作成されます。その時、サーバーソケットは定義されたポートで開かれ、 開かれた状態を保ちます。開かれたデータベースのプロセスのポートとIPアドレスはロックファイルの中に書かれています。

@advanced_1234_li
もしロックファイルが存在し、ロックメソッドが "file" なら、ソフトウェアは "file" メソッドにスイッチします。

@advanced_1235_li
#If the lock file exists, and the lock method is 'socket', then the process checks if the port is in use. If the original process is still running, the port is in use and this process throws an exception (database is in use). If the original process died (for example due to a power failure, or abnormal termination of the virtual machine), then the port was released. The new process deletes the lock file and starts again.

@advanced_1236_p
このメソッドは、活発に毎秒同じファイルをポーリングする (読み込む) watchdogスレッドを必要としていません。 このメソッドの問題は、ファイルがネットワークシェアに保存されたら、二つのプロセスは (異なるコンピューターで実行中の)、 TCP/IP接続を直接保持していなければ、同じデータベースファイルを開くことができます。

@advanced_1237_h2
SQLインジェクションに対する防御

@advanced_1238_h3
SQLインジェクションとは

@advanced_1239_p
このデータベースエンジンは "SQLインジェクション" として知られる セキュリティ脆弱性の解決策を備えています。 これは、SQLインジェクションの意味とは何か、 についての短い説明です。いくつかのアプリケーションは、エンベッドユーザーがこのように入力する SQLステートメントを構築します:

@advanced_1240_p
このメカニズムがアプリケーションのどこかで使用され、ユーザー入力が正しくないフィルター処理、 またはエンベッドなら、ユーザーはパスワード: ' OR ''=' のような (この例の場合) 特別に作られた入力を使用することによって、SQLの機能、またはステートメントに入り込むことが可能です。 このケースでは、ステートメントはこのようになります:

@advanced_1241_p
データベースに保存されたパスワードが何であっても、これは常に正しいものになります。 SQLインジェクションについての詳細は、用語集とリンク をご覧下さい。

@advanced_1242_h3
リテラルを無効にする

@advanced_1243_p
ユーザー入力が直接SQLステートメントに組み込まれなければ、 SQLインジェクションは不可能です。上記の問題の簡単な解決方法は、PreparedStatementを使用することです:

@advanced_1244_p
このデータベースは、ユーザー入力をデータベースに通す時、パラメータの使用を強制する方法を提供しています。 SQLステートメントの組み込まれたリテラルを無効にすることでこれを実行します。 次のステートメントを実行します:

@advanced_1245_p
#Afterwards, SQL statements with text and number literals are not allowed any more. That means, SQL statement of the form WHERE NAME='abc' or WHERE CustomerId=10 will fail. It is still possible to use PreparedStatements and parameters as described above. Also, it is still possible to generate SQL statements dynamically, and use the Statement API, as long as the SQL statements do not include literals. There is also a second mode where number literals are allowed: SET ALLOW_LITERALS NUMBERS. To allow all literals, execute SET ALLOW_LITERALS ALL (this is the default setting). Literals can only be enabled or disabled by an administrator.

@advanced_1246_h3
定数を使用する

@advanced_1247_p
リテラルを無効にするということは、ハードコード化された "定数" リテラルを無効にする、 ということも意味します。このデータベースは、CREATE CONSTANT コマンドを使用して定数を定義することをサポートしています。 定数はリテラルが有効であるときのみ定義することができますが、リテラルが無効の時でも使用することができます。 カラム名の名前の衝突を避けるために、定数は他のスキーマで定義できます:

@advanced_1248_p
リテラルが有効の時でも、クエリーやビューの中でハードコード化された数値リテラル、 またはテキストリテラルの代わりに、定数を使用する方がより良いでしょう。With 定数では、タイプミスはコンパイル時に発見され、ソースコードは理解、変更しやすくなります。

@advanced_1249_h3
ZERO() 関数を使用する

@advanced_1250_p
組み込み関数 ZERO() がすでにあるため、 数値 0 のための定数を作る必要はありません:

@advanced_1251_h2
#Protection against Remote Access

@advanced_1252_p
#By default this database does not allow others to connect when starting the H2 Console, the TCP server, or the PG server. Remote access can be enabled using the command line options -webAllowOthers, -tcpAllowOthers, and -pgAllowOthers. If you enable remote access, please also consider using the options -baseDir and -ifExists, so that remote users can not create new databases or access existing databases with weak passwords. Also, ensure the existing accessible databases are protected using a strong password.

@advanced_1253_h2
#Restricting Class Loading and Usage

@advanced_1254_p
#By default there is no restriction on loading classes and executing Java code for admins. That means an admin may call system functions such as System.setProperty by executing:

@advanced_1255_p
#To restrict users (including admins) from loading classes and executing code, the list of allowed classes can be set in the system property h2.allowedClasses in the form of a comma separated list of classes or patterns (items ending with '*'). By default all classes are allowed. Example:

@advanced_1256_p
#This mechanism is used for all user classes, including database event listeners, trigger classes, user-defined functions, user-defined aggregate functions, and JDBC driver classes (with the exception of the H2 driver) when using the H2 Console.

@advanced_1257_h2
セキュリティプロトコル

@advanced_1258_p
次の文章は、このデータベースで使用されている セキュリティプロトコルのドキュメントです。これらの記述は非常に専門的で、 根本的なセキュリティの基本をすでに知っているセキュリティ専門家のみを対象としています。

@advanced_1259_h3
ユーザーパスワードの暗号化

@advanced_1260_p
#When a user tries to connect to a database, the combination of user name, @, and password are hashed using SHA-256, and this hash value is transmitted to the database. This step does not protect against an attacker that re-uses the value if he is able to listen to the (unencrypted) transmission between the client and the server. But, the passwords are never transmitted as plain text, even when using an unencrypted connection between client and server. That means if a user reuses the same password for different things, this password is still protected up to some point. See also 'RFC 2617 - HTTP Authentication: Basic and Digest Access Authentication' for more information.

@advanced_1261_p
#When a new database or user is created, a new cryptographically secure random salt value is generated. The size of the salt is 64 bits. Using the random salt reduces the risk of an attacker pre-calculating hash values for many different (commonly used) passwords.

@advanced_1262_p
#The combination of user-password hash value (see above) and salt is hashed using SHA-256. The resulting value is stored in the database. When a user tries to connect to the database, the database combines user-password hash value with the stored salt value and calculates the hash value. Other products use multiple iterations (hash the hash value again and again), but this is not done in this product to reduce the risk of denial of service attacks (where the attacker tries to connect with bogus passwords, and the server spends a lot of time calculating the hash value for each password). The reasoning is: if the attacker has access to the hashed passwords, he also has access to the data in plain text, and therefore does not need the password any more. If the data is protected by storing it on another computer and only accessible remotely, then the iteration count is not required at all.

@advanced_1263_h3
ファイル暗号化

@advanced_1264_p
データベースファイルは二つの異なるアルゴリズムを使用して、暗号化されます: AES-128 と XTEA です (32 ラウンドを使用)。 XTEAをサポートする理由はパフォーマンス (XTEAはAESのおよそ二倍の速さです) と、AESが突然壊れた場合、代わりとなるアルゴリズムを 持っているからです。

@advanced_1265_p
ユーザーが暗号化されたデータベースに接続しようとした時、"file" という単語と、@と、 ファイルパスワードの組み合わせは、SHA-256を使用してハッシュ化されます。 このハッシュ値はサーバーに送信されます。

@advanced_1266_p
#When a new database file is created, a new cryptographically secure random salt value is generated. The size of the salt is 64 bits. The combination of the file password hash and the salt value is hashed 1024 times using SHA-256. The reason for the iteration is to make it harder for an attacker to calculate hash values for common passwords.

@advanced_1267_p
ハッシュ値の結果は、ブロック暗号アルゴリズム (AES-128、または 32ラウンドのXTEA) のためのキーとして 使用されます。その時、初期化ベクター (IV) キーは、再びSHA-256を使用してキーをハッシュ化することによって 計算されます。IVはアタッカーに知らないということを確認して下さい。秘密のIVを使用する理由は、 ウォーターマークアタック (電子透かし攻撃) を防御するためです。

@advanced_1268_p
#Before saving a block of data (each block is 8 bytes long), the following operations are executed: first, the IV is calculated by encrypting the block number with the IV key (using the same block cipher algorithm). This IV is combined with the plain text using XOR. The resulting data is encrypted using the AES-128 or XTEA algorithm.

@advanced_1269_p
復号化の時、オペレーションは反対に行われます。最初に、ブロックはキーを使用して復号化され、 その時、IVはXORを使用して復号化テキストと併用されます。

@advanced_1270_p
#Therefore, the block cipher mode of operation is CBC (cipher-block chaining), but each chain is only one block long. The advantage over the ECB (electronic codebook) mode is that patterns in the data are not revealed, and the advantage over multi block CBC is that flipped cipher text bits are not propagated to flipped plaintext bits in the next block.

@advanced_1271_p
データベース暗号化は、使用されていない間は (盗まれたノートパソコン等) 安全なデータベースだということを 意味します。これは、データベースが使用されている間に、アタッカーがファイルにアクセスしたというケースを 意味するのではありません。アタッカーが書き込みアクセスをした時、例えば、 彼はファイルの一部を古いバージョンに置き換え、データをこのように操ります。

@advanced_1272_p
ファイル暗号化はデータベースエンジンのパフォーマンスを低速にします。非暗号化モードと比較すると、 データベースオペレーションは、XTEAを使用する時はおよそ2.2倍長くかかり、 AESを使用する時は2.5倍長くかかります (エンベッドモード)。

@advanced_1273_h3
#Wrong Password / User Name Delay

@advanced_1274_p
#To protect against remote brute force password attacks, the delay after each unsuccessful login gets double as long. Use the system properties h2.delayWrongPasswordMin and h2.delayWrongPasswordMax to change the minimum (the default is 250 milliseconds) or maximum delay (the default is 4000 milliseconds, or 4 seconds). The delay only applies for those using the wrong password. Normally there is no delay for a user that knows the correct password, with one exception: after using the wrong password, there is a delay of up to (randomly distributed) the same delay as for a wrong password. This is to protect against parallel brute force attacks, so that an attacker needs to wait for the whole delay. Delays are synchronized. This is also required to protect against parallel attacks.

@advanced_1275_p
#There is only one exception message for both wrong user and for wrong password, to make it harder to get the list of user names. It is not possible from the stack trace to see if the user name was wrong or the password.

@advanced_1276_h3
HTTPS 接続

@advanced_1277_p
webサーバーは、SSLServerSocketを使用したHTTP と HTTPS接続をサポートします。 簡単に開始できるように、デフォルトの自己認証された証明書がありますが、 カスタム証明書も同様にサポートされています。

@advanced_1278_h2
SSL/TLS 接続

@advanced_1279_p
遠隔SSL/TLS接続は、Java Secure Socket Extension (SSLServerSocket / SSLSocket) の使用をサポートしています。デフォルトでは、匿名のSSLは使用可能です。デフォルトの暗号化パッケージソフトは SSL_DH_anon_WITH_RC4_128_MD5 です。

@advanced_1280_p
#To use your own keystore, set the system properties <code>javax.net.ssl.keyStore</code> and <code>javax.net.ssl.keyStorePassword</code> before starting the H2 server and client. See also <a href="http://java.sun.com/javase/6/docs/technotes/guides/security/jsse/JSSERefGuide.html#CustomizingStores">Customizing the Default Key and Trust Stores, Store Types, and Store Passwords</a> for more information.

@advanced_1281_p
#To disable anonymous SSL, set the system property <code>h2.enableAnonymousSSL</code> to false.

@advanced_1282_h2
汎用一意識別子 (UUID)

@advanced_1283_p
このデータベースはUUIDをサポートしています。 また、暗号化強力疑似乱数ジェネレーターを使用して新しいUUIDを作成する関数をサポートしています。 同じ値をもつ二つの無作為なUUIDが存在する可能性は、確率論を使用して計算されることができます。 "Birthday Paradox" もご覧下さい。標準化された無作為に生成されたUUIDは、122の無作為なビットを保持しています。 4ビットはバージョン(無作為に生成されたUUID) に、2ビットはバリアント (Leach-Salz) に使用されます。 このデータベースは組み込み関数 RANDOM_UUID() を使用してこのようなUUIDを生成することをサポートしています。 ここに、値の数字が生成された後、二つの 同一のUUIDが生じる可能性を見積もる小さなプログラムがあります:

@advanced_1284_p
いくつかの値は:

@advanced_1285_p
#To help non-mathematicians understand what those numbers mean, here a comparison: one's annual risk of being hit by a meteorite is estimated to be one chance in 17 billion, that means the probability is about 0.000'000'000'06.

@advanced_1286_h2
システムプロパティから読み込まれた設定

@advanced_1287_p
いくつかのデータベースの設定は、-DpropertyName=value を使用してコマンドラインで設定することができます。 通常、これらの設定は手動で変更することは必要とされていません。設定は大文字と小文字を区別しています。 例:

@advanced_1288_p
#The current value of the settings can be read in the table INFORMATION_SCHEMA.SETTINGS.

@advanced_1289_p
#For a complete list of settings, see <a href="../javadoc/org/h2/constant/SysProperties.html">SysProperties</a> .

@advanced_1290_h2
#Setting the Server Bind Address

@advanced_1291_p
#Usually server sockets accept connections on any/all local addresses. This may be a problem on multi-homed hosts. To bind only to one address, use the system property h2.bindAddress. This setting is used for both regular server sockets and for SSL server sockets. IPv4 and IPv6 address formats are supported.

@advanced_1292_h2
#Pluggable File System

@advanced_1293_p
#This database supports a pluggable file system API. The file system implementation is selected using a file name prefix. The following file systems are included:

@advanced_1294_b
#zip:

@advanced_1295_li
#read-only zip-file based file system. Format: zip:/zipFileName!/fileName.

@advanced_1296_b
#nio:

@advanced_1297_li
#file system that uses FileChannel instead of RandomAccessFile (faster in some operating systems).

@advanced_1298_b
#nioMapped:

@advanced_1299_li
#file system that uses memory mapped files (faster in some operating systems).

@advanced_1300_b
#split:

@advanced_1301_li
#file system that splits files in 1 GB files (stackable with other file systems).

@advanced_1302_b
#memFS:

@advanced_1303_li
#in-memory file system (experimental; used for testing).

@advanced_1304_b
#memLZF:

@advanced_1305_li
#compressing in-memory file system (experimental; used for testing).

@advanced_1306_p
#As an example, to use the the <b>nio</b> file system, use the following database URL: <code>jdbc:h2:nio:~/test</code> .

@advanced_1307_p
#To register a new file system, extend the classes org.h2.store.fs.FileSystem and FileObject, and call the method FileSystem.register before using it.

@advanced_1308_h2
#Limits and Limitations

@advanced_1309_p
#This database has the following known limitations:

@advanced_1310_li
#Database file size limits (excluding BLOB and CLOB data):  With the default storage mechanism, the maximum file size is currently 256 GB for the data, and 256 GB for the index.  With the page store (experimental): 4 TB or higher.

@advanced_1311_li
#BLOB and CLOB size limit: every CLOB or BLOB can be up to 256 GB.

@advanced_1312_li
#The maximum file size for FAT or FAT32 file systems is 4 GB. That means when using FAT or FAT32, the limit is 4 GB for the data. This is the limitation of the file system. The database does provide a workaround for this problem, it is to use the file name prefix 'split:'. In that case files are split into files of 1 GB by default. An example database URL is: <code>jdbc:h2:split:~/test</code> .

@advanced_1313_li
#The maximum number of rows per table is 2'147'483'648.

@advanced_1314_li
#Main memory requirements: The larger the database, the more main memory is required.  With the default storage mechanism, the minimum main memory required for a 12 GB database is around 240 MB.  With the page store (experimental), the minimum main memory required is much lower, around 1 MB for each 8 GB database file size.

@advanced_1315_li
#Limit on the complexity of SQL statements. Statements of the following form will result in a stack overflow exception:

@advanced_1316_li
#There is no limit for the following entities, except the memory and storage capacity:  maximum identifier length (table name, column name, and so on);  maximum number of tables, columns, indexes, triggers, and other database objects;  maximum statement length, number of parameters per statement, tables per statement, expressions  in order by, group by, having, and so on;  maximum rows per query;  maximum columns per table, columns per index, indexes per table, lob columns per table, and so on;  maximum row length, index row length, select row length;  maximum length of a varchar column, decimal column, literal in a statement.

@advanced_1317_li
#For limitations on data types, see the documentation of the respective Java data type  or the data type documentation of this database.

@advanced_1318_h2
用語集とリンク

@advanced_1319_th
用語

@advanced_1320_th
説明

@advanced_1321_td
AES-128

@advanced_1322_td
#A block encryption algorithm. See also: <a
            href="http://en.wikipedia.org/wiki/Advanced_Encryption_Standard">Wikipedia:   AES</a>

@advanced_1323_td
Birthday Paradox

@advanced_1324_td
#Describes the higher than expected probability that two   persons in a room have the same birthday. Also valid for randomly   generated UUIDs. See also: <a
            href="http://en.wikipedia.org/wiki/Birthday_paradox">Wikipedia:   Birthday Paradox</a>

@advanced_1325_td
Digest

@advanced_1326_td
#Protocol to protect a password (but not to protect data).   See also: <a href="http://www.faqs.org/rfcs/rfc2617.html">RFC   2617: HTTP Digest Access Authentication</a>

@advanced_1327_td
GCJ

@advanced_1328_td
#Compiler for Java. <a href="http://gcc.gnu.org/java">GNU   Compiler for the Java</a> and <a
            href="http://www.dobysoft.com/products/nativej">NativeJ   (commercial)</a>

@advanced_1329_td
HTTPS

@advanced_1330_td
#A protocol to provide security to HTTP connections. See   also: <a href="http://www.ietf.org/rfc/rfc2818.txt">RFC 2818:   HTTP Over TLS</a>

@advanced_1331_td
Modes of Operation

@advanced_1332_a
#Wikipedia:   Block cipher modes of operation

@advanced_1333_td
Salt

@advanced_1334_td
#Random number to increase the security of passwords. See   also: <a href="http://en.wikipedia.org/wiki/Key_derivation_function">Wikipedia:   Key derivation function</a>

@advanced_1335_td
SHA-256

@advanced_1336_td
#A cryptographic one-way hash function. See also: <a
            href="http://en.wikipedia.org/wiki/SHA_family">Wikipedia: SHA   hash functions</a>

@advanced_1337_td
SQLインジェクション

@advanced_1338_td
#A security vulnerability where an application embeds SQL   statements or expressions in user input. See also: <a
            href="http://en.wikipedia.org/wiki/SQL_injection">Wikipedia:   SQL Injection</a>

@advanced_1339_td
Watermark Attack (透かし攻撃)

@advanced_1340_td
#Security problem of certain encryption programs where the   existence of certain data can be proven without decrypting. For more   information, search in the internet for 'watermark attack   cryptoloop'

@advanced_1341_td
SSL/TLS

@advanced_1342_td
#Secure Sockets Layer / Transport Layer Security. See also: <a href="http://java.sun.com/products/jsse/">Java Secure Socket   Extension (JSSE)</a>

@advanced_1343_td
XTEA

@advanced_1344_td
#A block encryption algorithm. See also: <a
            href="http://en.wikipedia.org/wiki/XTEA">Wikipedia: XTEA</a>

@build_1000_h1
ビルド

@build_1001_a
ポータビリティ

@build_1002_a
環境

@build_1003_a
ソフトウェアのビルド

@build_1004_a
#Build Targets

@build_1005_a
Maven 2 の利用

@build_1006_a
#Translating

@build_1007_a
#Providing Patches

@build_1008_a
#Automated Build

@build_1009_h2
ポータビリティ

@build_1010_p
このデータベースはJavaによって記述されているため、多くのプラットフォームで動作します。また、GCJを利用することで、ネイティブでも実行可能に(ネイティブコードに)コンパイルすることが可能です

@build_1011_h2
環境

@build_1012_p
#A Java Runtime Environment (JRE) version 1.5 or higher is required to run this database.

@build_1013_p
#To build the database executables, the following software stack was used. Newer version or compatible software works too.

@build_1014_li
#Mac OS X and Windows XP

@build_1015_a
#Sun JDK Version 1.5 and 1.6

@build_1016_a
#Eclipse Version 3.4

@build_1017_li
#Eclipse Plugins: <a href="http://subclipse.tigris.org">Subclipse 1.4.6</a> , <a href="http://eclipse-cs.sourceforge.net">Eclipse Checkstyle Plug-in 4.4.2</a> , <a href="http://www.eclemma.org">EclEmma Java Code Coverage 1.3.0</a>

@build_1018_a
#Emma Java Code Coverage

@build_1019_a
#Mozilla Firefox 3.0

@build_1020_a
#OpenOffice 3.0

@build_1021_a
#NSIS 2.38

@build_1022_li
#(Nullsoft Scriptable Install System)

@build_1023_a
#Maven 2.0.9

@build_1024_h2
ソフトウェアのビルド

@build_1025_p
#You need to install a JDK, for example the Sun JDK version 1.5 or 1.6. Ensure that Java binary directory is included in the PATH environment variable, and that the environment variable JAVA_HOME points to your Java installation. On the command line, go to the directory h2 and execute the following command:

@build_1026_p
#For Linux and OS X, use <code>./build.sh</code> instead of <code>build</code> .

@build_1027_p
#You will get a list of targets. If you want to build the jar file, execute (Windows):

@build_1028_h3
#Switching the Source Code

@build_1029_p
#By default the source code uses Java 1.5 features, however Java 1.6 is supported as well. To switch the source code to the install version of Java, run:

@build_1030_h2
#Build Targets

@build_1031_p
#The build system can generate smaller jar files as well. The following targets are currently supported:

@build_1032_li
#jarClient creates the h2client.jar. This only contains the JDBC client.

@build_1033_li
#jarSmall creates the file h2small.jar. This only contains the embedded database. Debug information is disabled.

@build_1034_li
#jarJaqu creates the file h2jaqu.jar. This only contains the JaQu (Java Query) implementation. All other jar files do not include JaQu.

@build_1035_li
#javadocImpl creates the Javadocs of the implementation.

@build_1036_p
#To create the h2client.jar file, go to the directory h2 and execute the following command:

@build_1037_h2
Maven 2 の利用

@build_1038_h3
Centralリポジトリの利用

@build_1039_p
依存関係を取ることで、Maven 2プロジェクトでデータベースを組み込むことも可能です。例:

@build_1040_p
#New versions of this database are first uploaded to http://hsql.sourceforge.net/m2-repo/ and then automatically synchronized with the main maven repository; however after a new release it may take a few hours before they are available there.

@build_1041_h3
スナップショットバージョンの利用

@build_1042_p
スナップショット版のH2.jarファイルをビルドし、ローカルのMaven2リポジトリを更新するには以下のコマンドを実行します:

@build_1043_p
実行後、Maven2プロジェクトにH2DBを依存させ組み込むことが出来るようになります:

@build_1044_h2
#Translating

@build_1045_p
#The translation of this software is split into the following parts:

@build_1046_li
#H2 Console: src/main/org/h2/server/web/res/_text_*.properties

@build_1047_li
#Error messages: src/main/org/h2/res/_messages_*.properties

@build_1048_li
#Web site: src/docsrc/text/_docs_*.utf8.txt

@build_1049_p
#To translate the H2 Console, start it and select Preferences / Translate. The conversion between UTF-8 and Java encoding (using the \u syntax), as well as the HTML entities (&amp;#..;) is automated by running the tool PropertiesToUTF8. The web site translation is automated as well, using <code>build docs</code> .

@build_1050_h2
#Providing Patches

@build_1051_p
#If you like to provide patches, please consider the following guidelines to simplify merging them:

@build_1052_li
#Only use Java 1.5 features (do not use Java 1.6) (see Environment).

@build_1053_li
#Follow the coding style used in the project, and use Checkstyle (see above) to verify.  For example, do not use tabs (use spaces instead).  The checkstyle configuration is in <code>src/installer/checkstyle.xml</code> .

@build_1054_li
#Please provide test cases and integrate them into the test suite.  For Java level tests, see <code>src/test/org/h2/test/TestAll.java</code> .  For SQL level tests, see <code>src/test/org/h2/test/test.in.txt</code> or <code>testSimple.in.txt</code> .

@build_1055_li
#The test cases should cover at least 90% of the changed and new code; use a code coverage tool to verify that (see above).  or use the build target 'coverage'.

@build_1056_li
#Verify that you did not break other features: run the test cases by executing <code>build test</code> .

@build_1057_li
#Provide end user documentation if required ( <code>src/docsrc/html/*</code> ).

@build_1058_li
#Document grammar changes in <code>src/main/org/h2/res/help.csv</code>

@build_1059_li
#Provide a change log entry ( <code>src/docsrc/html/changelog.html</code> ).

@build_1060_li
#Verify the spelling using <code>build spellcheck</code> . If required  add the new words to <code>src/tools/org/h2/build/doc/dictionary.txt</code> .

@build_1061_li
#Run the src/installer/buildRelease to find and fix formatting errors.

@build_1062_li
#Verify the formatting using <code>build docs</code> and <code>build javadoc</code> .

@build_1063_li
#Submit patches as .patch files (compressed if big). To create a patch using Eclipse, use Team / Create Patch.

@build_1064_p
#For legal reasons, patches need to be public in the form of an email to the <a href="http://groups.google.com/group/h2-database">group</a> , or in the form of an <a href="http://code.google.com/p/h2database/issues/list">issue report or attachment</a> . Significant contributions need to include the following statement:

@build_1065_h2
#Automated Build

@build_1066_p
#This build process is automated and runs regularly. The build process includes running the tests and code coverage, using the command line <code>./build.sh clean jar coverage -Dh2.ftpPassword=... uploadBuild</code> . The last results are available here:

@build_1067_a
#Test Output

@build_1068_a
#Code Coverage Summary

@build_1069_a
#Code Coverage Details (download, 1.3 MB)

@build_1070_a
#Build Newsfeed

@build_1071_a
#Latest Jar File (download, 1 MB)

@changelog_1000_h1
変更履歴

@changelog_1001_h2
#Next Version (unreleased)

@changelog_1002_li
#Native fulltext search: before searching, FT_INIT() had to be called.  This is no longer required.

@changelog_1003_li
#Better support GaeVFS (Google App Engine Virtual File System).

@changelog_1004_li
#JaQu: the plan is to support natural (pure Java) conditions such as  (id == 1 && name.equals("Test")). A proof of concept decompiler is now included (it doesn't work yet).

@changelog_1005_li
#Various bugfixes and improvements in the page store mechanism (still experimental).

@changelog_1006_li
#PreparedStatement.setObject now converts a java.lang.Character to a string.

@changelog_1007_li
#H2 Console: PierPaolo Ucchino has completed the Italian translation. Thanks a lot!

@changelog_1008_li
#Various tools now use Java 5 var-args, such as main the methods and SimpleResultSet.addRow.

@changelog_1009_li
#H2 Console: indexes of tables of non-default schemas are now also listed.

@changelog_1010_li
#Issue 111: Multi-version concurrency / duplicate primary key after rollback.

@changelog_1011_li
#Issue 110: Multi-version concurrency / wrong exception is thrown.

@changelog_1012_li
#Parser: sequenceName.NEXTVAL and CURRVAL did not respect the schema search path.

@changelog_1013_li
#Issue 101: The following sequence could throw the exception "Row not found when trying to delete":  start a transaction, insert many rows, delete many rows, rollback. The number of rows depends  on the cache size.

@changelog_1014_li
#The stack trace of very common exceptions is no longer written to the .trace.db file by default.

@changelog_1015_li
#An optimization for OR is implemented, but disabled by default.  Expressions of the type X=1 OR X=2 are converted to X IN(1, 2).  To enable, set the system property h2.optimizeInList to true before loading the H2 JDBC driver.

@changelog_1016_li
#An optimization for IN(..) and IN(SELECT...) is implemented, but disabled by default.  To enable, set the system property h2.optimizeInList to true before loading the H2 JDBC driver.  If enabled, this overrides h2.optimizeIn and h2.optimizeInJoin. Unlike now, this optimization  will also speed up updates and deletes.

@changelog_1017_h2
#Version 1.1.117 (2009-08-09)

@changelog_1018_li
#New committer: Sam Van Oort has been contributing to H2 since quite some time  in many ways (on the mailing list, documentation, and in the form of patches).  He is now a committer.

@changelog_1019_li
#JaQu: the order of the fields in the database no longer needs to match the order in the database.

@changelog_1020_li
#Issue 103: MVCC: the setting MAX_MEMORY_UNDO can currently not be supported when using  multi-version concurrency, that means the complete undo log must fit in memory.

@changelog_1021_li
#LIKE: the escape mechanism can now be disable using ESCAPE ''.  The default escape character can be changed using the system property h2.defaultEscape.  The default is still '\' (as in MySQL and PostgreSQL).

@changelog_1022_li
#Views using functions were not re-evaluated when necessary.

@changelog_1023_li
#Improved MySQL compatibility for SHOW COLUMNS.

@changelog_1024_li
#Improved PostgreSQL compatibility for timestamp literals with timezone.

@changelog_1025_li
#Sergi Vladykin translated the error messages to Russian. Thanks a lot!

@changelog_1026_li
#Support for Java 6 DatabaseMetaData.getTables, getColumns, getProcedures, and getProcedureColumns.

@changelog_1027_li
#Issue 101: Rollback of a large transaction (more than 100000 rows) could fail.

@changelog_1028_li
#Various bugfixes and improvements in the page store mechanism (still experimental).

@changelog_1029_li
#The functions LENGTH, OCTET_LENGTH, and BIT_LENGTH now return BIGINT.

@changelog_1030_li
#Data types CLOB and BLOB: the maximum precision was Integer.MAX_VALUE, it is now Long.MAX_VALUE.

@changelog_1031_li
#Multi-threaded kernel: creating and dropping temporary database objects  and the potentially free pages list was not correctly synchronized. Thanks a lot  to Eric Faulhaber for the test case and patch!

@changelog_1032_li
#Parsing SQL script files is now faster.

@changelog_1033_li
#CSV reading is now faster.

@changelog_1034_li
#SimpleResultSet.newInstance(SimpleRowSource rs) did not work.

@changelog_1035_h2
#Version 1.1.116 (2009-07-18)

@changelog_1036_li
#Server-less multi-connection mode: more bugs are fixed.

@changelog_1037_li
#The built-in help (INFORMATION_SCHEMA.HELP) is smaller, shrinking the jar file size a bit.

@changelog_1038_li
#H2 Console: column of tables of non-default schemas are now also listed,  except for schemas starting with 'INFO'.

@changelog_1039_li
#ALTER TABLE: removing an auto-increment or identity column didn't remove the sequence.

@changelog_1040_li
#Creating indexes is now a bit faster.

@changelog_1041_li
#PG Server: new system property h2.pgClientEncoding to explicitly set the encoding  for clients that don't send the encoding (the default encoding is UTF-8).  Thanks a lot to Sergi Vladykin for the patch!

@changelog_1042_li
#PG Server: improved compatibility by using the type ids of the PostgreSQL driver.  Thanks a lot to Sergi Vladykin for the patch!

@changelog_1043_li
#H2 Console: Oracle system tables are no longer listed, improving performance.

@changelog_1044_li
#Result sets are now read-only except if the statement or prepared statement was created  with the concurrency ResultSet.CONCUR_UPDATABLE. This change is required because the old behavior  (all result set are updatable) violated the JDBC spec. For backward compatibility, use the  system property h2.defaultResultSetConcurrency.

@changelog_1045_li
#New system property h2.defaultResultSetConcurrency to change the default result set concurrency.

@changelog_1046_li
#JDBC: using an invalid result set type or concurrency now throws an exception.

@changelog_1047_li
#If a pooled connection was not closed but garbage collected, a NullPointerException could occur.

@changelog_1048_li
#Fulltext search: a NullPointerException was thrown when updating a value that  was NULL previously.

@changelog_1049_li
#The Recover tool did not work with .data.db files of the wrong size.

@changelog_1050_li
#Triggers: if there was an exception when initializing a trigger, this exception could be hidden,  and in some cases (specially when using the Lucene fulltext index mechanism) a NullPointerException was  thrown later on. Now the exception that occurred on init is thrown when changing data.

@changelog_1051_li
#The soft-references cache (CACHE_TYPE=SOFT_LRU) could throw a NullPointerException.

@changelog_1052_li
#To enable the new page store mechanism, append ;PAGE_STORE=TRUE to the database URL.  or set the system property h2.pageStore to true.  This mechanism is still experimental, and the file format will change, but it is quite stable now.

@changelog_1053_h2
#Version 1.1.115 (2009-06-21)

@changelog_1054_li
#The new storage mechanism is now alpha quality. To try it out, set the system property  "h2.pageStore" to "true" (java -Dh2.pageStore=true). There are still bugs to be found and fixed,  for example inserting many rows references a lot of main memory. Performance is currently  about the same as with the regular storage mechanism, but the database file size is smaller.  The file format is not stable yet.

@changelog_1055_li
#ALTER TABLE could throw an exception "object already exists" in some cases.

@changelog_1056_li
#Views: in some situations, an ArrayIndexOutOfBoundsException  was thrown when using the same view concurrently.

@changelog_1057_li
#java.util.UUID is now supported in PreparedStatement.setObject and user defined Java functions.  ResultSet.getObject() returns a java.util.UUID when using the UUID data type.

@changelog_1058_li
#H2 Console: the language was reset to the browser language when disconnecting.

@changelog_1059_li
#H2 Console: improved Polish translation.

@changelog_1060_li
#Server-less multi-connection mode: more bugs are fixed.

@changelog_1061_li
#The download page now included the SHA1 checksums.

@changelog_1062_li
#Shell tool: the file encoding workaround is now documented  if you run java org.h2.tools.Shell -?.

@changelog_1063_li
#The RunScript tool and SQL statement did not work with the compression method LZF.

@changelog_1064_li
#Fulltext search: searching for NULL or an empty string threw an exception.

@changelog_1065_li
#Lucene fulltext search: FTL_DROP_ALL did not drop the triggers.

@changelog_1066_li
#Backup: if the database contained CLOB or BLOB data, the backup  included a file entry for the LOB directory. This caused the  restore to fail.

@changelog_1067_li
#Data types: LONG is now an alias for BIGINT.

@changelog_1068_h2
#Version 1.1.114 (2009-06-01)

@changelog_1069_li
#ResultSetMetaData.getColumnClassName returned the wrong  class for CLOB and BLOB columns.

@changelog_1070_li
#Fulltext search: data is no longer deleted and  re-inserted if the indexed columns didn't change.

@changelog_1071_li
#In some situations, an ArrayIndexOutOfBoundsException was thrown when adding rows.  This was caused by a bug in the b-tree code.

@changelog_1072_li
#Microsoft Windows Vista: when using the the installer, Vista wrote  "This program may not have installed correctly." This message should no longer appear  (in the h2.nsi file, the line 'RequestExecutionLevel highest' was added).

@changelog_1073_li
#The Recover tool did not always work when the database contains  referential integrity constraints.

@changelog_1074_li
#Java 1.5 is now required to run H2. If required, Retrotranslator can be used  to create a Java 1.4 version (http://retrotranslator.sourceforge.net/).

@changelog_1075_h2
#Version 1.1.113 (2009-05-21)

@changelog_1076_li
#Shell tool: the built-in commands EXIT, HELP, ?, LIST, and so on didn't  work with a semicolon at the end.

@changelog_1077_li
#JDK 1.5 is now required to build the jar file. However it is still possible to create  a jar file for Java 1.4. For details, see buildRelease.sh and buildRelease.bat.  As an alternative, compile using JDK 1.5 or 1.6 and use Retrotranslator to create a Java 1.4  version (http://retrotranslator.sourceforge.net/).

@changelog_1078_li
#When deleting or updating many rows in a table, the space in the index  file was not re-used in the default mode (persistent database, b-tree index,  LOG=1). This caused the index file to grow over time. Workarounds were to  delete and re-created the index file, alter the table (add a remove a column),  or append ;LOG=2 to the database URL. To disable the change, set the system  property h2.reuseSpaceBtreeIndex to false.

@changelog_1079_li
#Identifiers with a digit and then a dollar sign didn't work. Example: A1$B.

@changelog_1080_li
#MS SQL Server compatibility: support for linked tables with  NVARCHAR, NCHAR, NCLOB, and LONGNVARCHAR.

@changelog_1081_li
#Android: workaround for a problem when using read-only databases in zip files  (skip seems to be implemented incorrectly on the Android system).

@changelog_1082_li
#Calling execute() or prepareStatement() with null as the SQL statement  now throws an exception.

@changelog_1083_li
#Benchmark: the number of executed statements was incorrect. The H2 database  was loaded at the beginning of the test to collect results, now it is loaded at the very end.  Thanks to Fred Toussi from HSQLDB for reporting those problems. However the changed  do not affect the relative performance.

@changelog_1084_li
#H2 Console: command line settings are no longer stored in the properties file.  They are now only used for the current process, except if they are explicitly saved.

@changelog_1085_li
#Cache: support for a second level soft-references cache.  To enable it, append ;CACHE_TYPE=SOFT_LRU (or SOFT_TQ) to the database URL, or  set the system property h2.cacheTypeDefault to "SOFT_LRU" / "SOFT_TQ".  Enabling the second level cache reduces performance for  small databases, but speeds up large databases. It makes sense to use it  if the available memory size is unknown. Thanks a lot to Jan Kotek!

@changelog_1086_h2
#Version 1.1.112 (2009-05-01)

@changelog_1087_li
#JdbcPreparedStatement.toString() could throw a NullPointerException.

@changelog_1088_li
#EclipseLink: added H2Platform.supportsIdentity().

@changelog_1089_li
#Connection pool: the default login timeout is now 5 minutes.

@changelog_1090_li
#After truncating tables, opening large databases could become slow  because indexes were always re-built unnecessarily when opening.

@changelog_1091_li
#More bugs in the server-less multi-connection mode have been fixed:  Sometimes parameters of prepared statements were lost when a reconnecting.  Concurrent read operations were slow.  To improve performance, executeQuery(..) must be used for queries  (execute(..) switches to the write mode, which is slow).

@changelog_1092_li
#GROUP BY queries with a self-join (join to the same table) that were grouped by  columns with indexes returned the wrong result in some cases.

@changelog_1093_li
#Improved error message when the .lock.db file modification time is in the future.

@changelog_1094_li
#The MERGE statement now returns 0 as the generated key if the row was updated.

@changelog_1095_li
#Running code coverage is now automated.

@changelog_1096_li
#A file system implementation can now be registered using FileSystem.register.

@changelog_1097_li
#The database file system is no longer included in the jar file, it moved to the test section.

@changelog_1098_h2
#Version 1.1.111 (2009-04-10)

@changelog_1099_li
#In-memory databases can now run inside the Google App Engine.

@changelog_1100_li
#Queries that are ordered by an indexed column returned no rows in certain cases  (if all rows were deleted from the table previously, and there is a low number of rows  in the table, and when not using other conditions, and when using the default b tree index).

@changelog_1101_li
#The wrong exception was thrown when using unquoted text for  the SQL statements COMMENT, ALTER USER, and SET PASSWORD.

@changelog_1102_li
#The built-in connection pool did not roll back transactions and  enable autocommit enabled after closing a connection.

@changelog_1103_li
#Sometimes a StackOverflow occurred when checking for deadlock. See also  http://code.google.com/p/h2database/issues/detail?id=61

@changelog_1104_li
#The Shell tool no longer truncates results with only one column, and displays  a message if data was truncated.

@changelog_1105_h2
#Version 1.1.110 (2009-04-03)

@changelog_1106_li
#Support for not persistent in-memory tables in regular (persistent) databases  using CREATE MEMORY TABLE(..) NOT PERSISTENT. Thanks a lot to Sergi Vladykin for the patch!

@changelog_1107_li
#The H2 Console trimmed the password (removed leading and trailing spaces).  This is no longer the case, to support encrypted H2 database with an empty user password.

@changelog_1108_li
#The data type of a SUBSTRING method was wrong.

@changelog_1109_li
#ResultSet.findColumn and get methods with column label parameters  now also check for matching column names (like most databases except MySQL).

@changelog_1110_li
#H2 Console: the browser system property now supports a list of arguments.  Example: java -Dh2.browser="open,-a,Safari,%url" ...

@changelog_1111_li
#Improved Javadoc navigation (similar to Scaladoc).

@changelog_1112_li
#H2 Console: auto-complete of identifiers did not work correctly  for H2 databases in MySQL mode.

@changelog_1113_li
#DISTINCT and GROUP BY on a CLOB column was broken.

@changelog_1114_li
#The FTP server moved to the tools section and is no longer included in the h2*.jar file.

@changelog_1115_li
#Improved error message for unsupported features:  now the message says what exactly is not supported.

@changelog_1116_li
#Improved OSGi support.

@changelog_1117_li
#Some internal caches did not use the LRU mechanism. Fixed  (LOB file list, optimizer cost cache, trace system, view indexes, collection keys,  compressed in-memory file system).

@changelog_1118_li
#The API of the tools changed a bit (each tool now returns an exit code).

@changelog_1119_li
#Command line help of the tools now match the javadocs.  The build converts the javadocs to a resource that is read by the tool at runtime.  This should not have an effect on using the database, but it reduces duplicate  and out-of-sync documentation.

@changelog_1120_li
#CREATE TABLE: improved compatibility (support for UNIQUE NOT NULL).

@changelog_1121_li
#DatabaseMetaData.getSQLKeywords now returns the correct list.

@changelog_1122_li
#Deterministic user defined functions did not work when the parameter was a column. Fixed.

@changelog_1123_li
#JdbcConnectionPool.setLoginTimeout with 0 now uses the default timeout.

@changelog_1124_li
#Creating a JdbcConnectionPool has been simplified a bit.

@changelog_1125_li
#The built-in connection pool did not re-use connections.  Getting a connection using the built-in JdbcConnectionPool is now about 70 times faster  than opening connections using DriverManager.getConnection.

@changelog_1126_li
#More bugs in the server-less multi-connection mode have been fixed:  If a process terminated while writing, other open connections were blocked.  If two processes were writing to the database, sometimes the database was corrupt after closing.

@changelog_1127_li
#Linked tables to SQLite database can now be created.

@changelog_1128_li
#Nested IN(IN(...)) didn't work.

@changelog_1129_li
#NIO storage: the nio: prefix was using memory mapped files instead of FileChannel.

@changelog_1130_h2
#Version 1.1.109 (2009-03-14)

@changelog_1131_li
#The optimization for IN(...) is now only used if comparing a column with an index.

@changelog_1132_li
#User defined functions can now be deterministic (see CREATE ALIAS documentation).

@changelog_1133_li
#Multiple nested queries in the FROM clause with parameters did not always work.

@changelog_1134_li
#When converting CLOB to BINARY, each character resulted in one byte.  Now, the text is parsed as a hex as when converting VARCHAR.

@changelog_1135_li
#New experimental NIO storage mechanism with both FileChannel and  memory mapped files. To use it, use the file name prefix nio: or nioMapped:  as in jdbc:h2:nio:~/test. So far it looks like NIO storage is faster on Mac OS  but slower on some Windows systems. Thanks a lot to Jan Kotek for the patch!

@changelog_1136_li
#The functions BITOR, BITAND, BITXOR, and MOD now accept  and return BIGINT instead of INT.

@changelog_1137_li
#Could not use the same linked table multiple times in the same query.

@changelog_1138_li
#Bugs in the server-less multi-connection mode have been fixed.

@changelog_1139_li
#Column names could not be named "UNIQUE" (with the quotes).

@changelog_1140_li
#New system function TRANSACTION_ID() to get the current transaction  identifier for a session.

@changelog_1141_h2
#Version 1.1.108 (2009-02-28)

@changelog_1142_li
#When the shutdown hook closed the database, the last log file  was deleted too early. This could cause uncommitted changes to be persisted.  In some cases, this could cause data corruption.

@changelog_1143_li
#JdbcConnectionPool: it was possible to set a negative connection pool size.

@changelog_1144_li
#Fulltext search did not support table names with a backslash.

@changelog_1145_li
#The internal IntArray class did not work correctly when initialized with a zero length array.

@changelog_1146_li
#The H2 Console web application (war file) did only support ASCII characters.  Now UTF-8 is supported.

@changelog_1147_li
#DATEADD does no longer require that the argument is a timestamp.

@changelog_1148_li
#The database file locking mechanism didn't work correctly on Mac OS.

@changelog_1149_li
#Some built-in functions reported the wrong precision, scale, and display size.

@changelog_1150_li
#MySQL compatibility for CREATE TABLE is improved (UNSIGNED, KEY).

@changelog_1151_li
#Recovery did not work if there were more than 255 lobs stored as files.

@changelog_1152_li
#New experimental mode to support multiple read-write connections without starting  a server. To enable this mode, append ;FILE_LOCK=SERIALIZED;OPEN_NEW=TRUE to the database URL.  Don't expect high performance when multiple concurrent writers.

@changelog_1153_li
#In a web application, the database classes are not unloaded if a connection is open.  This may cause out of memory when re-deploying a web application.  The DbStarter is changed to close all connections to the configured database  (by executing SHUTDOWN).

@changelog_1154_li
#The WebServlet did not close the database when un-deploying the web application.

@changelog_1155_li
#The exception message of failed INSERT or MERGE statements now includes all values and the row number.

@changelog_1156_li
#If opening a database failed with an out of memory exception, some files were not closed.

@changelog_1157_li
#Optimizer: the expected runtime calculation was incorrect. The fixed calculation  should give slightly better query plans when using many joins.

@changelog_1158_li
#Improved exception message when connecting to a just started server fails.

@changelog_1159_li
#Connection.isValid is a bit faster.

@changelog_1160_li
#H2 Console: the autocomplete feature has been improved a bit. It can now better  parse conditions.

@changelog_1161_li
#When restarting a web application in Tomcat, an exception was thrown sometimes.  In most cases this was a NullPointerException. A workaround in H2 has been implemented.  The root cause of the problem is now documented in the FAQ:  Tomcat sets all static fields (final or non-final) to null when unloading a web application.  A workaround is to put the h2.jar in the lib directory, or set the system property  org.apache.catalina.loader.WebappClassLoader.ENABLE_CLEAR_REFERENCES  to false.

@changelog_1162_h2
#Version 1.1.107 (2009-01-24)

@changelog_1163_li
#Some DatabaseMetaData operations did not work for non-admin users for versions 1.1.x.

@changelog_1164_li
#The MySQL compatibility extension fromUnixTime now used the English locale.

@changelog_1165_li
#When using LOG=2 and repeatedly updating the last row rows of a table, the index file grew quickly.

@changelog_1166_li
#In versions 1.1.105 and 1.1.106, encrypted script files of earlier versions could not be processed.  This is now again possible. The problem was that such script files were stored in a special format  (STORAGE=TEXT) but support for this format was removed in version 1.1.105.

@changelog_1167_li
#Enabling the trace mechanism by creating a specially named file is no longer supported.

@changelog_1168_h2
#Version 1.1.106 (2009-01-04)

@changelog_1169_li
#Statement.setQueryTimeout did not work correctly for some statements.

@changelog_1170_li
#CREATE DOMAIN: built-in data types can now only be changed if no tables exist.

@changelog_1171_li
#Linked tables: a workaround for Oracle DATE columns has been implemented.

@changelog_1172_li
#DatabaseMetaData.getPrimaryKeys: the column PK_NAME now contains the  constraint name instead of the index name (compatibility for PostgreSQL and Derby).

@changelog_1173_li
#Using IN(..) inside a IN(SELECT..) did not always work.

@changelog_1174_li
#Views with IN(..) that used a view itself did not work.

@changelog_1175_li
#Union queries with LIMIT or ORDER BY that are used in a view or subquery did not work.

@changelog_1176_li
#The license change a bit: so far the license was modified to say  'Swiss law'. This is now changed back to the original 'US law'.  This was requested by a user, and I don't see a problem.

@changelog_1177_li
#Constraints for local temporary tables now session scoped. So far they were global.  Thanks a lot to Eric Faulhaber for finding and fixing this problem!

@changelog_1178_li
#When using the auto-server mode, and if the lock file was modified in the future,  the wrong exception was thrown ('Connection is broken' instead of 'Error opening database: lock file modified in the future').

@changelog_1179_h2
#Version 1.1.105 (2008-12-19)

@changelog_1180_li
#The setting STORAGE=TEXT is no longer supported.

@changelog_1181_li
#Deleting a database using the tool DeleteDbFiles deleted LOB files  of other databases in the same directory.

@changelog_1182_li
#When used in a subquery, LIKE and IN(..) did not work correctly sometimes.

@changelog_1183_li
#The fulltext search documentation has been improved.

@changelog_1184_li
#ARRAY_GET returned the wrong data type (ARRAY). Now it returns VARCHAR.

@changelog_1185_li
#Natural join: the joined columns are not repeated any more when using SELECT *.

@changelog_1186_li
#User defined aggregate functions: the method getType expected internal data types  instead of SQL types.

@changelog_1187_li
#User defined aggregate functions did not work if there was no group by expression.

@changelog_1188_li
#MySQL compatibility: support for := assignment as in @sum:=@sum+x

@changelog_1189_li
#INSERT INTO TEST(SELECT * FROM TEST) is now supported.

@changelog_1190_li
#Each session threw an invisible exception when garbage collected.

@changelog_1191_li
#Foreign key constraints that refer to a quoted column did not work.

@changelog_1192_li
#New meta data column INFORMATION_SCHEMA.TABLES.LAST_MODIFICATION to get  the table modification counter.

@changelog_1193_li
#Shell: line comments didn't work correctly.

@changelog_1194_li
#H2 Console: columns are now listed for up to 500 tables instead of 100.

@changelog_1195_li
#H2 Console: Cmd+Enter executes the current statement, Alt+Space for autocomplete.

@changelog_1196_li
#JaQu: the maximum length of a column can now be defined using maxLength.  For an example, see Product.java (maxLength(category, 255)).

@changelog_1197_li
#R&\#305;dvan A&\#287;ar has completed the Turkish translation of the H2 Console. Thanks a lot!

@changelog_1198_h2
#Version 1.1.104 (2008-11-28)

@changelog_1199_li
#If a query that was used like a table contained group by and was ordered by an expression that  is not in the column list, an exception was thrown.

@changelog_1200_li
#JaQu: tables are now auto-created when running a query.

@changelog_1201_li
#The optimizer had problems with function tables (for example CSVREAD and FTL_SEARCH).  A new system property h2.estimatedFunctionTableRows (default 1000) defines how many rows  can be expected in the table.

@changelog_1202_li
#The function SUM could overflow when using large values. It returns now a data type that is safe.

@changelog_1203_li
#The function AVG could overflow when using large values. Fixed.

@changelog_1204_li
#The emergency reserve file has been removed. It didn't provide an appropriate  solution for the problem. It is still possible for an application to detect and deal with  the low disk space problem (deleting temporary files for example)  using DatabaseEventListener.diskSpaceIsLow, but this method is now always called  with stillAvailable=0.

@changelog_1205_li
#Build: JAVA_HOME is now automatically detected on Mac OS X.

@changelog_1206_li
#Testing for local connections was very slow on some systems.

@changelog_1207_li
#The cache memory usage calculation is more conservative.

@changelog_1208_li
#Allocating space got slower and slower the larger the database.

@changelog_1209_li
#ALTER TABLE ALTER COLUMN could throw the wrong exception in the last version  (Table not found).

@changelog_1210_li
#Updatable result sets: the key columns can now be updated.

@changelog_1211_li
#The H2DatabaseProvider for ActiveObjects is now included in the tools section.

@changelog_1212_li
#The H2Platform for Oracle Toplink Essential has been improved a bit.

@changelog_1213_li
#The Windows service to start H2 didn't work in version 1.1.

@changelog_1214_li
#File systems with a maximum file size (for example FAT) are now supported using  the file prefix 'split:'. In this case the files are split in parts of 1 GB.  Example URL: jdbc:h2:split:~/db/test. If you want to split into parts of 1 MB, use  jdbc:h2:split:20:~/db/test (the part size is 1 &lt;&lt; x, the default is 30 meaning 1 GB).

@changelog_1215_li
#The database now tries to detect if the classloader or virtual machine has  almost shut down by checking if static final variables are set to null.  This should help reduce exceptions when stopping the web application.

@changelog_1216_li
#Compatibility for MS SQL Server DATEDIFF(YYYY, .., ..)

@changelog_1217_li
#ResultSet.getObject for CLOB or BLOB will return a java.sql.Clob / java.sql.Blob object instead of  a java.io.Reader / java.io.InputStream as in version 1.0. This behavior can be changed using the system  property h2.returnLobObjects (true by default for version 1.1).

@changelog_1218_li
#The interface CloseListener has a new method 'remove' that is called when the trigger is dropped.

@changelog_1219_li
#Fulltext search: there was a memory leak when creating and dropping fulltext indexes in a loop.

@changelog_1220_h2
#Version 1.1.103 (2008-11-07)

@changelog_1221_li
#Could not order by a formula when the formula was in the group by list  but not in the select list.

@changelog_1222_li
#Date values that match the daylight saving time end were not allowed in  times zones were the daylight saving time ends at midnight, for years larger than 2037.  Example: timezone Brasilia, date 2042-10-12. This is a problem of Java, however a  workaround is implemented in H2 that solves most problems (except the problems of  java.util.Date itself).

@changelog_1223_li
#ALTER TABLE used a lot of memory when using multi-version concurrency.

@changelog_1224_li
#Referential integrity for in-memory databases didn't work in some cases in version 1.1.102.

@changelog_1225_li
#New column INFORMATION_SCHEMA.COLUMNS.SEQUENCE_NAME to get the name  of the sequence for auto-increment columns.

@changelog_1226_li
#Aliases for built-in data types (such as MEDIUMBLOB which is an alias for BLOB)  can now be re-mapped to another data type using CREATE DOMAIN. However  main built-in data types (such as INTEGER) can not be re-mapped.

@changelog_1227_li
#The Japanese translation has been completed by Masahiro Ikemoto.  Thanks a lot!

@changelog_1228_li
#Improved PostgreSQL compatibility for NEXTVAL and CURRVAL.

@changelog_1229_li
#Less heap memory is needed when multiple databases are open at the same time: the memory reserve  (used to rollback after out of memory) is now global and no longer allocated for each database separately.

@changelog_1230_li
#New system property h2.browser to set the browser to use.

@changelog_1231_li
#To start the browser, java.awt.Desktop.browse is now used if available.

@changelog_1232_h2
#Version 1.1.102 (2008-10-24)

@changelog_1233_li
#The French translation of the H2 Console has been improved by Olivier Parent.  Thanks a lot!

@changelog_1234_li
#There was a memory leak when creating and dropping tables and  indexes in a loop (persistent database only).

@changelog_1235_li
#SET LOG 2 was not effective if executed after opening the database.

@changelog_1236_li
#Translating the H2 Console is now simpler.

@changelog_1237_li
#Common exception (error code 23*) are no longer written to the .trace.db file by default.

@changelog_1238_li
#In-memory databases don't write LOBs to files any longer.

@changelog_1239_li
#Self referencing constraints didn't restrict deleting rows that reference  itself if there is another row that references it.

@changelog_1240_li
#ResultSetMetaData.getColumnName now returns the alias name except for columns.

@changelog_1241_li
#Temporary files are now deleted when the database is closed, even  if they were not garbage collected so far.

@changelog_1242_h2
#Version 1.1.101 (2008-10-17)

@changelog_1243_li
#Errors with code 42000 - 42999 are no longer written to the trace file by default.

@changelog_1244_li
#Queries with more than 10 tables are now faster.

@changelog_1245_li
#Opening a connection with AUTO_SERVER=TRUE is now fast  when the database is already open in another process (less than 0.01 seconds  instead of 2 seconds).

@changelog_1246_li
#IF [NOT] EXISTS is supported for named constraints in  ALTER TABLE ... ADD/DROP CONSTRAINT.

@changelog_1247_li
#The error messages have been translated to Spanish by Dario V. Fassi.  Thanks a lot!

@changelog_1248_li
#Linked tables: the automatic connection sharing didn't work. Actually the  system property h2.shareLinkedConnections was working in the opposite direction:  it was disabled when set to true. Now it works as expected.

@changelog_1249_li
#Opening large database is now faster.

@changelog_1250_li
#New system property h2.socketConnectTimeout, the timeout in milliseconds  to connect to a server. The default is 2000 (2 seconds).

@changelog_1251_li
#The wrong parameters were bound to subqueries with parameters, specially  when using IN(SELECT ...) and IN(...).

@changelog_1252_li
#Unset parameters were not detected when the query was re-compiled.

@changelog_1253_li
#New functions ISO_YEAR, ISO_WEEK, ISO_DAY_OF_WEEK.  Thanks a lot to Robert Rathsack for implementing those!

@changelog_1254_li
#The date functions DAYOFYEAR, DAYOFMONTH, DAYOFWEEK are now called  DAY_OF_YEAR, DAY_OF_MONTH, DAY_OF_WEEK (the old names still work).

@changelog_1255_li
#An out of memory error while deleting or updating many rows could  result in a strange exception.

@changelog_1256_li
#Linked tables: compatibility with MS SQL Server has been improved.

@changelog_1257_li
#Renaming tables that have foreign keys with cascade didn't work correctly.

@changelog_1258_li
#The auto-reconnect feature didn't work when using the auto-server mode. Fixed.

@changelog_1259_li
#Fulltext search: new method FT_DROP_INDEX.

@changelog_1260_li
#The optimization to group using an index didn't work in some cases in version 1.1  (see also system property h2.optimizeGroupSorted).

@changelog_1261_li
#OSGi meta data is included in the manifest file.  An OSGi BundleActivator is included: it loads the database driver when starting the bundle,  and unloads it when stopping the bundle.

@changelog_1262_li
#The default value for MAX_MEMORY_UNDO is now 50000.

@changelog_1263_li
#For alias columns, ResultSetMetaData.getTableName() and getColumnName() now   return the real table and column name in the default mode.

@changelog_1264_li
#In SQL scripts created with SCRIPT TO, schemas are now only created if they don't exist yet.

@changelog_1265_li
#After re-connecting to a database, the database event listener (if set) is informed about it.

@changelog_1266_li
#Local temporary tables now support indexes. Thanks a lot to Matt Roy!

@changelog_1267_li
#RUNSCRIPT no longer uses a temporary file.

@changelog_1268_li
#New system table INFORMATION_SCHEMA.SESSION_STATE containing the  SQL statements that make up the session state. The list currently contains  variables (SET @..) and local temporary tables (without data).

@changelog_1269_li
#After an automatic re-connect, part of the session state stays (the part  that is stored in the SESSION_STATE table).

@changelog_1270_li
#The build didn't work if the directory temp didn't exist before.

@changelog_1271_li
#New system property h2.maxReconnect (default 3) to limit the number of re-connects  for the same SQL statement (this is usually only important for SHUTDOWN).

@changelog_1272_li
#WHERE .. IN (SELECT ...) could throw a NullPointerException.

@changelog_1273_li
#Improved Glassfish / Toplink support in H2Platform  thanks to Marcio Borges from Brazil. Thanks a lot!

@changelog_1274_h2
#Version 1.1.100 (2008-10-04)

@changelog_1275_li
#In version 1.1, the following system properties are now enabled by default:  h2.lobFilesInDirectories, h2.optimizeGroupSorted, h2.optimizeInJoin, h2.shareLinkedConnections

@changelog_1276_li
#The H2 Console tool now works with the JDBC-ODBC bridge.

@changelog_1277_li
#The H2 Console tool now supports command line options to start things separately.

@changelog_1278_li
#Large objects did not work for in-memory databases in server mode in Linux.

@changelog_1279_li
#Connections from a local address other than 'localhost' were not allowed if remote  connections were disabled. This was always a problem, but only got visible in the last release  because the server no longer connects to 'localhost' if networked.

@changelog_1280_li
#The h2console.war can now be built using the Java build.

@changelog_1281_li
#By default, databases are shared in the same process. For read-only databases  this causes unnecessary synchronization, but safes memory. If you want that each connection  opens its own database, append ;OPEN_NEW=TRUE to the database URL.

@changelog_1282_li
#New auto-reconnect feature will cause the JDBC driver to reconnect to  the database if the connection is lost. To enable, append ;AUTO_RECONNECT=TRUE to the database URL.  This is specially helpful when using AUTO_SERVER. AUTO_SERVER automatically uses auto-reconnect.

@changelog_1283_li
#CreateCluster: the property 'serverlist' is now called 'serverList'.

@changelog_1284_li
#The ConvertTraceFile tool could not parse some files because the trace  mechanism did not encode prepared statement parameters.

@changelog_1285_li
#Databases names can now be one character long  (the minimum size used to be 2 characters).

@changelog_1286_h2
#Version 1.0.79 (2008-09-26)

@changelog_1287_li
#Linked tables that point to the same database can now share the connection  within the same database. Access to the same connection is serialized. To enable this feature,  set the system property h2.shareLinkedConnections to true.

@changelog_1288_li
#Multiple processes can now access the same database without having to explicitly  start the server. To do that, append ;AUTO_SERVER=TRUE to the database URL.  In this case, the server is started automatically if the connection is in embedded mode,  and the server mode is used if a server is running. If the process that opened the first  connection is closed, the other client need to reconnect (there is no automatic re-connect so far).  Remote connections are allowed, but only to this database.

@changelog_1289_li
#The server tool now displays the correct IP address if networked.

@changelog_1290_li
#Can now start a TCP server with port 0 (automatically select a port).

@changelog_1291_li
#Result sets with just a unique index can now be updated (previously a primary key was required).

@changelog_1292_li
#LINKED TABLE: the schema name can now be set. When multiple tables exist in different schema,  and the schema name is not set, an exception is thrown.

@changelog_1293_li
#LINKED TABLE: worked around a bug in Oracle with the CHAR data type.

@changelog_1294_li
#Faster hash code calculation for large binary arrays.

@changelog_1295_li
#Faster storage re-use algorithm thanks to Greg Dhuse from cleversafe.com.

@changelog_1296_li
#The database supports the SHOW command for better MySQL and PostgreSQL compatibility.

@changelog_1297_li
#The H2 Console now abbreviates large texts in results.

@changelog_1298_li
#Multiple UNION queries could not be used in derived tables.

@changelog_1299_li
#Linked tables can now be read-only.

@changelog_1300_li
#Temporary linked tables are now supported.

@changelog_1301_li
#It was possible to create tables in read-only databases.

@changelog_1302_li
#SET SCHEMA_SEARCH_PATH is now documented.

@changelog_1303_li
#SET SCHEMA did not work for views.

@changelog_1304_li
#Row level locking for MVCC is now enabled. The exception  'Concurrent update in table ...' is still thrown, but only after the lock timeout.

@changelog_1305_li
#The maximum log file size setting was ignored for large databases.

@changelog_1306_li
#Multi-Version Concurrency (MVCC) may no longer be used when using  the multi-threaded kernel feature (MULTI_THREADED). An exception is thrown  when trying to connect with both settings. Additional synchronization  is required before those features can be used together.

@changelog_1307_li
#The data type JAVA_OBJECT could not be used in updatable result sets.

@changelog_1308_li
#The system property h2.optimizeInJoin did not work correctly.

@changelog_1309_li
#Conditions such as ID=? AND ID>? were slow.

@changelog_1310_h2
#Version 1.0.78 (2008-08-28)

@changelog_1311_li
#The documentation no longer uses a frameset (except the Javadocs).

@changelog_1312_li
#When using DB_CLOSE_DELAY, sometimes a NullPointerException is thrown when  the database is opened almost at the same time as it is closed automatically.  Thanks a lot to Dmitry Pekar for finding this!

@changelog_1313_li
#Java methods with variable number of parameters can now be used (for Java 1.5 or newer).

@changelog_1314_li
#The Japanese translation has been improved by Masahiro Ikemoto. Thanks a lot!

@changelog_1315_li
#The H2 Console replaced an empty user name with a single space.

@changelog_1316_li
#The build target 'build jarSmall' now includes the embedded database.

@changelog_1317_li
#JdbcDataSource now keeps the password in a char array where possible.

@changelog_1318_li
#ResultSet.absolute did not always work with large result sets.

@changelog_1319_li
#Column aliases can now be used in GROUP BY and HAVING.

@changelog_1320_li
#Jason Brittain has contributed MySQL date functions. Thanks a lot!  They are not in the h2.jar file currently, but in src/tools/org/h2/mode/FunctionsMySQL.java.  To install, add this class to the classpath and call FunctionsMySQL.register(conn) in the Java code.

@changelog_1321_h2
#Version 1.0.77 (2008-08-16)

@changelog_1322_li
#JaQu is now using prepared statements and supports Date, Time, Timestamp.

@changelog_1323_li
#When using remote in-memory databases, large LOB objects did not work.

@changelog_1324_li
#Timestamp columns such as TIMESTAMP(6) were not compatible to other database.

@changelog_1325_li
#Opening a large database was slow if there was a problem opening the previous time.

@changelog_1326_li
#NOT IN(SELECT ...) was incorrect if the subquery returns no rows.

@changelog_1327_li
#CREATE TABLE AS SELECT did not work correctly in the multi-version concurrency mode.

@changelog_1328_li
#Support a comma before closing a list, as in: create table test(id int,)

@changelog_1329_li
#MySQL compatibility: linked tables had lower case column names on some systems.

@changelog_1330_li
#DB2 compatibility: the DB2 fetch-first-clause is supported.

@changelog_1331_li
#Oracle compatibility: old style outer join syntax using (+) did work correctly sometimes.

@changelog_1332_li
#ResultSet.setFetchSize is now supported.

@changelog_1333_li
#It has been reported that when using Install4j on some Linux systems and enabling the 'pack200' option,  the h2.jar becomes corrupted by the install process, causing application failure.  A workaround is to add an empty file h2.jar.nopack next to the h2.jar file.  The reason for this problem is not known.

@changelog_1334_h2
#Version 1.0.76 (2008-07-27)

@changelog_1335_li
#The comment of a domain (user defined data type) is now used as the  default column comment when creating a column with this domain.

@changelog_1336_li
#Invalid database names are now detected and a better error message is thrown.

@changelog_1337_li
#ResultSetMetaData.getColumnClassName now returns the correct  class name for BLOB and CLOB.

@changelog_1338_li
#Fixed the Oracle mode: Oracle allows multiple rows only where  all columns of the unique index are NULL.

@changelog_1339_li
#There is a problem with Hibernate when using Boolean columns.  A patch for Hibernate has been submitted at  http://opensource.atlassian.com/projects/hibernate/browse/HHH-3401

@changelog_1340_li
#ORDER BY on tableName.columnName didn't work correctly if the column  name was also used as an alias.

@changelog_1341_li
#H2 Console: the progress display when opening a database has been improved.

@changelog_1342_li
#The error message when the server doesn't start has been improved.

@changelog_1343_li
#Key values can now be changed in updatable result sets.

@changelog_1344_li
#Changes in updatable result sets are now visible even when resetting the result set.

@changelog_1345_li
#Temporary files were sometimes deleted too late when executing large insert, update,  or delete operations.

@changelog_1346_li
#The database file was growing after deleting many rows, and after large update operations.

@download_1000_h1
ダウンロード

@download_1001_h3
#Version 1.1.117 (2009-08-09)

@download_1002_a
Windows Installer

@download_1003_a
Platform-Independent Zip

@download_1004_h3
#Version 1.1.116 (2009-07-18, Last Stable)

@download_1005_a
Windows Installer

@download_1006_a
Platform-Independent Zip

@download_1007_h3
#Download Mirror and Older Versions

@download_1008_a
Platform-Independent Zip

@download_1009_h3
#Jar File

@download_1010_a
#Maven.org

@download_1011_a
#Sourceforge.net

@download_1012_a
#Latest Automated Build (not released)

@download_1013_h3
サブバージョンのソースリポジトリ

@download_1014_a
Google Code

@download_1015_p
#For details about changes, see the <a href="changelog.html">Change Log</a> .

@faq_1000_h1
F A Q

@faq_1001_a
#Are there Known Bugs? When is the Next Release?

@faq_1002_a
このデータベースエンジンはオープンソースですか？

@faq_1003_a
#My Query is Slow

@faq_1004_a
新規データベースの構築方法は？

@faq_1005_a
データベースへの接続方法は？

@faq_1006_a
データベースのファイルはどこに保存されますか？

@faq_1007_a
#What is the Size Limit (Maximum Size) of a Database?

@faq_1008_a
これは信頼できるデータベースですか？

@faq_1009_a
#Why is Opening my Database Slow?

@faq_1010_a
#Is the GCJ Version Stable? Faster?

@faq_1011_a
このプロジェクトの翻訳方法は？

@faq_1012_h3
#Are there Known Bugs? When is the Next Release?

@faq_1013_p
#Usually, bugs get fixes as they are found. There is a release every few weeks. Here is the list of known and confirmed issues:

@faq_1014_li
#Tomcat and Glassfish 3 set most static fields (final or non-final) to null when  unloading a web application. This can cause a NullPointerException in H2 versions  1.1.107 and older, and may still not work in newer versions. Please report it if you  run into this issue. In Tomcat >= 6.0 this behavior can be disabled by setting the  system property org.apache.catalina.loader.WebappClassLoader.ENABLE_CLEAR_REFERENCES  to false, however Tomcat may then run out of memory. A known workaround is to  put the h2.jar file in a shared <code>lib</code> directory (common/lib).

@faq_1015_li
#Some problems have been found with right outer join. Internally, it is converted  to left outer join, which does not always produce the same results as other databases  when used in combination with other joins.

@faq_1016_li
#When using Install4j before 4.1.4 on Linux and enabling 'pack200',  the h2*.jar becomes corrupted by the install process, causing application failure.  A workaround is to add an empty file h2*.jar.nopack next to the h2*.jar file.  This problem is solved in Install4j 4.1.4.

@faq_1017_h3
このデータベースエンジンはオープンソースですか？

@faq_1018_p
はい、H2DBはフリーウェアであり、再配布も可能です。ソースコードも含まれています。ライセンスページも合わせてご確認ください。

@faq_1019_h3
#My Query is Slow

@faq_1020_p
SELECT (または DELETE、UPDATE、MERGE) ステートメント実行に時間がかかるのはいくつかの理由が考えられます。以下のチェックリストをご確認ください:

@faq_1021_li
#Run ANALYZE (see documentation for details).

@faq_1022_li
クエリにEXPLAINオプションを付けて実行し、インデックスが利用されているかどうか確認する (詳細はドキュメントをご覧下さい)

@faq_1023_li
必要に応じてインデックスを追加し、ANALYZE、EXPLAINオプションを用いて再度クエリを実行する

@faq_1024_li
それでも解決しない場合は、ご連絡ください

@faq_1025_h3
新規データベースの構築方法は？

@faq_1026_p
データベースがまだ存在しない場合、デフォルト設定では自動的に新規作成されます

@faq_1027_h3
データベースへの接続方法は？

@faq_1028_p
データベースドライバは <code>org.h2.Driver</code> で、データベースURLは <code>jdbc:h2:</code> で始まります。JDBCを利用してデータベースに接続する場合は、以下のコードを利用して下さい:

@faq_1029_h3
データベースのファイルはどこに保存されますか？

@faq_1030_p
#When using database URLs like jdbc:h2:~/test, the database is stored in the user directory. For Windows, this is usually "C:\Documents and Settings\&lt;userName&gt;". If the base directory is not set (as in jdbc:h2:test), the database files are stored in the directory where the application is started (the current working directory). When using the H2 Console application from the start menu, this is "&lt;Installation Directory&gt;/bin". The base directory can be set in the database URL. A fixed or relative path can be used. When using the URL jdbc:h2:file:data/sample, the database is stored in the directory "data" (relative to the current working directory). The directory is created automatically if it does not yet exist. It is also possible to use the fully qualified directory name (and for Windows, drive name). Example: jdbc:h2:file:C:/data/test

@faq_1031_h3
#What is the Size Limit (Maximum Size) of a Database?

@faq_1032_p
#See <a href="advanced.html#limits_limitations">Limits and Limitations</a> .

@faq_1033_h3
これは信頼できるデータベースですか？

@faq_1034_p
#Some users have reported that after a power failure, the database can sometimes not be opened because the index file is corrupt. In that case, the index file can be deleted (it is automatically re-created). To avoid this, append ;LOG=2 to the database URL. See also: <a href="grammar.html#set_log">SET LOG</a> . This problem will be solved using the new 'page store' mechanism (currently experimental).

@faq_1035_p
#That is not easy to say. It is still a quite new product. A lot of tests have been written, and the code coverage of these tests is very high. Randomized stress tests are run regularly. But there are probably still bugs that have not yet been found (as with most software). Some features are known to be dangerous, they are only supported for situations where performance is more important than reliability. Those dangerous features are:

@faq_1036_li
#Disabling the transaction log mechanism using SET LOG 0.

@faq_1037_li
#Using the transaction isolation level READ_UNCOMMITTED (LOCK_MODE 0) while at the same time using multiple  connections.

@faq_1038_li
#Disabling database file protection using FILE_LOCK=NO in the database URL.

@faq_1039_li
#Disabling referential integrity using SET REFERENTIAL_INTEGRITY FALSE.

@faq_1040_p
#In addition to that, running out of memory should be avoided. In older versions, OutOfMemory errors while using the database could corrupt a databases.

@faq_1041_p
#Areas that are not fully tested:

@faq_1042_li
#Platforms other than Windows XP, Linux, Mac OS X, or JVMs other than Sun 1.5 or 1.6

@faq_1043_li
#The features AUTO_SERVER and AUTO_RECONNECT

@faq_1044_li
#The MVCC (multi version concurrency) mode

@faq_1045_li
#Cluster mode, 2-phase commit, savepoints

@faq_1046_li
#24/7 operation

@faq_1047_li
#Some operations on databases larger than 500 MB may be slower than expected

@faq_1048_li
#The optimizer may not always select the best plan

@faq_1049_li
#Fulltext search

@faq_1050_li
#Operations on LOBs over 2 GB

@faq_1051_p
試験的に考慮された箇所は以下の通り:

@faq_1052_li
#The PostgreSQL server

@faq_1053_li
#The new page store

@faq_1054_li
#Multi-threading within the engine using SET MULTI_THREADED=1

@faq_1055_li
他のデータベースとの互換モード (一部の特徴のみ提供される)

@faq_1056_h3
#Why is Opening my Database Slow?

@faq_1057_p
#If it takes a long time to open a database, in most cases it was not closed the last time. This is specially a problem for larger databases. To close a database, close all connections to it before the application ends, or execute the command SHUTDOWN. The database is also closed when the virtual machine exits normally by using a shutdown hook. However killing a Java process or calling Runtime.halt will prevent this. The reason why opening is slow in this situations is that indexes are re-created. If you can not guarantee the database is closed, consider using SET LOG 2 (see SQL Grammar).

@faq_1058_p
#To find out what the problem is, open the database in embedded mode using the H2 Console. This will print progress information. If you have many 'Creating index' lines it is an indication that the database was not closed the last time.

@faq_1059_p
#Other possible reasons are: the database is very big (many GB), or contains linked tables that are slow to open.

@faq_1060_h3
#Is the GCJ Version Stable? Faster?

@faq_1061_p
GCJバージョンは、Javaバージョンほどは安定していません。GCJバージョンでリグレッションテストを実行した時、アプリケーションはランダムポイントと思われるところで、エラーメッセージなしで停止する場合があります。現在、GCJバージョンはSun VMの使用時よりも低速です。しかし、GCJバージョンの起動はVM使用時よりも高速です。

@faq_1062_h3
このプロジェクトの翻訳方法は？

@faq_1063_p
#For more information, see <a href="build.html#translating">Build/Translating</a> .

@features_1000_h1
特徴

@features_1001_a
特徴一覧

@features_1002_a
他のデータベースエンジンと比較する

@features_1003_a
#H2 in Use

@features_1004_a
接続モード

@features_1005_a
データベースURL概要

@features_1006_a
エンベッド (ローカル) データベースに接続

@features_1007_a
メモリオンリーデータベース

@features_1008_a
#Database Files Encryption

@features_1009_a
データベースファイルロック

@features_1010_a
すでに存在する場合のみ、データベースを開く

@features_1011_a
#Closing a Database

@features_1012_a
未知の設定を無視

@features_1013_a
接続が開始された時に他の設定を変更する

@features_1014_a
ログインデックスの修正

@features_1015_a
カスタムファイル アクセスモード

@features_1016_a
複数の接続

@features_1017_a
データベースファイルレイアウト

@features_1018_a
ログとリカバリー

@features_1019_a
互換性

@features_1020_a
#Auto-Reconnect

@features_1021_a
#Automatic Mixed Mode

@features_1022_a
トレースオプションを使用する

@features_1023_a
#Using Other Logging APIs

@features_1024_a
読み取り専用データベース

@features_1025_a
#Read Only Databases in Zip or Jar File

@features_1026_a
ディスクスペースが少ない状況での正しい取り扱い

@features_1027_a
computed column / ベースインデックスの機能

@features_1028_a
多次元インデックス

@features_1029_a
パスワードを使用する

@features_1030_a
ユーザー定義の関数とストアドプロシージャ

@features_1031_a
トリガー

@features_1032_a
データベースをコンパクトにする

@features_1033_a
キャッシュの設定

@features_1034_h2
特徴一覧

@features_1035_h3
主な特徴

@features_1036_li
非常に高速なデータベースエンジン

@features_1037_li
#Open source

@features_1038_li
Javaで記載

@features_1039_li
標準規格のSQL、JDBC APIをサポート

@features_1040_li
エンベッドモードとサーバーモード、クラスタリングをサポート

@features_1041_li
強力なセキュリティ機能

@features_1042_li
#The PostgreSQL ODBC driver can be used

@features_1043_li
#Multi version concurrency

@features_1044_h3
追加された特徴

@features_1045_li
ディスクベースデータベース、またはインメモリデータベースと、テーブル、読み取り専用データベースをサポート、テンポラリテーブル

@features_1046_li
トランザクションをサポート (トランザクション分離の serializable (直列化))、2フェーズコミット

@features_1047_li
複数の接続、テーブルレベルのロック

@features_1048_li
コストベースオプティマイザ、複雑なクエリーのために遺伝的アルゴリズムを使用、zero-administration

@features_1049_li
スクロール可能result setと更新可能result setをサポート、大きなresult set、外部結果ソート、 関数はresult setを返す

@features_1050_li
暗号化されたデータベース (AES または XTEA), SHA-256 パスワード暗号化、暗号化関数、SSL

@features_1051_h3
SQLサポート

@features_1052_li
複数のスキーマ、インフォメーションスキーマをサポート

@features_1053_li
参照整合性 / カスケードでの外部キー制約、チェック制約

@features_1054_li
内部結合と外部結合、サブクエリー、読み取り専用ビューとインラインビュー

@features_1055_li
トリガーと Java関数 / ストアドプロシージャ

@features_1056_li
多数の組み込み関数、XMLとlossless data compression (可逆圧縮) を含む

@features_1057_li
大きなオブジェクト (BLOB/CLOB) とArrayを含む、広い範囲のデータ型

@features_1058_li
シーケンスとautoincrement column、computed column、(関数ベースのインデックスに使用できます)

@features_1059_li
ORDER BY, GROUP BY, HAVING, UNION, LIMIT, TOP

@features_1060_li
Collationをサポート、users、roles

@features_1061_li
#Compatibility modes for IBM DB2, Apache Derby, HSQLDB, MS SQL Server, MySQL, Oracle, and PostgreSQL.

@features_1062_h3
セキュリティの特徴

@features_1063_li
SQLインジェクション問題の解決を含む

@features_1064_li
#User password authentication uses SHA-256 and salt

@features_1065_li
#For server mode connections, user passwords are never transmitted in plain text over the network (even when using insecure connections; this only applies to the TCP server and not to the H2 Console however; it also doesn't apply if you set the password in the database URL)

@features_1066_li
AES-256とXTEA暗号化アルゴリズムを使用することで、全てのデータベースファイル (データのバックアップを取るのに使用できるスクリプトファイルを含む) を暗号化できる

@features_1067_li
リモートJDBCドライバは、SSL/TLS上のTCP/IP接続をサポート

@features_1068_li
組み込みwebサーバーは、SSL/TLS上の接続をサポート

@features_1069_li
Stringの代わりにchar arrayを使うことで、パスワードをデータベースに送信可能

@features_1070_h3
他の特徴とツール

@features_1071_li
省スペース (1MBより小さい)、少ないメモリが必要条件

@features_1072_li
#Multiple index types (b-tree, tree, hash)

@features_1073_li
多次元のインデックスをサポート

@features_1074_li
CSV (comma separated values) ファイルサポート

@features_1075_li
リンクテーブルと組み込み仮想 "range" テーブルのサポート

@features_1076_li
EXPLAIN PLANをサポート、 洗練されたトレースオプション

@features_1077_li
パフォーマンスを向上させるために、データベースの終了を遅らせるか割り込みを抑制する

@features_1078_li
#Web-based Console application (translated to many languages) with autocomplete

@features_1079_li
データベースはSQLスクリプトファイルを生成

@features_1080_li
#Contains a recovery tool that can dump the contents of the database

@features_1081_li
#Support for variables (for example to calculate running totals)

@features_1082_li
prepared statementの自動再編集

@features_1083_li
#Uses a small number of database files

@features_1084_li
各レコードのためのチェックサムと、データ整合性のためのログエントリーを使用

@features_1085_li
十分なテスト済み (高いコードカバー率、ランダムストレステスト)

@features_1086_h2
他のデータベースエンジンと比較する

@features_1087_th
特徴

@features_1088_th
H2

@features_1089_a
Derby

@features_1090_a
HSQLDB

@features_1091_a
MySQL

@features_1092_a
PostgreSQL

@features_1093_td
Pure Java

@features_1094_td
対応

@features_1095_td
対応

@features_1096_td
対応

@features_1097_td
非対応

@features_1098_td
非対応

@features_1099_td
エンベッドモード (Java)

@features_1100_td
対応

@features_1101_td
対応

@features_1102_td
対応

@features_1103_td
非対応

@features_1104_td
非対応

@features_1105_td
パフォーマンス (エンベッド)

@features_1106_td
速い

@features_1107_td
遅い

@features_1108_td
速い

@features_1109_td
該当なし

@features_1110_td
該当なし

@features_1111_td
#In-Memory Mode

@features_1112_td
対応

@features_1113_td
非対応

@features_1114_td
対応

@features_1115_td
非対応

@features_1116_td
非対応

@features_1117_td
トランザクション分離

@features_1118_td
対応

@features_1119_td
対応

@features_1120_td
非対応

@features_1121_td
対応

@features_1122_td
対応

@features_1123_td
コストベースオプティマイザ

@features_1124_td
対応

@features_1125_td
対応

@features_1126_td
非対応

@features_1127_td
対応

@features_1128_td
対応

@features_1129_td
#Explain Plan

@features_1130_td
対応

@features_1131_td
非対応

@features_1132_td
対応

@features_1133_td
対応

@features_1134_td
対応

@features_1135_td
クラスタリング

@features_1136_td
対応

@features_1137_td
非対応

@features_1138_td
非対応

@features_1139_td
対応

@features_1140_td
対応

@features_1141_td
暗号化データベース

@features_1142_td
対応

@features_1143_td
対応

@features_1144_td
非対応

@features_1145_td
非対応

@features_1146_td
非対応

@features_1147_td
リンクテーブル

@features_1148_td
対応

@features_1149_td
非対応

@features_1150_td
#Partially *1

@features_1151_td
#Partially *2

@features_1152_td
非対応

@features_1153_td
ODBCドライバ

@features_1154_td
対応

@features_1155_td
非対応

@features_1156_td
非対応

@features_1157_td
対応

@features_1158_td
対応

@features_1159_td
フルテキストサーチ

@features_1160_td
対応

@features_1161_td
非対応

@features_1162_td
非対応

@features_1163_td
対応

@features_1164_td
対応

@features_1165_td
#User-Defined Datatypes

@features_1166_td
対応

@features_1167_td
非対応

@features_1168_td
非対応

@features_1169_td
対応

@features_1170_td
対応

@features_1171_td
データベースごとのファイル

@features_1172_td
少

@features_1173_td
多

@features_1174_td
少

@features_1175_td
多

@features_1176_td
多

@features_1177_td
テーブルレベルロック

@features_1178_td
対応

@features_1179_td
対応

@features_1180_td
非対応

@features_1181_td
対応

@features_1182_td
対応

@features_1183_td
#Row Level Locking

@features_1184_td
#Yes *9

@features_1185_td
対応

@features_1186_td
非対応

@features_1187_td
対応

@features_1188_td
対応

@features_1189_td
#Multi Version Concurrency

@features_1190_td
対応

@features_1191_td
非対応

@features_1192_td
非対応

@features_1193_td
非対応

@features_1194_td
対応

@features_1195_td
#Role Based Security

@features_1196_td
対応

@features_1197_td
#Yes *3

@features_1198_td
対応

@features_1199_td
対応

@features_1200_td
対応

@features_1201_td
#Updatable Result Sets

@features_1202_td
対応

@features_1203_td
#Yes *7

@features_1204_td
非対応

@features_1205_td
対応

@features_1206_td
対応

@features_1207_td
#Sequences

@features_1208_td
対応

@features_1209_td
非対応

@features_1210_td
対応

@features_1211_td
非対応

@features_1212_td
対応

@features_1213_td
#Limit and Offset

@features_1214_td
対応

@features_1215_td
非対応

@features_1216_td
対応

@features_1217_td
対応

@features_1218_td
対応

@features_1219_td
#Temporary Tables

@features_1220_td
対応

@features_1221_td
#Yes *4

@features_1222_td
対応

@features_1223_td
対応

@features_1224_td
対応

@features_1225_td
#Information Schema

@features_1226_td
対応

@features_1227_td
#No *8

@features_1228_td
#No *8

@features_1229_td
対応

@features_1230_td
対応

@features_1231_td
#Computed Columns

@features_1232_td
対応

@features_1233_td
非対応

@features_1234_td
非対応

@features_1235_td
非対応

@features_1236_td
#Yes *6

@features_1237_td
#Case Insensitive Columns

@features_1238_td
対応

@features_1239_td
非対応

@features_1240_td
対応

@features_1241_td
対応

@features_1242_td
#Yes *6

@features_1243_td
#Custom Aggregate Functions

@features_1244_td
対応

@features_1245_td
非対応

@features_1246_td
非対応

@features_1247_td
対応

@features_1248_td
対応

@features_1249_td
フットプリント (jar/dll size)

@features_1250_td
#~1 MB *5

@features_1251_td
#~2 MB

@features_1252_td
#~700 KB

@features_1253_td
#~4 MB

@features_1254_td
#~6 MB

@features_1255_p
#*1 HSQLDB supports text tables.

@features_1256_p
#*2 MySQL supports linked MySQL tables under the name 'federated tables'.

@features_1257_p
#*3 Derby support for roles based security and password checking as an option.

@features_1258_p
#*4 Derby only supports global temporary tables.

@features_1259_p
#*5 The default H2 jar file contains debug information, jar files for other databases do not.

@features_1260_p
#*6 PostgreSQL supports functional indexes.

@features_1261_p
#*7 Derby only supports updatable result sets if the query is not sorted.

@features_1262_p
#*8 Derby and HSQLDB don't support standard compliant information schema tables.

@features_1263_p
#*9 H2 supports row level locks when using multi version concurrency.

@features_1264_h3
DerbyとHSQLDB

@features_1265_p
#After an unexpected process termination (for example power failure), H2 can recover safely and automatically without any user interaction. For Derby and HSQLDB, some manual steps are required ('Another instance of Derby may have already booted the database' / 'The database is already in use by another process').

@features_1266_h3
DaffodilDbとOne$Db

@features_1267_p
このデータベースの開発は止まっているようです。最後のリリースは2006年2月でした。

@features_1268_h3
McKoi

@features_1269_p
このデータベースの開発は止まっているようです。最後のリリースは2004年8月でした。

@features_1270_h2
#H2 in Use

@features_1271_p
#For a list of applications that work with or use H2, see: <a href="links.html">Links</a> .

@features_1272_h2
接続モード

@features_1273_p
以下の接続モードがサポートされています:

@features_1274_li
#Embedded mode (local connections using JDBC)

@features_1275_li
#Server mode (remote connections using JDBC or ODBC over TCP/IP)

@features_1276_li
#Mixed mode (local and remote connections at the same time)

@features_1277_h3
エンベッドモード

@features_1278_p
#In embedded mode, an application opens a database from within the same JVM using JDBC. This is the fastest and easiest connection mode. The disadvantage is that a database may only be open in one virtual machine (and class loader) at any time. As in all modes, both persistent and in-memory databases are supported. There is no limit on the number of database open concurrently, or on the number of open connections.

@features_1279_h3
サーバーモード

@features_1280_p
#When using the server mode (sometimes called remote mode or client/server mode), an application opens a database remotely using the JDBC or ODBC API. A server needs to be started within the same or another virtual machine, or on another computer. Many applications can connect to the same database at the same time. The server mode is slower than the embedded mode, because all data is transferred over TCP/IP. As in all modes, both persistent and in-memory databases are supported. There is no limit on the number of database open concurrently, or on the number of open connections.

@features_1281_h3
#Mixed Mode

@features_1282_p
#The mixed mode is a combination of the embedded and the server mode. The first application that connects to a database does that in embedded mode, but also starts a server so that other applications (running in different processes or virtual machines) can concurrently access the same data. The local connections are as fast as if the database is used in just the embedded mode, while the remote connections are a bit slower.

@features_1283_p
#The server can be started and stopped from within the application (using the server API), or automatically (automatic mixed mode). When using the <a href="#auto_mixed_mode">automatic mixed mode</a> , all clients that want to connect to the database (no matter if it's an local or remote connection) can do so using the exact same database URL.

@features_1284_h2
データベースURL概要

@features_1285_p
#This database supports multiple connection modes and connection settings. This is achieved using different database URLs. Settings in the URLs are not case sensitive.

@features_1286_th
トピック

@features_1287_th
URLフォーマットと例

@features_1288_a
エンベッド (ローカル) 接続

@features_1289_td
jdbc:h2:[file:][&lt;path&gt;]&lt;databaseName&gt;

@features_1290_td
jdbc:h2:~/test

@features_1291_td
jdbc:h2:file:/data/sample

@features_1292_td
jdbc:h2:file:C:/data/sample (Windowsのみ)

@features_1293_a
#In-memory (private)

@features_1294_td
jdbc:h2:mem:

@features_1295_a
#In-memory (named)

@features_1296_td
jdbc:h2:mem:&lt;databaseName&gt;

@features_1297_td
jdbc:h2:mem:test_mem

@features_1298_a
#Server mode (remote connections)

@features_1299_a
#using TCP/IP

@features_1300_td
#jdbc:h2:tcp://&lt;server&gt;[:&lt;port&gt;]/[&lt;path&gt;]&lt;databaseName&gt;

@features_1301_td
#jdbc:h2:tcp://localhost/~/test

@features_1302_td
#jdbc:h2:tcp://dbserv:8084/~/sample

@features_1303_a
#Server mode (remote connections)

@features_1304_a
#using SSL/TLS

@features_1305_td
jdbc:h2:ssl://&lt;server&gt;[:&lt;port&gt;]/&lt;databaseName&gt;

@features_1306_td
#jdbc:h2:ssl://secureserv:8085/~/sample;

@features_1307_a
#Using encrypted files

@features_1308_td
jdbc:h2:&lt;url&gt;;CIPHER=[AES|XTEA]

@features_1309_td
#jdbc:h2:ssl://secureserv/~/testdb;CIPHER=AES

@features_1310_td
jdbc:h2:file:~/secure;CIPHER=XTEA

@features_1311_a
#File locking methods

@features_1312_td
jdbc:h2:&lt;url&gt;;FILE_LOCK={NO|FILE|SOCKET}

@features_1313_td
jdbc:h2:file:~/quickAndDirty;FILE_LOCK=NO

@features_1314_td
jdbc:h2:file:~/private;CIPHER=XTEA;FILE_LOCK=SOCKET

@features_1315_a
#Only open if it already exists

@features_1316_td
jdbc:h2:&lt;url&gt;;IFEXISTS=TRUE

@features_1317_td
jdbc:h2:file:~/sample;IFEXISTS=TRUE

@features_1318_a
#Don't close the database when the VM exits

@features_1319_td
jdbc:h2:&lt;url&gt;;DB_CLOSE_ON_EXIT=FALSE

@features_1320_a
#User name and/or password

@features_1321_td
jdbc:h2:&lt;url&gt;[;USER=&lt;username&gt;][;PASSWORD=&lt;value&gt;]

@features_1322_td
jdbc:h2:file:~/sample;USER=sa;PASSWORD=123

@features_1323_a
#Log index changes

@features_1324_td
jdbc:h2:&lt;url&gt;;LOG=2

@features_1325_td
jdbc:h2:file:~/sample;LOG=2

@features_1326_a
#Debug trace settings

@features_1327_td
jdbc:h2:&lt;url&gt;;TRACE_LEVEL_FILE=&lt;level 0..3&gt;

@features_1328_td
jdbc:h2:file:~/sample;TRACE_LEVEL_FILE=3

@features_1329_a
#Ignore unknown settings

@features_1330_td
jdbc:h2:&lt;url&gt;;IGNORE_UNKNOWN_SETTINGS=TRUE

@features_1331_a
#Custom file access mode

@features_1332_td
jdbc:h2:&lt;url&gt;;ACCESS_MODE_LOG=rws;ACCESS_MODE_DATA=rws

@features_1333_a
#Database in a zip file

@features_1334_td
#jdbc:h2:zip:&lt;zipFileName&gt;!/&lt;databaseName&gt;

@features_1335_td
#jdbc:h2:zip:~/db.zip!/test

@features_1336_a
#Compatibility mode

@features_1337_td
#jdbc:h2:&lt;url&gt;;MODE=&lt;databaseType&gt;

@features_1338_td
#jdbc:h2:~/test;MODE=MYSQL

@features_1339_a
#Auto-reconnect

@features_1340_td
#jdbc:h2:&lt;url&gt;;AUTO_RECONNECT=TRUE

@features_1341_td
#jdbc:h2:tcp://localhost/~/test;AUTO_RECONNECT=TRUE

@features_1342_a
#Automatic mixed mode

@features_1343_td
#jdbc:h2:&lt;url&gt;;AUTO_SERVER=TRUE

@features_1344_td
#jdbc:h2:~/test;AUTO_SERVER=TRUE

@features_1345_a
#Changing other settings

@features_1346_td
jdbc:h2:&lt;url&gt;;&lt;setting&gt;=&lt;value&gt;[;&lt;setting&gt;=&lt;value&gt;...]

@features_1347_td
jdbc:h2:file:~/sample;TRACE_LEVEL_SYSTEM_OUT=3

@features_1348_h2
エンベッド (ローカル) データベースに接続

@features_1349_p
#The database URL for connecting to a local database is <code>jdbc:h2:[file:][&lt;path&gt;]&lt;databaseName&gt;</code> . The prefix <code>file:</code> is optional. If no or only a relative path is used, then the current working directory is used as a starting point. The case sensitivity of the path and database name depend on the operating system, however it is recommended to use lowercase letters only. The database name must be at least three characters long (a limitation of File.createTempFile). To point to the user home directory, use ~/, as in: jdbc:h2:~/test.

@features_1350_h2
メモリオンリーデータベース

@features_1351_p
#For certain use cases (for example: rapid prototyping, testing, high performance operations, read-only databases), it may not be required to persist data, or persist changes to the data. This database supports the memory-only mode, where the data is not persisted.

@features_1352_p
一部ケースでは、メモリオンリーデータベースへの接続はひとつの接続のみ必要とされます。これは、開かれるデータベースがプライベートだということを意味しています。このケースでは、データベースURLは <CODE>jdbc:h2:mem:</CODE> です。同じ仮想マシン内で二つの接続が開いているというのは、二つの異なった (プライベートの) データベースが開いているという意味です。

@features_1353_p
時々、複数の接続が同じメモリオンリーデータベースを必要とします。このケースでは、データベースのURLに名前が含まれていなければなりません。例: <code>jdbc:h2:mem:db1</code> この方法での同じデータベースのアクセスは、同じ仮想マシンとClassLoader環境内でのみ動作します。

@features_1354_p
#It is also possible to access a memory-only database remotely (or from multiple processes in the same machine) using TCP/IP or SSL/TLS. An example database URL is: <code>jdbc:h2:tcp://localhost/mem:db1</code> .

@features_1355_p
#By default, closing the last connection to a database closes the database. For an in-memory database, this means the content is lost. To keep the database open, add ;DB_CLOSE_DELAY=-1 to the database URL. To keep the content of an in-memory database as long as the virtual machine is alive, use <code>jdbc:h2:mem:test;DB_CLOSE_DELAY=-1</code> .

@features_1356_h2
#Database Files Encryption

@features_1357_p
#The database files can be encrypted. Two encryption algorithms are supported: AES and XTEA. To use file encryption, you need to specify the encryption algorithm (the 'cipher') and the file password (in addition to the user password) when connecting to the database.

@features_1358_h3
#Creating a New Database with File Encryption

@features_1359_p
#By default, a new database is automatically created if it does not exist yet. To create an encrypted database, connect to it as it would already exist.

@features_1360_h3
#Connecting to an Encrypted Database

@features_1361_p
#The encryption algorithm is set in the database URL, and the file password is specified in the password field, before the user password. A single space separates the file password and the user password; the file password itself may not contain spaces. File passwords and user passwords are case sensitive. Here is an example to connect to a password-encrypted database:

@features_1362_h3
#Encrypting or Decrypting a Database

@features_1363_p
#To encrypt an existing database, use the ChangeFileEncryption tool. This tool can also decrypt an encrypted database, or change the file encryption key. The tool is available from within the H2 Console in the Tools section, or you can run it from the command line. The following command line will encrypt the database 'test' in the user home directory with the file password 'filepwd' and the encryption algorithm AES:

@features_1364_h2
データベースファイルロック

@features_1365_p
データベースが開かれるときはいつも、データベースが使用中であると他のプロセスに合図するためにロックファイルが作成されます。もしデータベースが閉じられるか、データベースを開いたプロセスが終了するなら、ロックファイルは削除されます。

@features_1366_p
以下のファイルロックメソッドが提供されます:

@features_1367_li
デフォルトメソッドは "file" で、データベースファイルを保護するために、watchdogスレッドを使用します。watchdogは、ロックファイルをそれぞれ秒単位で読み込みます。

@features_1368_li
#The second method is 'socket' and opens a server socket. The socket method does not require reading the lock file every second. The socket method should only be used if the database files are only accessed by one (and always the same) computer.

@features_1369_li
ファイルロッキングなしでデータベースを開始することも可能です; このケースでは、データベースファイルを保護するのはアプリケーション次第です。

@features_1370_p
異なったファイルロックメソッドでデータベースを開くには、"FILE_LOCK" パラメータを使用します。以下のコードは "socket" ロックメソッドのデータベースを開きます:

@features_1371_p
以下のコードは、データベースにロックファイルを全く作らないよう強要させます。これは、データ破損を導く可能性のある、同じデータベースを開くことができる他のプロセスのように、安全ではないということに注意して下さい:

@features_1372_p
#For more information about the algorithms, see <a href="advanced.html#file_locking_protocols">Advanced / File Locking Protocols</a> .

@features_1373_h2
すでに存在する場合のみ、データベースを開く

@features_1374_p
#By default, when an application calls <code>DriverManager.getConnection(url, ...)</code> and the database specified in the URL does not yet exist, a new (empty) database is created. In some situations, it is better to restrict creating new databases, and only allow to open existing databases. To do this, add <code>;ifexists=true</code> to the database URL. In this case, if the database does not already exist, an exception is thrown when trying to connect. The connection only succeeds when the database already exists. The complete URL may look like this:

@features_1375_h2
#Closing a Database

@features_1376_h3
データベースの遅延終了

@features_1377_p
#Usually, a database is closed when the last connection to it is closed. In some situations this slows down the application, for example when it is not possible to keep at least one connection open. The automatic closing of a database can be delayed or disabled with the SQL statement SET DB_CLOSE_DELAY &lt;seconds&gt;. The parameter &lt;seconds&gt; specifies the number of seconds to keep a database open after the last connection to it was closed. The following statement will keep a database open for 10 seconds after the last connection was closed:

@features_1378_p
#The value -1 means the database is not closed automatically. The value 0 is the default and means the database is closed when the last connection is closed. This setting is persistent and can be set by an administrator only. It is possible to set the value in the database URL: <code>jdbc:h2:~/test;DB_CLOSE_DELAY=10</code> .

@features_1379_h3
#Don't Close a Database when the VM Exits

@features_1380_p
#By default, a database is closed when the last connection is closed. However, if it is never closed, the database is closed when the virtual machine exits normally, using a shutdown hook. In some situations, the database should not be closed in this case, for example because the database is still used at virtual machine shutdown (to store the shutdown process in the database for example). For those cases, the automatic closing of the database can be disabled in the database URL. The first connection (the one that is opening the database) needs to set the option in the database URL (it is not possible to change the setting afterwards). The database URL to disable database closing on exit is:

@features_1381_h2
ログインデックスの修正

@features_1382_p
#Usually, changes to the index file are not logged for performance. If the index file is corrupt or missing when opening a database, it is re-created from the data. The index file can get corrupt when the database is not shut down correctly, because of power failure or abnormal program termination. In some situations, for example when using very large databases (over a few hundred MB), re-creating the index file takes very long. In these situations it may be better to log changes to the index file, so that recovery from a corrupted index file is fast. To enable log index changes, add LOG=2 to the URL, as in <code>jdbc:h2:~/test;LOG=2</code> . This setting should be specified when connecting. The update performance of the database will be reduced when using this option.

@features_1383_h2
未知の設定を無視

@features_1384_p
データベースに接続する時、いくつかのアプリケーションが (例えば、OpenOffice.org Base) いくつかの追加パラメータを渡します。なぜそれらのパラメータが渡されるのかは知られていません。PREFERDOSLIKELINEENDS と IGNOREDRIVERPRIVILEGES はパラメータの例で、それらは、OpenOffice.orgとの互換性を改良するために単に無視されます。もしデータベースに接続する時、アプリケーションが他のパラメータを渡していたら、通常データベースは、 パラメータはサポートされていません、という例外を投げます。データベースURLに ;IGNORE_UNKNOWN_SETTINGS=TRUE を追加することで、このようなパラメータを無視することが可能です。

@features_1385_h2
接続が開始された時に他の設定を変更する

@features_1386_p
#In addition to the settings already described, other database settings can be passed in the database URL. Adding <code>;setting=value</code> at the end of a database URL is the same as executing the statement <code>SET setting value</code> just after connecting. For a list of supported settings, see <a href="grammar.html">SQL Grammar</a> .

@features_1387_h2
カスタムファイル アクセスモード

@features_1388_p
#Usually, the database opens log, data and index files with the access mode 'rw', meaning read-write (except for read only databases, where the mode 'r' is used). To open a database in read-only mode if the files are not read-only, use ACCESS_MODE_DATA=r. Also supported are 'rws' and 'rwd'. The access mode used for log files is set via ACCESS_MODE_LOG; for data and index files use ACCESS_MODE_DATA. These settings must be specified in the database URL:

@features_1389_p
詳細は <a href="advanced.html#durability_problems">永続性問題</a> をご覧下さい。 多くのオペレーティングシステムでは、アクセスモード "rws" において、データがディスクに書かれていることを保証しません。

@features_1390_h2
複数の接続

@features_1391_h3
同時に複数のデータベースを開く

@features_1392_p
アプリケーションは、同じデータベースへの複数の接続を含め、複数のデータベースを同時に開くことができます。開くデータベースの数は、利用可能なメモリによってのみ制限されています。

@features_1393_h3
>同じデータベースへの複数の接続: クライアント/サーバー

@features_1394_p
異なったプロセス、またはコンピューターから同時に同じデータベースにアクセスしたい場合、クライアント/サーバー モードを使用することが必要です。このケースでは、ひとつのプロセスがサーバーとして動作し、他のプロセスは (同様に他のコンピューターに属することができます) TCP/IP (または改善されたセキュリティ用のTCP/IPの上のSSL/TLS) を通してサーバーに接続します。

@features_1395_h3
マルチスレッドサポート

@features_1396_p
#This database is multithreading-safe. That means, if an application is multi-threaded, it does not need to worry about synchronizing access to the database. Internally, most requests to the same database are synchronized. That means an application can use multiple threads that access the same database at the same time, however if one thread executes a long running query, the other threads need to wait.

@features_1397_h3
ロック、ロックタイムアウト、デッドロック

@features_1398_p
#The database uses table level locks to give each connection a consistent state of the data. There are two kinds of locks: read locks (shared locks) and write locks (exclusive locks). All locks are released when the transaction commits or rolls back. When using the default transaction isolation level 'read committed', read locks are already released after each statement.

@features_1399_p
#If a connection wants to reads from a table, and there is no write lock on the table, then a read lock is added to the table. If there is a write lock, then this connection waits for the other connection to release the lock. If a connection cannot get a lock for a specified time, then a lock timeout exception is thrown.

@features_1400_p
#Usually, SELECT statements will generate read locks. This includes subqueries. Statements that modify data use write locks. It is also possible to lock a table exclusively without modifying data, using the statement SELECT ... FOR UPDATE. The statements COMMIT and ROLLBACK releases all open locks. The commands SAVEPOINT and ROLLBACK TO SAVEPOINT don't affect locks. The locks are also released when the autocommit mode changes, and for connections with autocommit set to true (this is the default), locks are released after each statement. The following statements generate locks:

@features_1401_th
ロックの種類

@features_1402_th
SQLステートメント

@features_1403_td
Read

@features_1404_td
#SELECT * FROM TEST;

@features_1405_td
#CALL SELECT MAX(ID) FROM TEST;

@features_1406_td
#SCRIPT;

@features_1407_td
Write

@features_1408_td
#SELECT * FROM TEST WHERE 1=0 FOR UPDATE;

@features_1409_td
Write

@features_1410_td
#INSERT INTO TEST VALUES(1, 'Hello');

@features_1411_td
#INSERT INTO TEST SELECT * FROM TEST;

@features_1412_td
#UPDATE TEST SET NAME='Hi';

@features_1413_td
#DELETE FROM TEST;

@features_1414_td
Write

@features_1415_td
#ALTER TABLE TEST ...;

@features_1416_td
#CREATE INDEX ... ON TEST ...;

@features_1417_td
#DROP INDEX ...;

@features_1418_p
SQLコマンド SET LOCK_TIMEOUT &lt;milliseconds&gt; を使用して、ロックタイムアウトの例外が投げられるまでの秒数を、それぞれの接続ごとに別々に設定することができます。SQLコマンド SET DEFAULT_LOCK_TIMEOUT &lt;milliseconds&gt; を使用して、初期のロックタイムアウト (新しい接続に使用されるタイムアウト) を設定することができます。デフォルトのロックタイムアウトは永続的です。

@features_1419_h2
データベースファイルレイアウト

@features_1420_p
#There are a number of files created for persistent databases. Unlike some other databases, not every table and/or index is stored in its own file. Instead, usually only the following files are created: a data file, an index file, a log file, and a database lock file (exists only while the database is in use). In addition to that, a file is created for each large object (CLOB/BLOB) larger than a certain size, and temporary files for large result sets. If the database trace option is enabled, trace files are created. The following files can be created by the database:

@features_1421_th
ファイル名

@features_1422_th
説明

@features_1423_th
ファイル数

@features_1424_td
test.data.db

@features_1425_td
#Data file.

@features_1426_td
#Contains the data for all tables.

@features_1427_td
フォーマット: &lt;database&gt;.data.db

@features_1428_td
データベースごとに1ファイル

@features_1429_td
test.index.db

@features_1430_td
#Index file.

@features_1431_td
#Contains the data for all (b tree) indexes.

@features_1432_td
フォーマット: &lt;database&gt;.index.db

@features_1433_td
データベースごとに1ファイル

@features_1434_td
test.0.log.db

@features_1435_td
#Transaction log file.

@features_1436_td
#The transaction log is used for recovery.

@features_1437_td
フォーマット: &lt;database&gt;.&lt;id&gt;.log.db

@features_1438_td
データベースごとに0ファイル以上

@features_1439_td
test.lock.db

@features_1440_td
#Database lock file.

@features_1441_td
#Exists only while the database is open.

@features_1442_td
フォーマット: &lt;database&gt;.lock.db

@features_1443_td
データベースごとに1ファイル

@features_1444_td
test.trace.db

@features_1445_td
#Trace file.

@features_1446_td
#Contains trace information.

@features_1447_td
フォーマット: &lt;database&gt;.trace.db

@features_1448_td
ファイルが大きすぎる場合、&lt;database&gt;.trace.db.old に改名される

@features_1449_td
データベースごとに1ファイル

@features_1450_td
#test.lobs.db/1.t15.lob.db

@features_1451_td
#Large object.

@features_1452_td
#Contains the data for BLOB or CLOB values.

@features_1453_td
#Format: &lt;id&gt;.t&lt;tableId&gt;.lob.db

@features_1454_td
#1 per value

@features_1455_td
test.123.temp.db

@features_1456_td
#Temporary file.

@features_1457_td
#Contains a temporary blob or a large result set.

@features_1458_td
#Format: &lt;database&gt;.&lt;id&gt;.temp.db

@features_1459_td
オブジェクトごとに1ファイル

@features_1460_h3
データベースファイルの移動と改名

@features_1461_p
#Database name and location are not stored inside the database files.

@features_1462_p
データベースが閉じられている間、ファイルは他のディレクトリに移動することができ、同様にファイル名を変えることもできます (全てのファイルが同じ名前で始まる必要があります)。

@features_1463_p
ファイルにはプラットホーム固有のデータがないので、問題なく他のオペレーティングシステムに移動することができます。

@features_1464_h3
バックアップ

@features_1465_p
データベースが閉じられている時、データベースファイルのバックアップをとることが可能です。インデックスファイルはバックアップをとる必要はありません。なぜなら、インデックスファイルは冗長なデータを含み、もしファイルが存在しなければ自動的に再作成されるからです。

@features_1466_p
データベースが動作している間にバックアップデータをとるために、SQLコマンド SCRIPTを使うことができます。

@features_1467_h2
ログとリカバリー

@features_1468_p
データベースでデータが修正され、それらの変更がコミットされた時はいつでも、変更はディスクに記録されます (インメモリオブジェクトを除いて)。データファイル自体への変更は通常、ディスクアクセスを最適化するために後で書かれています。もし電源異常があった場合、データファイルとインデックスファイルはアップデートされません。しかし、変更がログファイルに書かれていれば、次回データベースを開いた時に、ログファイルに書かれた変更は自動的に再び適用されます。

@features_1469_p
インデックスファイルのアップデートはデフォルトでは記録されないことに注意して下さい。もしデータベースが開かれて、リカバリーが必要だとされたら、インデックスファイルは最初から作り替えられます。

@features_1470_p
通常、データベースごとにたったひとつのログファイルがあります。このファイルは、データベースが正常に終了されるまで増大し、削除されます。また、ファイルが大きくなりすぎたら、データベースは別のログファイルに交換します (より大きなIDで)。CHECKPOINT コマンドを使用することによって、ログの切り替えを強制することが可能です。

@features_1471_p
checksumのレコードが合わないために (例えば、別のアプリケーションからファイルが編集された場合) データベースファイルが破損したら、データベースをリカバリーモードで開くことができます。このケースでは、データベースのエラーは記録されますが、投げられません。データベースはスクリプトまでバックアップをとり、可能な限り早く再構築します。データベースをリカバリーモードで開くために、jdbc:h2:~/test;RECOVER=1 のように、RECOVER=1 を含むデータベースURLを使用します。この場合、インデックスは再構築され、サマリー (アロケーションテーブルのオブジェクト)は読まれないため、データベースを開くのに時間がかかります。

@features_1472_h2
互換性

@features_1473_p
#All database engines behave a little bit different. Where possible, H2 supports the ANSI SQL standard, and tries to be compatible to other databases. There are still a few differences however:

@features_1474_p
#In MySQL text columns are case insensitive by default, while in H2 they are case sensitive. However H2 supports case insensitive columns as well. To create the tables with case insensitive texts, append IGNORECASE=TRUE to the database URL (example: <code>jdbc:h2:~/test;IGNORECASE=TRUE</code> ).

@features_1475_h3
互換モード

@features_1476_p
#For certain features, this database can emulate the behavior of specific databases. Not all features or differences of those databases are implemented. Here is the list of currently supported modes and the differences to the regular mode:

@features_1477_h3
#DB2 Compatibility Mode

@features_1478_p
#To use the IBM DB2 mode, use the database URL <code>jdbc:h2:~/test;MODE=DB2</code> or the SQL statement <code>SET MODE DB2</code> .

@features_1479_li
#For aliased columns, ResultSetMetaData.getColumnName() returns the alias name  and getTableName() returns null.

@features_1480_li
#Support for the syntax [OFFSET .. ROW] [FETCH ... ONLY]  as an alternative for LIMIT .. OFFSET.

@features_1481_h3
#Derby Compatibility Mode

@features_1482_p
#To use the Apache Derby mode, use the database URL <code>jdbc:h2:~/test;MODE=Derby</code> or the SQL statement <code>SET MODE Derby</code> .

@features_1483_li
#For aliased columns, ResultSetMetaData.getColumnName() returns the alias name  and getTableName() returns null.

@features_1484_li
#For unique indexes, NULL is distinct. That means only one row with NULL  in one of the columns is allowed.

@features_1485_h3
#HSQLDB Compatibility Mode

@features_1486_p
#To use the HSQLDB mode, use the database URL <code>jdbc:h2:~/test;MODE=HSQLDB</code> or the SQL statement <code>SET MODE HSQLDB</code> .

@features_1487_li
#For aliased columns, ResultSetMetaData.getColumnName() returns the alias name  and getTableName() returns null.

@features_1488_li
#When converting the scale of decimal data, the number is only converted if the new scale is  smaller than the current scale. Usually, the scale is converted and 0s are added if required.

@features_1489_li
#Concatenation with NULL results in NULL. Usually, NULL is treated as an empty  string if only one of the operands is NULL, and NULL is only returned if both operands are NULL.

@features_1490_li
#For unique indexes, NULL is distinct. That means only one row with NULL  in one of the columns is allowed.

@features_1491_h3
#MS SQL Server Compatibility Mode

@features_1492_p
#To use the MS SQL Server mode, use the database URL <code>jdbc:h2:~/test;MODE=MSSQLServer</code> or the SQL statement <code>SET MODE MSSQLServer</code> .

@features_1493_li
#For aliased columns, ResultSetMetaData.getColumnName() returns the alias name  and getTableName() returns null.

@features_1494_li
#Identifiers may be quoted using square brackets as in [Test].

@features_1495_li
#For unique indexes, NULL is distinct. That means only one row with NULL  in one of the columns is allowed.

@features_1496_h3
#MySQL Compatibility Mode

@features_1497_p
#To use the MySQL mode, use the database URL <code>jdbc:h2:~/test;MODE=MySQL</code> or the SQL statement <code>SET MODE MySQL</code> .

@features_1498_li
#When inserting data, if a column is defined to be NOT NULL and NULL is inserted,  then a 0 (or empty string, or the current timestamp for timestamp columns) value is used.  Usually, this operation is not allowed and an exception is thrown.

@features_1499_li
#Creating indexes in the CREATE TABLE statement is allowed.

@features_1500_li
#Meta data calls return identifiers in lower case.

@features_1501_li
#When converting a floating point number to an integer, the fractional  digits are not truncated, but the value is rounded.

@features_1502_h3
#Oracle Compatibility Mode

@features_1503_p
#To use the Oracle mode, use the database URL <code>jdbc:h2:~/test;MODE=Oracle</code> or the SQL statement <code>SET MODE Oracle</code> .

@features_1504_li
#For aliased columns, ResultSetMetaData.getColumnName() returns the alias name  and getTableName() returns null.

@features_1505_li
#When using unique indexes, multiple rows with NULL in all columns  are allowed, however it is not allowed to have multiple rows with the  same values otherwise.

@features_1506_h3
#PostgreSQL Compatibility Mode

@features_1507_p
#To use the PostgreSQL mode, use the database URL <code>jdbc:h2:~/test;MODE=PostgreSQL</code> or the SQL statement <code>SET MODE PostgreSQL</code> .

@features_1508_li
#For aliased columns, ResultSetMetaData.getColumnName() returns the alias name  and getTableName() returns null.

@features_1509_li
#Concatenation with NULL results in NULL. Usually, NULL is treated as an empty  string if only one of the operands is NULL, and NULL is only returned if both operands are NULL.

@features_1510_li
#When converting a floating point number to an integer, the fractional  digits are not be truncated, but the value is rounded.

@features_1511_li
#The system columns 'CTID' and 'OID' are supported.

@features_1512_h2
#Auto-Reconnect

@features_1513_p
#The auto-reconnect feature causes the JDBC driver to reconnect to the database if the connection is lost. The automatic re-connect only occurs when auto-commit is enabled; if auto-commit is disabled, an exception is thrown.

@features_1514_p
#Re-connecting will open a new session. After an automatic re-connect, variables and local temporary tables definitions (excluding data) are re-created. The contents of the system table INFORMATION_SCHEMA.SESSION_STATE contains all client side state that is re-created.

@features_1515_h2
#Automatic Mixed Mode

@features_1516_p
#Multiple processes can access the same database without having to start the server manually. To do that, append <code>;AUTO_SERVER=TRUE</code> to the database URL. You can use the same database URL no matter if the database is already open or not.

@features_1517_p
#When using this mode, the first connection to the database is made in embedded mode, and additionally a server is started internally. If the database is already open in another process, the server mode is used automatically.

@features_1518_p
#The application that opens the first connection to the database uses the embedded mode, which is faster than the server mode. Therefore the main application should open the database first if possible. The first connection automatically starts a server on a random port. This server allows remote connections, however only to this database (to ensure that, the client reads .lock.db file and sends the the random key that is stored there to the server). When the first connection is closed, the server stops. If other (remote) connections are still open, one of them will then start a server (auto-reconnect is enabled automatically).

@features_1519_p
#All processes need to have access to the database files. If the first connection is closed (the connection that started the server), open transactions of other connections will be rolled back. Explicit client/server connections (using jdbc:h2:tcp:// or ssl://) are not supported. This mode is not supported for in-memory databases.

@features_1520_p
#Here is an example how to use this mode. Application 1 and 2 are not necessarily started on the same computer, but they need to have access to the database files. Application 1 and 2 are typically two different processes (however they could run within the same process).

@features_1521_h2
トレースオプションを使用する

@features_1522_p
アプリケーション内の問題を見つけるために、時々、何のデータベースオペレーションがどこで実行されているかを知るのは良い方法です。このデータベースは次のトレースの特徴を提供します:

@features_1523_li
System.out と (または) ファイルをトレースする

@features_1524_li
トレースレベル OFF、ERROR、INFO と DEBUG をサポート

@features_1525_li
トレースファイルの最大サイズの設定が可能

@features_1526_li
#It is possible to generate Java source code from the trace file

@features_1527_li
手動でファイルを作成することによって、ランタイムでトレースが可能

@features_1528_h3
トレースオプション

@features_1529_p
トレースオプションを可能にする簡単な方法は、データベースURLにトレースオプションを設定することです。二つの設定があり、ひとつは、System.out (TRACE_LEVEL_SYSTEM_OUT) トレーシングで、もうひとつはファイルトレーシング(TRACE_LEVEL_FILE)です。トレースレベルは、0 が OFF、1 が ERROR (デフォルト)、2 が INFO で 3 が DEBUGです。両方のレベルがDEBUGに設定されたデータベースURLです:

@features_1530_p
トレースレベルは、SQLコマンド <CODE>SET TRACE_LEVEL_SYSTEM_OUT level</CODE> (System.out トレーシング) または <CODE>SET TRACE_LEVEL_FILE level</CODE> (ファイルトレーシング) を実行することによってランタイムで変更できます。例:

@features_1531_h3
トレースファイルの最大サイズを設定

@features_1532_p
#When using a high trace level, the trace file can get very big quickly. The default size limit is 16 MB, if the trace file exceeds this limit, it is renamed to .old and a new file is created. If another .old file exists, it is deleted. The size limit can be changed using the SQL statement <code>SET TRACE_MAX_FILE_SIZE maximumFileSizeInMB</code> . Example:

@features_1533_h3
Javaコード生成

@features_1534_p
#When setting the trace level to INFO or DEBUG, Java source code is generated as well. This allows to reproduce problems more easily. The trace file looks like this:

@features_1535_p
#To filter the Java source code, use the ConvertTraceFile tool as follows:

@features_1536_p
#The generated file <code>Test.java</code> will contain the Java source code. The generated source code may be too large to compile (the size of a Java method is limited). If this is the case, the source code needs to be split in multiple methods. The password is not listed in the trace file and therefore not included in the source code.

@features_1537_h2
#Using Other Logging APIs

@features_1538_p
#By default, this database uses its own native 'trace' facility. This facility is called 'trace' and not 'log' within this database to avoid confusion with the transaction log. Trace messages can be written to both file and System.out. In most cases, this is sufficient, however sometimes it is better to use the same facility as the application, for example Log4j. To do that, this database support SLF4J.

@features_1539_a
#SLF4J

@features_1540_p
#is a simple facade for various logging APIs and allows to plug in the desired implementation at deployment time. SLF4J supports implementations such as Logback, Log4j, Jakarta Commons Logging (JCL), Java logging, x4juli, and Simple Log.

@features_1541_p
#To enable SLF4J, set the file trace level to 4 in the database URL:

@features_1542_p
#Changing the log mechanism is not possible after the database is open, that means executing the SQL statement SET TRACE_LEVEL_FILE 4 when the database is already open will not have the desired effect. To use SLF4J, all required jar files need to be in the classpath. If it does not work, check the file &lt;database&gt;.trace.db for error messages.

@features_1543_h2
読み取り専用データベース

@features_1544_p
#If the database files are read-only, then the database is read-only as well. It is not possible to create new tables, add or modify data in this database. Only SELECT and CALL statements are allowed. To create a read-only database, close the database so that the log file gets smaller. Do not delete the log file. Then, make the database files read-only using the operating system. When you open the database now, it is read-only. There are two ways an application can find out whether database is read-only: by calling Connection.isReadOnly() or by executing the SQL statement CALL READONLY().

@features_1545_h2
#Read Only Databases in Zip or Jar File

@features_1546_p
#To create a read-only database in a zip file, first create a regular persistent database, and then create a backup. If you are using a database named 'test', an easy way to do that is using the Backup tool or the BACKUP SQL statement:

@features_1547_p
#The database must not have pending changes, that means you need to close all connections to the database, open one single connection, and then execute the statement. Afterwards, you can log out, and directly open the database in the zip file using the following database URL:

@features_1548_p
#Databases in zip files are read-only. The performance for some queries will be slower than when using a regular database, because random access in zip files is not supported (only streaming). How much this affects the performance depends on the queries and the data. The database is not read in memory; therefore large databases are supported as well. The same indexes are used as when using a regular database.

@features_1549_h2
ディスクスペースが少ない状況での正しい取り扱い

@features_1550_p
#If the database needs more disk space, it calls the database event listener if one is installed. The application may then delete temporary files, or display a message and wait until the user has resolved the problem. To install a listener, run the SQL statement SET DATABASE_EVENT_LISTENER or use a database URL of the form jdbc:h2:~/test;DATABASE_EVENT_LISTENER='com.acme.DbListener' (the quotes around the class name are required). See also the DatabaseEventListener API.

@features_1551_h3
破損したデータベースを開く

@features_1552_p
boot info (始動時に実行されるSQLスクリプト) が破損しているため、データベースを開くことができない場合、データベースイベントリスナーを指定することでデータベースを開くことができます。例外は記録されますが、データベースの開始は続行します。

@features_1553_h2
computed column / ベースインデックスの機能

@features_1554_p
#Function indexes are not directly supported by this database, but they can be emulated by using computed columns. For example, if an index on the upper-case version of a column is required, create a computed column with the upper-case version of the original column, and create an index for this column:

@features_1555_p
#When inserting data, it is not required (and not allowed) to specify a value for the upper-case version of the column, because the value is generated. But you can use the column when querying the table:

@features_1556_h2
多次元インデックス

@features_1557_p
効率的な多次元の (空間的) 領域のクエリーを実行するためにツールを提供します。このデータベースは専門的な空間的インデックス (R-Tree またはより小さいもの) をサポートしていません。代わりに、B-Treeインデックスが使われています。それぞれのレコードに対して、多次元のキーは、単数範囲 (スカラー) の値に変換 (位置づけ) されます。この値は、space-filling curve (空間充填曲線) で位置を指定します。

@features_1558_p
現在、Z-order (N-order または Morton-order とも呼ばれています) が使用されています; Hilbert curveも使用できますが、実装はより複雑です。多次元の値を変換するアルゴリズムは、bit-interleavingと呼ばれています。B-Treeインデックス (通常は computed columnを使用します)を使用することで、スカラーの値はインデックスをつけられます。

@features_1559_p
最初のカラムにインデックスを使用する上で、メソッドは徹底的なパフォーマンスの改良をもたらすことができます。データと次元の数によりますが、改良は通常、factor 5よりも高いものです。指定された多次元の範囲から、ツールはSQLクエリーを生成します。使用されたメソッドは、データベースに依存しておらず、ツールは簡単に他のデータベースに移植することができます。ツールの使用方法の例は、TestMultiDimension.java で提供されているサンプルコードをご覧下さい。

@features_1560_h2
パスワードを使用する

@features_1561_h3
安全なパスワードを使用する

@features_1562_p
弱いパスワードは、暗号化やセキュリティプロトコルに取るに足らず、解読されてしまうことを覚えておいて下さい。辞書で見つけられるようなパスワードは使用しないでください。また、数字を付け足してもそのようなパスワードは安全にはなりません。良いパスワードを作る方法は、覚えやすい、文章の最初の文字を使う、大文字と小文字を使う、特別な文字が含まれているものを作る、です。例:

@features_1563_p
i'sE2rtPiUKtT (もしトリックを知っていれば、このパスワードは覚えやすいものです)

@features_1564_h3
パスワード: Stringの代わりにChar Arraysを使用する

@features_1565_p
Java Stringは不変のオブジェクトであり、アプリケーションによって安全に壊されることはできません。Stringの作成後、Stringは少なくともガベージコレクションになるまで、コンピューターのメインメモリ内にとどまるでしょう。ガベージコレクションはアプリケーションによって制御されず、ガベージコレクションであっても、データはまだメモリにとどまっているでしょう。パスワードが含まれるメモリの一部をディスクと取り換えることも可能でしょう (十分でないメインメモリも使用可能のため)。

@features_1566_p
アタッカーはオペレーティングシステムのスワップファイルにアクセスするでしょう。したがって、パスワードを保存するために、Stringの代わりにchar arrayを使用するのは良い方法です。char arrayは使用後クリアにされるので (0で埋められます)、パスワードはスワップファイルに保存されません。

@features_1567_p
このデータベースは、ユーザーパスワードとファイルパスワードを認証するために、Stringの代わりにchar arrayを使用することをサポートしています。次のコードはこのように使用されます:

@features_1568_p
#This example requires Java 1.6. When using Swing, use javax.swing.JPasswordField.

@features_1569_h3
ユーザー名 と (または) パスワードをURLで認証する

@features_1570_p
#Instead of passing the user name as a separate parameter as in <code>Connection conn = DriverManager.  getConnection("jdbc:h2:~/test", "sa", "123");</code> the user name (and/or password) can be supplied in the URL itself: <code>Connection conn = DriverManager.  getConnection("jdbc:h2:~/test;USER=sa;PASSWORD=123");</code> The settings in the URL override the settings passed as a separate parameter.

@features_1571_h2
ユーザー定義の関数とストアドプロシージャ

@features_1572_p
組み込み関数に加えて、このデータベースはユーザー定義のJava関数をサポートしています。同様に、このデータベースではJava関数はストアドプロシージャとして使用されています。関数は、使用される前に宣言 (登録) されていなければなりません。static Javaメソッドのみサポートされています; クラスとメソッドの両方が public である必要があります。Javaメソッドの例:

@features_1573_p
Java関数は、CREATE ALIAS と呼ばれるデータベースに登録されていなければなりません:

@features_1574_p
完全なサンプルアプリケーションは src/test/org/h2/samples/Function.java をご覧下さい。

@features_1575_h3
データタイプマッピング関数

@features_1576_p
#Functions that accept non-nullable parameters such as 'int' will not be called if one of those parameters is NULL. Instead, the result of the function is NULL. If the function should be called if a parameter is NULL, you need to use 'java.lang.Integer' instead of 'int'.

@features_1577_p
#SQL types are mapped to Java classes and vice-versa as in the JDBC API. For details, see <a href="datatypes.html">Data Types</a> . There are two special cases: java.lang.Object is mapped to OTHER (a serialized object). Therefore, java.lang.Object can not be used to match all SQL types (matching all SQL types is not supported). The second special case is Object[]: arrays of any class are mapped to ARRAY.

@features_1578_h3
接続を必要とする関数

@features_1579_p
#If the first parameter of a Java function is a java.sql.Connection, then the connection to database is provided. This connection does not need to be closed before returning. When calling the method from within the SQL statement, this connection parameter does not need to be (can not be) specified.

@features_1580_h3
例外を投げる関数

@features_1581_p
関数が例外を投げたら、現在のステートメントはロールバックされ、例外はアプリケーションに投げられます。

@features_1582_h3
Result Setを返す関数

@features_1583_p
関数はresult setを返します。このような関数はCALLステートメントと一緒に呼ばれます:

@features_1584_h3
SimpleResultSetを使用する

@features_1585_p
#A function can create a result set using the SimpleResultSet tool:

@features_1586_h3
関数をテーブルとして使用する

@features_1587_p
#A function that returns a result set can be used like a table. However, in this case the function is called at least twice: first while parsing the statement to collect the column names (with parameters set to null where not known at compile time). And then, while executing the statement to get the data (maybe multiple times if this is a join). If the function is called just to get the column list, the URL of the connection passed to the function is <code>jdbc:columnlist:connection</code> . Otherwise, the URL of the connection is <code>jdbc:default:connection</code> .

@features_1588_h2
トリガー

@features_1589_p
このデータベースは、行が更新、挿入、または削除された前後に呼ばれるJavaトリガーをサポートしています。トリガーは複雑な一貫性チェックか、データベース内の関連したデータをアップデートするのに使用されます。マテリアライズドビューをシミュレートするためにトリガーを使用することも可能です。完全なサンプルアプリケーションは src/test/org/h2/samples/TriggerSample.java をご覧下さい。Javaトリガーは、インターフェイス org.h2.api.Trigger を実装しなければなりません:

@features_1590_p
他のテーブルのクエリーかデータのアップデートに接続を使用することができます。トリガーはその時データベースで定義されている必要があります:

@features_1591_p
#The trigger can be used to veto a change, by throwing a SQLException.

@features_1592_h2
データベースをコンパクトにする

@features_1593_p
データベースファイルの空のスペースは自動的に再利用されます。インデックスを再構築するもっとも簡単な方法は、データベースが閉じられている間に .index.db ファイルを削除します。しかし、一部状況では (例えば、データベースの多数のデータを削除した後)、データベースのサイズを縮小したい場合があります (データベースをコンパクトにする)。そのためのサンプルです:

@features_1594_p
サンプルアプリケーション org.h2.samples.Compact もご覧下さい。データベースのバックアップを作るのと、スクリプトからデータベースを再構築するのにSCRIPT / RUNSCRIPT コマンドを使用することができます。

@features_1595_h2
キャッシュの設定

@features_1596_p
データベースは最も頻繁に使われるデータやインデックスページをメインメモリに保存します。キャッシュに使用されるメモリ量を CACHE_SIZE 設定を使用して変更することができます。この設定は、データベース接続URL (jdbc:h2:~/test;CACHE_SIZE=131072) か、ランタイムにSET CACHE_SIZE を使用してサイズを変更できます。

@features_1597_p
#This database supports two cache page replacement algorithms: LRU (the default) and TQ. For LRU, the pages that were least frequently used are removed from the cache if it becomes full. The TQ (Two Queue, also called 2Q) algorithm is a bit more complicated: basically two queues are used. It is more resistant to table scans, however the overhead is a bit higher compared to the LRU. To use the cache algorithm TQ, use a database URL of the form jdbc:h2:~/test;CACHE_TYPE=TQ. The cache algorithm cannot be changed once the database is open.

@features_1598_p
#Also supported is a second level soft reference cache. Rows in this cache are only garbage collected on low memory. By default the second level cache is disabled. To enable it, use the prefix SOFT_. Example: jdbc:h2:~/test;CACHE_TYPE=SOFT_LRU .

@features_1599_p
読んだり書いたりしたページや、現在使用されているキャッシュアルゴリズムの情報を得るためには、SELECT * FROM INFORMATION_SCHEMA.SETTINGS を呼びます。データとインデックスファイルに読み書きしたページ数が書かれています。

@fragments_1000_b
検索:

@fragments_1001_td
Highlight keyword(s)

@fragments_1002_a
ホーム

@fragments_1003_a
クイックスタート

@fragments_1004_a
インストール

@fragments_1005_a
チュートリアル

@fragments_1006_a
特徴

@fragments_1007_a
パフォーマンス

@fragments_1008_a
進歩したトピックス

@fragments_1009_a
#JaQu

@fragments_1010_a
ダウンロード

@fragments_1011_b
参照

@fragments_1012_a
SQL文法

@fragments_1013_a
関数

@fragments_1014_a
データ型

@fragments_1015_a
Javadoc

@fragments_1016_a
#Docs as PDF (1 MB)

@fragments_1017_a
#Error Analyzer

@fragments_1018_b
付録

@fragments_1019_a
ビルド

@fragments_1020_a
歴史とロードマップ

@fragments_1021_a
#Links

@fragments_1022_a
FAQ

@fragments_1023_a
ライセンス

@fragments_1024_td
&nbsp;

@frame_1000_h1
H2 データベース エンジン

@frame_1001_p
#Welcome to H2, the free SQL database. The main feature of H2 are:

@frame_1002_li
#It is free to use for everybody, source code is included

@frame_1003_li
#Written in Java, but also available as native executable

@frame_1004_li
#JDBC and (partial) ODBC API

@frame_1005_li
#Embedded and client/server modes

@frame_1006_li
#Clustering is supported

@frame_1007_li
#A web client is included

@frame_1008_h2
#No Javascript

@frame_1009_p
#If you are not automatically redirected to the main page, then Javascript is currently disabled or your browser does not support Javascript. Some features (for example the integrated search) require Javascript.

@frame_1010_p
#Please enable Javascript, or go ahead without it: <a href="main.html" style="font-size: 16px; font-weight: bold">H2 Database Engine</a>

@history_1000_h1
歴史とロードマップ

@history_1001_a
変更履歴

@history_1002_a
ロードマップ

@history_1003_a
このデータベースエンジンの歴史

@history_1004_a
なぜJavaなのか

@history_1005_a
支援者

@history_1006_h2
変更履歴

@history_1007_p
#The up-to-date change log is available at <a href="http://www.h2database.com/html/changelog.html">http://www.h2database.com/html/changelog.html</a>

@history_1008_h2
ロードマップ

@history_1009_p
#The current roadmap is available at <a href="http://www.h2database.com/html/roadmap.html">http://www.h2database.com/html/roadmap.html</a>

@history_1010_h2
このデータベースエンジンの歴史

@history_1011_p
#The development of H2 was started in May 2004, but it was first published on December 14th 2005. The main author of H2, Thomas Mueller, is also the original developer of Hypersonic SQL. In 2001, he joined PointBase Inc. where he created PointBase Micro. At that point, he had to discontinue Hypersonic SQL, but then the HSQLDB Group was formed to continued to work on the Hypersonic SQL codebase. The name H2 stands for Hypersonic 2; however H2 does not share any code with Hypersonic SQL or HSQLDB. H2 is built from scratch.

@history_1012_h2
なぜJavaなのか

@history_1013_p
Javaデータベースを使用するいくつかの理由:

@history_1014_li
Javaアプリケーションの統合は非常に簡単

@history_1015_li
多数の異なったプラットフォームのサポート

@history_1016_li
ネイティブアプリケーションより、より安全 (バッファーのオーバーフローがない)

@history_1017_li
#User defined functions (or triggers) run very fast

@history_1018_li
Unicodeをサポート

@history_1019_p
低いレベルでのオペレーションでは、Javaはまだ低速すぎると思う方もいますが、そうではありません (それ以上でもありません)。一般的に、C、またはC++を使用するよりもずっと速くコードを書くことができます。このように、コードを移植して、低レベルのもの (スレッドのメモリ管理か取り扱いのような) に対処するよりもむしろ、アルゴリズムの改良(アプリケーションをより速くする) に集中することが可能です。ガーベジコレクションは今や手動でのメモリ管理よりおそらく速いでしょう。

@history_1020_p
#A lot of features are already built in (for example Unicode, network libraries). It is very easy to write secure code because buffer overflows can not occur. Some features such as the reflection mechanism can be used for randomized testing.

@history_1021_p
#Java is also future proof: a lot of companies support Java, and it is now open source.

@history_1022_p
このソフトウェアは、移植性の増加と使いやすさのため、そしてパフォーマンスの理由から、多くのJavaライブラリ、または他のソフトウェアを信頼していません。例えば、暗号化アルゴリズムと多数のライブラリ関数は、存在するライブラリを使用する代わりにデータベースに実装されています。SwingのようなオープンソースのJava実装が有効でないライブラリは使用されていないか、特定の特徴のみに使用されます。

@history_1023_h2
支援者

@history_1024_p
#Many thanks for those who helped by finding and reporting bugs, gave valuable feedback, spread the word and have translated this project. Also many thanks to the donors who contributed via PayPal:

@history_1025_a
#SkyCash, Poland

@history_1026_li
#Donald Bleyl, USA

@history_1027_li
#lumber-mill.co.jp, Japan

@history_1028_li
#Frank Berger, Germany

@history_1029_li
#Ashwin Jayaprakash, USA

@history_1030_li
#Florent Ramiere, France

@history_1031_li
#Jun Iyama, Japan

@history_1032_li
#Antonio Casqueiro, Portugal

@history_1033_li
#Oliver Computing LLC, USA

@history_1034_li
#Harpal Grover Consulting Inc., USA

@history_1035_li
#Elisabetta Berlini, Italy

@history_1036_li
#William Gilbert, USA

@history_1037_li
#Antonio Dieguez, Chile

@history_1038_a
#Ontology Works, USA

@history_1039_li
#Pete Haidinyak, USA

@history_1040_li
#William Osmond, USA

@history_1041_li
#Joachim Ansorg, Germany

@history_1042_li
#Oliver Soerensen, Germany

@history_1043_li
#Christos Vasilakis, Greece

@history_1044_li
#Fyodor Kupolov, Denmark

@installation_1000_h1
インストール

@installation_1001_a
必要条件

@installation_1002_a
サポートされているプラットフォーム

@installation_1003_a
ソフトウェアのインストール

@installation_1004_a
ディレクトリ構成

@installation_1005_h2
必要条件

@installation_1006_p
データベースを実行するために、以下のソフトウェアが動作することを確認します。

@installation_1007_li
#Windows XP, Mac OS X, or Linux

@installation_1008_li
推奨されるWindowsファイルシステム: NTFS (FAT32は4GB以上ファイルをサポートします)

@installation_1009_li
#Sun JDK 1.5 or newer

@installation_1010_li
Mozilla Firefox 1.5以降

@installation_1011_h2
サポートされているプラットフォーム

@installation_1012_p
#As this database is written in Java, it can run on many different platforms. It is tested with Java 1.5 and 1.6 but can also be compiled to native code using GCJ. The source code does not use features of Java 1.6. Currently, the database is developed and tested on Windows XP and Mac OS X using the Sun JDK 1.5, but it also works in many other operating systems and using other Java runtime environments.

@installation_1013_h2
ソフトウェアのインストール

@installation_1014_p
ソフトウェアをインストールするために、インストーラーを実行するか 選択したディレクトリにソフトウェアを解凍します。

@installation_1015_h2
ディレクトリ構成

@installation_1016_p
インストール後、下記のディレクトリ構成が作られます:

@installation_1017_th
ディレクトリ

@installation_1018_th
コンテンツ

@installation_1019_td
bin

@installation_1020_td
JARとbatchファイル

@installation_1021_td
docs

@installation_1022_td
ドキュメント

@installation_1023_td
docs/html

@installation_1024_td
HTMLページ

@installation_1025_td
docs/javadoc

@installation_1026_td
Javadocファイル

@installation_1027_td
#ext

@installation_1028_td
#External dependencies (downloaded when building)

@installation_1029_td
service

@installation_1030_td
Windows Serviceとしてデータベースを実行するツール

@installation_1031_td
src

@installation_1032_td
Sourceファイル

@jaqu_1000_h1
#JaQu

@jaqu_1001_h2
#What is JaQu

@jaqu_1002_p
#JaQu stands for Java Query and allows to access databases using pure Java. JaQu provides a fluent interface (or internal DSL) for building SQL statements. JaQu replaces SQL, JDBC, and persistence frameworks such as Hibernate. JaQu is something like LINQ for Java (LINQ stands for "language integrated query" and is a Microsoft .NET technology). The following JaQu code:

@jaqu_1003_p
#stands for the SQL statement:

@jaqu_1004_h2
#Advantages and Differences to Other Data Access Tools

@jaqu_1005_p
#Unlike SQL, JaQu can be easily integrated in Java applications. Because JaQu is pure Java, auto-complete in the IDE and Javadoc and are supported. Type checking is performed by the compiler. JaQu fully protects against SQL injection.

@jaqu_1006_p
#JaQu is much smaller than persistence frameworks such as Hibernate. Unlike iBatis and Hibernate, no XML or annotation based configuration is required; instead the configuration (if required at all) is done in pure Java, in the application itself.

@jaqu_1007_p
#JaQu does not require or contain any data caching mechanism. Like JDBC and iBatis, JaQu provides full control over when and what SQL statements are executed.

@jaqu_1008_h3
#Restrictions

@jaqu_1009_p
#Primitive types (eg. boolean, int, long, double) are not supported. Use Boolean, Integer, Long, and Double instead.

@jaqu_1010_h3
#Why in Java?

@jaqu_1011_p
#Most people use Java in their application. Mixing Java and another language (for example Scala or Groovy) in the same application is complicated: you would need to split the application and database code.

@jaqu_1012_h2
#Current State

@jaqu_1013_p
#Currently, JaQu is only tested with the H2 database. The API may change in future versions. JaQu is not part of the h2 jar file, however the source code is included in H2, under:

@jaqu_1014_li
#src/test/org/h2/test/jaqu/* (samples and tests)

@jaqu_1015_li
#src/tools/org/h2/jaqu/* (framework)

@jaqu_1016_h2
#Building the JaQu library

@jaqu_1017_p
#To create the JaQu jar file, run: <code>build jarJaqu</code> . This will create the file <code>bin/h2jaqu.jar</code> .

@jaqu_1018_h2
必要条件

@jaqu_1019_p
#JaQu requires Java 1.5. Annotations are not need. Currently, JaQu is only tested with the H2 database engine, however in theory it should work with any database that supports the JDBC API.

@jaqu_1020_h2
#Example Code

@jaqu_1021_h2
#Configuration

@jaqu_1022_p
#JaQu does not require any configuration when using the default mapping. To define table indices, or if you want to map a class to a table with a different name, or a field to a column with another name, create a function called 'define' in the data class. Example:

@jaqu_1023_p
#The method 'define()' contains the mapping definition. It is called once when the class is used for the first time. Like annotations, the mapping is defined in the class itself. Unlike when using annotations, the compiler can check the syntax even for multi-column objects (multi-column indexes, multi-column primary keys and so on). Because the definition is written in regular Java, the configuration can depend on the environment. This is not possible using annotations. Unlike XML mapping configuration, the configuration is integrated in the class itself.

@jaqu_1024_h2
#Natural Syntax

@jaqu_1025_p
#The plan is to support more natural (pure Java) syntax in conditions. To do that, the condition class is de-compiled to a SQL condition. A proof of concept decompiler is included (but it doesn't work yet). The planned syntax is:

@jaqu_1026_h2
#Other Ideas

@jaqu_1027_p
#This project has just been started, and nothing is fixed yet. Some ideas for what to implement are:

@jaqu_1028_li
#Support queries on collections (instead of using a database).

@jaqu_1029_li
#Provide API level compatibility with JPA (so that JaQu can be used as an extension of JPA).

@jaqu_1030_li
#Internally use a JPA implementation (for example Hibernate) instead of SQL directly.

@jaqu_1031_li
#Use PreparedStatements and cache them.

@jaqu_1032_h2
#Related Projects

@jaqu_1033_a
#Dreamsource ORM

@jaqu_1034_a
#Empire-db

@jaqu_1035_a
#JEQUEL: Java Embedded QUEry Language

@jaqu_1036_a
#Joist

@jaqu_1037_a
#JoSQL

@jaqu_1038_a
#LIQUidFORM

@jaqu_1039_a
#Quaere (Alias implementation)

@jaqu_1040_a
#Quaere

@jaqu_1041_a
#Querydsl

@jaqu_1042_a
#Squill

@license_1000_h1
ライセンス

@license_1001_h2
#Summary and License FAQ

@license_1002_p
#H2 is dual licensed and available under a modified version of the MPL 1.1 ( <a href="http://www.mozilla.org/MPL">Mozilla Public License</a> ) or under the (unmodified) EPL 1.0 ( <a href="http://opensource.org/licenses/eclipse-1.0.php">Eclipse Public License</a> ). The changes to the MPL are

@license_1003_em
#underlined</em> . There is a License FAQ for both the MPL and the EPL, most of that is applicable to the H2 License as well.

@license_1004_li
#You can use H2 for free. You can integrate it into your application (including commercial applications),  and you can distribute it.

@license_1005_li
#Files containing only your code are not covered by this license (it is 'commercial friendly').

@license_1006_li
#Modifications to the H2 source code must be published.

@license_1007_li
#You don't need to provide the source code of H2 if you did not modify anything.

@license_1008_p
#However, nobody is allowed to rename H2, modify it a little, and sell it as a database engine without telling the customers it is in fact H2. This happened to HSQLDB: a company called 'bungisoft' copied HSQLDB, renamed it to 'RedBase', and tried to sell it, hiding the fact that it was in fact just HSQLDB. It seems 'bungisoft' does not exist any more, but you can use the Wayback Machine of http://www.archive.org and visit old web pages of http://www.bungisoft.com .

@license_1009_p
#About porting the source code to another language (for example C# or C++): converted source code (even if done manually) stays under the same copyright and license as the original code. The copyright of the ported source code does not (automatically) go to the person who ported the code.

@license_1010_h2
#H2 License, Version 1.0

@license_1011_h3
#1. Definitions

@license_1012_b
#1.0.1. "Commercial Use"

@license_1013_p
#means distribution or otherwise making the Covered Code available to a third party.

@license_1014_b
#1.1. "Contributor"

@license_1015_p
#means each entity that creates or contributes to the creation of Modifications.

@license_1016_b
#1.2. "Contributor Version"

@license_1017_p
#means the combination of the Original Code, prior Modifications used by a Contributor, and the Modifications made by that particular Contributor.

@license_1018_b
#1.3. "Covered Code"

@license_1019_p
#means the Original Code or Modifications or the combination of the Original Code and Modifications, in each case including portions thereof.

@license_1020_b
#1.4. "Electronic Distribution Mechanism"

@license_1021_p
#means a mechanism generally accepted in the software development community for the electronic transfer of data.

@license_1022_b
#1.5. "Executable"

@license_1023_p
#means Covered Code in any form other than Source Code.

@license_1024_b
#1.6. "Initial Developer"

@license_1025_p
#means the individual or entity identified as the Initial Developer in the Source Code notice required by <a href="#exhibit-a">Exhibit A</a> .

@license_1026_b
#1.7. "Larger Work"

@license_1027_p
#means a work which combines Covered Code or portions thereof with code not governed by the terms of this License.

@license_1028_b
#1.8. "License"

@license_1029_p
#means this document.

@license_1030_b
#1.8.1. "Licensable"

@license_1031_p
#means having the right to grant, to the maximum extent possible, whether at the time of the initial grant or subsequently acquired, any and all of the rights conveyed herein.

@license_1032_b
#1.9. "Modifications"

@license_1033_p
#means any addition to or deletion from the substance or structure of either the Original Code or any previous Modifications. When Covered Code is released as a series of files, a Modification is:

@license_1034_p
#1.9.a. Any addition to or deletion from the contents of a file containing Original Code or previous Modifications.

@license_1035_p
#1.9.b. Any new file that contains any part of the Original Code or previous Modifications.

@license_1036_b
#1.10. "Original Code"

@license_1037_p
#means Source Code of computer software code which is described in the Source Code notice required by <a href="#exhibit-a">Exhibit A</a> as Original Code, and which, at the time of its release under this License is not already Covered Code governed by this License.

@license_1038_b
#1.10.1. "Patent Claims"

@license_1039_p
#means any patent claim(s), now owned or hereafter acquired, including without limitation, method, process, and apparatus claims, in any patent Licensable by grantor.

@license_1040_b
#1.11. "Source Code"

@license_1041_p
#means the preferred form of the Covered Code for making modifications to it, including all modules it contains, plus any associated interface definition files, scripts used to control compilation and installation of an Executable, or source code differential comparisons against either the Original Code or another well known, available Covered Code of the Contributor's choice. The Source Code can be in a compressed or archival form, provided the appropriate decompression or de-archiving software is widely available for no charge.

@license_1042_b
#1.12. "You" (or "Your")

@license_1043_p
#means an individual or a legal entity exercising rights under, and complying with all of the terms of, this License or a future version of this License issued under <a href="#section-6.1">Section 6.1.</a> For legal entities, "You" includes any entity which controls, is controlled by, or is under common control with You. For purposes of this definition, "control" means (a) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (b) ownership of more than fifty percent (50%) of the outstanding shares or beneficial ownership of such entity.

@license_1044_h3
#2. Source Code License

@license_1045_h4
#2.1. The Initial Developer Grant

@license_1046_p
#The Initial Developer hereby grants You a world-wide, royalty-free, non-exclusive license, subject to third party intellectual property claims:

@license_1047_p
#2.1.a. under intellectual property rights (other than patent or trademark) Licensable by Initial Developer to use, reproduce, modify, display, perform, sublicense and distribute the Original Code (or portions thereof) with or without Modifications, and/or as part of a Larger Work; and

@license_1048_p
#2.1.b. under Patents Claims infringed by the making, using or selling of Original Code, to make, have made, use, practice, sell, and offer for sale, and/or otherwise dispose of the Original Code (or portions thereof).

@license_1049_p
#2.1.c. the licenses granted in this Section 2.1 ( <a href="#section-2.1-a">a</a> ) and ( <a href="#section-2.1-b">b</a> ) are effective on the date Initial Developer first distributes Original Code under the terms of this License.

@license_1050_p
#2.1.d. Notwithstanding Section 2.1 ( <a href="#section-2.1-b">b</a> ) above, no patent license is granted: 1) for code that You delete from the Original Code; 2) separate from the Original Code; or 3) for infringements caused by: i) the modification of the Original Code or ii) the combination of the Original Code with other software or devices.

@license_1051_h4
#2.2. Contributor Grant

@license_1052_p
#Subject to third party intellectual property claims, each Contributor hereby grants You a world-wide, royalty-free, non-exclusive license

@license_1053_p
#2.2.a. under intellectual property rights (other than patent or trademark) Licensable by Contributor, to use, reproduce, modify, display, perform, sublicense and distribute the Modifications created by such Contributor (or portions thereof) either on an unmodified basis, with other Modifications, as Covered Code and/or as part of a Larger Work; and

@license_1054_p
#2.2.b. under Patent Claims infringed by the making, using, or selling of Modifications made by that Contributor either alone and/or in combination with its Contributor Version (or portions of such combination), to make, use, sell, offer for sale, have made, and/or otherwise dispose of: 1) Modifications made by that Contributor (or portions thereof); and 2) the combination of Modifications made by that Contributor with its Contributor Version (or portions of such combination).

@license_1055_p
#2.2.c. the licenses granted in Sections 2.2 ( <a href="#section-2.2-a">a</a> ) and 2.2 ( <a href="#section-2.2-b">b</a> ) are effective on the date Contributor first makes Commercial Use of the Covered Code.

@license_1056_p
#2.2.c. Notwithstanding Section 2.2 ( <a href="#section-2.2-b">b</a> ) above, no patent license is granted: 1) for any code that Contributor has deleted from the Contributor Version; 2) separate from the Contributor Version; 3) for infringements caused by: i) third party modifications of Contributor Version or ii) the combination of Modifications made by that Contributor with other software (except as part of the Contributor Version) or other devices; or 4) under Patent Claims infringed by Covered Code in the absence of Modifications made by that Contributor.

@license_1057_h3
#3. Distribution Obligations

@license_1058_h4
#3.1. Application of License

@license_1059_p
#The Modifications which You create or to which You contribute are governed by the terms of this License, including without limitation Section <a href="#section-2.2">2.2</a> . The Source Code version of Covered Code may be distributed only under the terms of this License or a future version of this License released under Section <a href="#section-6.1">6.1</a> , and You must include a copy of this License with every copy of the Source Code You distribute. You may not offer or impose any terms on any Source Code version that alters or restricts the applicable version of this License or the recipients' rights hereunder. However, You may include an additional document offering the additional rights described in Section <a href="#section-3.5">3.5</a> .

@license_1060_h4
#3.2. Availability of Source Code

@license_1061_p
#Any Modification which You create or to which You contribute must be made available in Source Code form under the terms of this License either on the same media as an Executable version or via an accepted Electronic Distribution Mechanism to anyone to whom you made an Executable version available; and if made available via Electronic Distribution Mechanism, must remain available for at least twelve (12) months after the date it initially became available, or at least six (6) months after a subsequent version of that particular Modification has been made available to such recipients. You are responsible for ensuring that the Source Code version remains available even if the Electronic Distribution Mechanism is maintained by a third party.

@license_1062_h4
#3.3. Description of Modifications

@license_1063_p
#You must cause all Covered Code to which You contribute to contain a file documenting the changes You made to create that Covered Code and the date of any change. You must include a prominent statement that the Modification is derived, directly or indirectly, from Original Code provided by the Initial Developer and including the name of the Initial Developer in (a) the Source Code, and (b) in any notice in an Executable version or related documentation in which You describe the origin or ownership of the Covered Code.

@license_1064_h4
#3.4. Intellectual Property Matters

@license_1065_b
#3.4.a. Third Party Claims:

@license_1066_p
#If Contributor has knowledge that a license under a third party's intellectual property rights is required to exercise the rights granted by such Contributor under Sections <a href="#section-2.1">2.1</a> or <a href="#section-2.2">2.2</a> , Contributor must include a text file with the Source Code distribution titled "LEGAL" which describes the claim and the party making the claim in sufficient detail that a recipient will know whom to contact. If Contributor obtains such knowledge after the Modification is made available as described in Section <a href="#section-3.2">3.2</a> , Contributor shall promptly modify the LEGAL file in all copies Contributor makes available thereafter and shall take other steps (such as notifying appropriate mailing lists or newsgroups) reasonably calculated to inform those who received the Covered Code that new knowledge has been obtained.

@license_1067_b
#3.4.b. Contributor APIs:

@license_1068_p
#If Contributor's Modifications include an application programming interface and Contributor has knowledge of patent licenses which are reasonably necessary to implement that API, Contributor must also include this information in the legal file.

@license_1069_b
#3.4.c. Representations:

@license_1070_p
#Contributor represents that, except as disclosed pursuant to Section 3.4 ( <a href="#section-3.4-a">a</a> ) above, Contributor believes that Contributor's Modifications are Contributor's original creation(s) and/or Contributor has sufficient rights to grant the rights conveyed by this License.

@license_1071_h4
#3.5. Required Notices

@license_1072_p
#You must duplicate the notice in <a href="#exhibit-a">Exhibit A</a> in each file of the Source Code. If it is not possible to put such notice in a particular Source Code file due to its structure, then You must include such notice in a location (such as a relevant directory) where a user would be likely to look for such a notice. If You created one or more Modification(s) You may add your name as a Contributor to the notice described in <a href="#exhibit-a">Exhibit A</a> . You must also duplicate this License in any documentation for the Source Code where You describe recipients' rights or ownership rights relating to Covered Code. You may choose to offer, and to charge a fee for, warranty, support, indemnity or liability obligations to one or more recipients of Covered Code. However, You may do so only on Your own behalf, and not on behalf of the Initial Developer or any Contributor. You must make it absolutely clear than any such warranty, support, indemnity or liability obligation is offered by You alone, and You hereby agree to indemnify the Initial Developer and every Contributor for any liability incurred by the Initial Developer or such Contributor as a result of warranty, support, indemnity or liability terms You offer.

@license_1073_h4
#3.6. Distribution of Executable Versions

@license_1074_p
#You may distribute Covered Code in Executable form only if the requirements of Sections <a href="#section-3.1">3.1</a> , <a href="#section-3.2">3.2</a> , <a href="#section-3.3">3.3</a> , <a href="#section-3.4">3.4</a> and <a href="#section-3.5">3.5</a> have been met for that Covered Code, and if You include a notice stating that the Source Code version of the Covered Code is available under the terms of this License, including a description of how and where You have fulfilled the obligations of Section <a href="#section-3.2">3.2</a> . The notice must be conspicuously included in any notice in an Executable version, related documentation or collateral in which You describe recipients' rights relating to the Covered Code. You may distribute the Executable version of Covered Code or ownership rights under a license of Your choice, which may contain terms different from this License, provided that You are in compliance with the terms of this License and that the license for the Executable version does not attempt to limit or alter the recipient's rights in the Source Code version from the rights set forth in this License. If You distribute the Executable version under a different license You must make it absolutely clear that any terms which differ from this License are offered by You alone, not by the Initial Developer or any Contributor. You hereby agree to indemnify the Initial Developer and every Contributor for any liability incurred by the Initial Developer or such Contributor as a result of any such terms You offer.

@license_1075_h4
#3.7. Larger Works

@license_1076_p
#You may create a Larger Work by combining Covered Code with other code not governed by the terms of this License and distribute the Larger Work as a single product. In such a case, You must make sure the requirements of this License are fulfilled for the Covered Code.

@license_1077_h3
#4. Inability to Comply Due to Statute or Regulation.

@license_1078_p
#If it is impossible for You to comply with any of the terms of this License with respect to some or all of the Covered Code due to statute, judicial order, or regulation then You must: (a) comply with the terms of this License to the maximum extent possible; and (b) describe the limitations and the code they affect. Such description must be included in the <b>legal</b> file described in Section <a href="#section-3.4">3.4</a> and must be included with all distributions of the Source Code. Except to the extent prohibited by statute or regulation, such description must be sufficiently detailed for a recipient of ordinary skill to be able to understand it.

@license_1079_h3
#5. Application of this License.

@license_1080_p
#This License applies to code to which the Initial Developer has attached the notice in <a href="#exhibit-a">Exhibit A</a> and to related Covered Code.

@license_1081_h3
#6. Versions of the License.

@license_1082_h4
#6.1. New Versions

@license_1083_p
#The

@license_1084_em
#H2 Group</em> may publish revised and/or new versions of the License from time to time. Each version will be given a distinguishing version number.

@license_1085_h4
#6.2. Effect of New Versions

@license_1086_p
#Once Covered Code has been published under a particular version of the License, You may always continue to use it under the terms of that version. You may also choose to use such Covered Code under the terms of any subsequent version of the License published by the

@license_1087_em
#H2 Group</em> . No one other than the

@license_1088_em
#H2 Group</em> has the right to modify the terms applicable to Covered Code created under this License.

@license_1089_h4
#6.3. Derivative Works

@license_1090_p
#If You create or use a modified version of this License (which you may only do in order to apply it to code which is not already Covered Code governed by this License), You must (a) rename Your license so that the phrases

@license_1091_em
#"H2 Group", "H2"</em> or any confusingly similar phrase do not appear in your license (except to note that your license differs from this License) and (b) otherwise make it clear that Your version of the license contains terms which differ from the

@license_1092_em
#H2 License</em> . (Filling in the name of the Initial Developer, Original Code or Contributor in the notice described in <a href="#exhibit-a">Exhibit A</a> shall not of themselves be deemed to be modifications of this License.)

@license_1093_h3
#7. Disclaimer of Warranty

@license_1094_p
#Covered code is provided under this license on an "as is" basis, without warranty of any kind, either expressed or implied, including, without limitation, warranties that the covered code is free of defects, merchantable, fit for a particular purpose or non-infringing. The entire risk as to the quality and performance of the covered code is with you. Should any covered code prove defective in any respect, you (not the initial developer or any other contributor) assume the cost of any necessary servicing, repair or correction. This disclaimer of warranty constitutes an essential part of this license. No use of any covered code is authorized hereunder except under this disclaimer.

@license_1095_h3
#8. Termination

@license_1096_p
#8.1. This License and the rights granted hereunder will terminate automatically if You fail to comply with terms herein and fail to cure such breach within 30 days of becoming aware of the breach. All sublicenses to the Covered Code which are properly granted shall survive any termination of this License. Provisions which, by their nature, must remain in effect beyond the termination of this License shall survive.

@license_1097_p
#8.2. If You initiate litigation by asserting a patent infringement claim (excluding declaratory judgment actions) against Initial Developer or a Contributor (the Initial Developer or Contributor against whom You file such action is referred to as "Participant") alleging that:

@license_1098_p
#8.2.a. such Participant's Contributor Version directly or indirectly infringes any patent, then any and all rights granted by such Participant to You under Sections <a href="#section-2.1">2.1</a> and/or <a href="#section-2.2">2.2</a> of this License shall, upon 60 days notice from Participant terminate prospectively, unless if within 60 days after receipt of notice You either: (i) agree in writing to pay Participant a mutually agreeable reasonable royalty for Your past and future use of Modifications made by such Participant, or (ii) withdraw Your litigation claim with respect to the Contributor Version against such Participant. If within 60 days of notice, a reasonable royalty and payment arrangement are not mutually agreed upon in writing by the parties or the litigation claim is not withdrawn, the rights granted by Participant to You under Sections <a href="#section-2.1">2.1</a> and/or <a href="#section-2.2">2.2</a> automatically terminate at the expiration of the 60 day notice period specified above.

@license_1099_p
#8.2.b. any software, hardware, or device, other than such Participant's Contributor Version, directly or indirectly infringes any patent, then any rights granted to You by such Participant under Sections 2.1( <a href="#section-2.1-b">b</a> ) and 2.2( <a href="#section-2.2-b">b</a> ) are revoked effective as of the date You first made, used, sold, distributed, or had made, Modifications made by that Participant.

@license_1100_p
#8.3. If You assert a patent infringement claim against Participant alleging that such Participant's Contributor Version directly or indirectly infringes any patent where such claim is resolved (such as by license or settlement) prior to the initiation of patent infringement litigation, then the reasonable value of the licenses granted by such Participant under Sections <a href="#section-2.1">2.1</a> or <a href="#section-2.2">2.2</a> shall be taken into account in determining the amount or value of any payment or license.

@license_1101_p
#8.4. In the event of termination under Sections <a href="#section-8.1">8.1</a> or <a href="#section-8.2">8.2</a> above, all end user license agreements (excluding distributors and resellers) which have been validly granted by You or any distributor hereunder prior to termination shall survive termination.

@license_1102_h3
#9. Limitation of Liability

@license_1103_p
#Under no circumstances and under no legal theory, whether tort (including negligence), contract, or otherwise, shall you, the initial developer, any other contributor, or any distributor of covered code, or any supplier of any of such parties, be liable to any person for any indirect, special, incidental, or consequential damages of any character including, without limitation, damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses, even if such party shall have been informed of the possibility of such damages. This limitation of liability shall not apply to liability for death or personal injury resulting from such party's negligence to the extent applicable law prohibits such limitation. Some jurisdictions do not allow the exclusion or limitation of incidental or consequential damages, so this exclusion and limitation may not apply to you.

@license_1104_h3
#10. United States Government End Users

@license_1105_p
#The Covered Code is a "commercial item", as that term is defined in 48 C.F.R. 2.101 (October 1995), consisting of "commercial computer software" and "commercial computer software documentation", as such terms are used in 48 C.F.R. 12.212 (September 1995). Consistent with 48 C.F.R. 12.212 and 48 C.F.R. 227.7202-1 through 227.7202-4 (June 1995), all U.S. Government End Users acquire Covered Code with only those rights set forth herein.

@license_1106_h3
#11. Miscellaneous

@license_1107_p
#This License represents the complete agreement concerning subject matter hereof. If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable. This License shall be governed by California law provisions (except to the extent applicable law, if any, provides otherwise), excluding its conflict-of-law provisions. With respect to disputes in which at least one party is a citizen of, or an entity chartered or registered to do business in United States of America, any litigation relating to this License shall be subject to the jurisdiction of the Federal Courts of the Northern District of California, with venue lying in Santa Clara County, California, with the losing party responsible for costs, including without limitation, court costs and reasonable attorneys' fees and expenses. The application of the United Nations Convention on Contracts for the International Sale of Goods is expressly excluded. Any law or regulation which provides that the language of a contract shall be construed against the drafter shall not apply to this License.

@license_1108_h3
#12. Responsibility for Claims

@license_1109_p
#As between Initial Developer and the Contributors, each party is responsible for claims and damages arising, directly or indirectly, out of its utilization of rights under this License and You agree to work with Initial Developer and Contributors to distribute such responsibility on an equitable basis. Nothing herein is intended or shall be deemed to constitute any admission of liability.

@license_1110_h3
#13. Multiple-Licensed Code

@license_1111_p
#Initial Developer may designate portions of the Covered Code as "Multiple-Licensed". "Multiple-Licensed" means that the Initial Developer permits you to utilize portions of the Covered Code under Your choice of this or the alternative licenses, if any, specified by the Initial Developer in the file described in <a href="#exhibit-a">Exhibit A</a> .

@license_1112_h3
#Exhibit A

@license_1113_h2
#Eclipse Public License - Version 1.0

@license_1114_p
#THE ACCOMPANYING PROGRAM IS PROVIDED UNDER THE TERMS OF THIS ECLIPSE PUBLIC LICENSE ("AGREEMENT"). ANY USE, REPRODUCTION OR DISTRIBUTION OF THE PROGRAM CONSTITUTES RECIPIENT'S ACCEPTANCE OF THIS AGREEMENT.

@license_1115_h3
#1. DEFINITIONS

@license_1116_p
#"Contribution" means:

@license_1117_p
#a) in the case of the initial Contributor, the initial code and documentation distributed under this Agreement, and

@license_1118_p
#b) in the case of each subsequent Contributor:

@license_1119_p
#i) changes to the Program, and

@license_1120_p
#ii) additions to the Program;

@license_1121_p
#where such changes and/or additions to the Program originate from and are distributed by that particular Contributor. A Contribution 'originates' from a Contributor if it was added to the Program by such Contributor itself or anyone acting on such Contributor's behalf. Contributions do not include additions to the Program which: (i) are separate modules of software distributed in conjunction with the Program under their own license agreement, and (ii) are not derivative works of the Program.

@license_1122_p
#"Contributor" means any person or entity that distributes the Program.

@license_1123_p
#"Licensed Patents " mean patent claims licensable by a Contributor which are necessarily infringed by the use or sale of its Contribution alone or when combined with the Program.

@license_1124_p
#"Program" means the Contributions distributed in accordance with this Agreement.

@license_1125_p
#"Recipient" means anyone who receives the Program under this Agreement, including all Contributors.

@license_1126_h3
#2. GRANT OF RIGHTS

@license_1127_p
#a) Subject to the terms of this Agreement, each Contributor hereby grants Recipient a non-exclusive, worldwide, royalty-free copyright license to reproduce, prepare derivative works of, publicly display, publicly perform, distribute and sublicense the Contribution of such Contributor, if any, and such derivative works, in source code and object code form.

@license_1128_p
#b) Subject to the terms of this Agreement, each Contributor hereby grants Recipient a non-exclusive, worldwide, royalty-free patent license under Licensed Patents to make, use, sell, offer to sell, import and otherwise transfer the Contribution of such Contributor, if any, in source code and object code form. This patent license shall apply to the combination of the Contribution and the Program if, at the time the Contribution is added by the Contributor, such addition of the Contribution causes such combination to be covered by the Licensed Patents. The patent license shall not apply to any other combinations which include the Contribution. No hardware per se is licensed hereunder.

@license_1129_p
#c) Recipient understands that although each Contributor grants the licenses to its Contributions set forth herein, no assurances are provided by any Contributor that the Program does not infringe the patent or other intellectual property rights of any other entity. Each Contributor disclaims any liability to Recipient for claims brought by any other entity based on infringement of intellectual property rights or otherwise. As a condition to exercising the rights and licenses granted hereunder, each Recipient hereby assumes sole responsibility to secure any other intellectual property rights needed, if any. For example, if a third party patent license is required to allow Recipient to distribute the Program, it is Recipient's responsibility to acquire that license before distributing the Program.

@license_1130_p
#d) Each Contributor represents that to its knowledge it has sufficient copyright rights in its Contribution, if any, to grant the copyright license set forth in this Agreement.

@license_1131_h3
#3. REQUIREMENTS

@license_1132_p
#A Contributor may choose to distribute the Program in object code form under its own license agreement, provided that:

@license_1133_p
#a) it complies with the terms and conditions of this Agreement; and

@license_1134_p
#b) its license agreement:

@license_1135_p
#i) effectively disclaims on behalf of all Contributors all warranties and conditions, express and implied, including warranties or conditions of title and non-infringement, and implied warranties or conditions of merchantability and fitness for a particular purpose;

@license_1136_p
#ii) effectively excludes on behalf of all Contributors all liability for damages, including direct, indirect, special, incidental and consequential damages, such as lost profits;

@license_1137_p
#iii) states that any provisions which differ from this Agreement are offered by that Contributor alone and not by any other party; and

@license_1138_p
#iv) states that source code for the Program is available from such Contributor, and informs licensees how to obtain it in a reasonable manner on or through a medium customarily used for software exchange.

@license_1139_p
#When the Program is made available in source code form:

@license_1140_p
#a) it must be made available under this Agreement; and

@license_1141_p
#b) a copy of this Agreement must be included with each copy of the Program.

@license_1142_p
#Contributors may not remove or alter any copyright notices contained within the Program.

@license_1143_p
#Each Contributor must identify itself as the originator of its Contribution, if any, in a manner that reasonably allows subsequent Recipients to identify the originator of the Contribution.

@license_1144_h3
#4. COMMERCIAL DISTRIBUTION

@license_1145_p
#Commercial distributors of software may accept certain responsibilities with respect to end users, business partners and the like. While this license is intended to facilitate the commercial use of the Program, the Contributor who includes the Program in a commercial product offering should do so in a manner which does not create potential liability for other Contributors. Therefore, if a Contributor includes the Program in a commercial product offering, such Contributor ("Commercial Contributor") hereby agrees to defend and indemnify every other Contributor ("Indemnified Contributor") against any losses, damages and costs (collectively "Losses") arising from claims, lawsuits and other legal actions brought by a third party against the Indemnified Contributor to the extent caused by the acts or omissions of such Commercial Contributor in connection with its distribution of the Program in a commercial product offering. The obligations in this section do not apply to any claims or Losses relating to any actual or alleged intellectual property infringement. In order to qualify, an Indemnified Contributor must: a) promptly notify the Commercial Contributor in writing of such claim, and b) allow the Commercial Contributor to control, and cooperate with the Commercial Contributor in, the defense and any related settlement negotiations. The Indemnified Contributor may participate in any such claim at its own expense.

@license_1146_p
#For example, a Contributor might include the Program in a commercial product offering, Product X. That Contributor is then a Commercial Contributor. If that Commercial Contributor then makes performance claims, or offers warranties related to Product X, those performance claims and warranties are such Commercial Contributor's responsibility alone. Under this section, the Commercial Contributor would have to defend claims against the other Contributors related to those performance claims and warranties, and if a court requires any other Contributor to pay any damages as a result, the Commercial Contributor must pay those damages.

@license_1147_h3
#5. NO WARRANTY

@license_1148_p
#EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, THE PROGRAM IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED INCLUDING, WITHOUT LIMITATION, ANY WARRANTIES OR CONDITIONS OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Each Recipient is solely responsible for determining the appropriateness of using and distributing the Program and assumes all risks associated with its exercise of rights under this Agreement, including but not limited to the risks and costs of program errors, compliance with applicable laws, damage to or loss of data, programs or equipment, and unavailability or interruption of operations.

@license_1149_h3
#6. DISCLAIMER OF LIABILITY

@license_1150_p
#EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, NEITHER RECIPIENT NOR ANY CONTRIBUTORS SHALL HAVE ANY LIABILITY FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING WITHOUT LIMITATION LOST PROFITS), HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OR DISTRIBUTION OF THE PROGRAM OR THE EXERCISE OF ANY RIGHTS GRANTED HEREUNDER, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

@license_1151_h3
#7. GENERAL

@license_1152_p
#If any provision of this Agreement is invalid or unenforceable under applicable law, it shall not affect the validity or enforceability of the remainder of the terms of this Agreement, and without further action by the parties hereto, such provision shall be reformed to the minimum extent necessary to make such provision valid and enforceable.

@license_1153_p
#If Recipient institutes patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Program itself (excluding combinations of the Program with other software or hardware) infringes such Recipient's patent(s), then such Recipient's rights granted under Section 2(b) shall terminate as of the date such litigation is filed.

@license_1154_p
#All Recipient's rights under this Agreement shall terminate if it fails to comply with any of the material terms or conditions of this Agreement and does not cure such failure in a reasonable period of time after becoming aware of such noncompliance. If all Recipient's rights under this Agreement terminate, Recipient agrees to cease use and distribution of the Program as soon as reasonably practicable. However, Recipient's obligations under this Agreement and any licenses granted by Recipient relating to the Program shall continue and survive.

@license_1155_p
#Everyone is permitted to copy and distribute copies of this Agreement, but in order to avoid inconsistency the Agreement is copyrighted and may only be modified in the following manner. The Agreement Steward reserves the right to publish new versions (including revisions) of this Agreement from time to time. No one other than the Agreement Steward has the right to modify this Agreement. The Eclipse Foundation is the initial Agreement Steward. The Eclipse Foundation may assign the responsibility to serve as the Agreement Steward to a suitable separate entity. Each new version of the Agreement will be given a distinguishing version number. The Program (including Contributions) may always be distributed subject to the version of the Agreement under which it was received. In addition, after a new version of the Agreement is published, Contributor may elect to distribute the Program (including its Contributions) under the new version. Except as expressly stated in Sections 2(a) and 2(b) above, Recipient receives no rights or licenses to the intellectual property of any Contributor under this Agreement, whether expressly, by implication, estoppel or otherwise. All rights in the Program not expressly granted under this Agreement are reserved.

@license_1156_p
#This Agreement is governed by the laws of the State of New York and the intellectual property laws of the United States of America. No party to this Agreement will bring a legal action under this Agreement more than one year after the cause of action arose. Each party waives its rights to a jury trial in any resulting litigation.

@links_1000_h1
#H2 In Use and Links

@links_1001_p
#Those are just a few links to products using or supporting H2. If you want to add a link, please send it to the support email address or post it in the group.

@links_1002_h2
#Books

@links_1003_a
#Seam In Action

@links_1004_h2
#Extensions

@links_1005_a
#Grails H2 Database Plugin

@links_1006_a
#h2osgi: OSGi for the H2 Database

@links_1007_a
#H2Sharp: ADO.NET interface for the H2 database engine

@links_1008_a
#H2 Spatial: spatial functions to H2 database

@links_1009_h2
#Blog Articles

@links_1010_a
#Efficient sorting and iteration on large databases (2009-06-15)

@links_1011_a
#Porting Flexive to the H2 Database (2008-12-05)

@links_1012_a
#H2 Database with GlassFish (2008-11-24)

@links_1013_a
#Using H2 Database with Glassfish and Toplink (2008-08-07)

@links_1014_a
#H2 Database - Performance Tracing (2008-04-30)

@links_1015_a
#Testing your JDBC data access layer with DBUnit and H2 (2007-09-18)

@links_1016_a
#Open Source Databases Comparison (2007-09-11)

@links_1017_a
#The Codist: The Open Source Frameworks I Use (2007-07-23)

@links_1018_a
#The Codist:  SQL Injections: How Not To Get Stuck (2007-05-08)

@links_1019_a
#One Man Band: (Helma + H2) == "to easy" (2007-03-11)

@links_1020_a
#David Coldrick's Weblog: New Version of H2 Database Released (2007-01-06)

@links_1021_a
#The Codist: Write Your Own Database, Again (2006-11-13)

@links_1022_h2
#Project Pages

@links_1023_a
#Ohloh

@links_1024_a
#Freshmeat Project Page

@links_1025_a
#Wikipedia

@links_1026_a
#Java Source Net

@links_1027_a
#Linux Package Manager

@links_1028_h2
#Database Frontends / Tools

@links_1029_a
#DB Solo

@links_1030_p
#SQL query tool.

@links_1031_a
#DbVisualizer

@links_1032_p
#Database tool.

@links_1033_a
#Execute Query

@links_1034_p
#Database utility written in Java.

@links_1035_a
#[fleXive]

@links_1036_p
#JavaEE 5 open source framework for the development of complex and evolving (web-)applications.

@links_1037_a
#HenPlus

@links_1038_p
#HenPlus is a SQL shell written in Java.

@links_1039_a
#RazorSQL

@links_1040_p
#An SQL query tool, database browser, SQL editor, and database administration tool.

@links_1041_a
#SQL Developer

@links_1042_p
#Universal Database Frontend.

@links_1043_a
#SQL Workbench/J

@links_1044_p
#Free DBMS-independent SQL tool.

@links_1045_a
#SQuirreL SQL Client

@links_1046_p
#Graphical tool to view the structure of a database, browse the data, issue SQL commands etc.

@links_1047_a
#SQuirreL DB Copy Plugin

@links_1048_p
#Tool to copy data from one database to another.

@links_1049_h2
#Products and Projects

@links_1050_a
#&AElig;jaks

@links_1051_p
#A server-side scripting environment to build AJAX enabled web applications.

@links_1052_a
#Axiom Stack

@links_1053_p
#A web framework that let's you write dynamic web applications with Zen-like simplicity.

@links_1054_a
#Apache Cayenne

@links_1055_p
#Open source persistence framework providing object-relational mapping (ORM) and remoting services.

@links_1056_a
#Apache Jackrabbit

@links_1057_p
#Open source implementation of the Java Content Repository API (JCR).

@links_1058_a
#Apache OpenJPA

@links_1059_p
#Open source implementation of the Java Persistence API (JPA).

@links_1060_a
#AppFuse

@links_1061_p
#Helps building web applications.

@links_1062_a
#BGBlitz

@links_1063_p
#The Swiss army knife of Backgammon.

@links_1064_a
#Blojsom

@links_1065_p
#Java-based multi-blog, multi-user software package (Mac OS X Weblog Server).

@links_1066_a
#Bonita

@links_1067_p
#Open source workflow solution for handing long-running, user-oriented processes providing out of the box workflow and business process management features.

@links_1068_a
#Bookmarks Portlet

@links_1069_p
#JSR 168 compliant bookmarks management portlet application.

@links_1070_a
#Claros inTouch

@links_1071_p
#Ajax communication suite with mail, addresses, notes, IM, and rss reader.

@links_1072_a
#CrashPlan PRO Server

@links_1073_p
#Easy and cross platform backup solution for business and service providers.

@links_1074_a
#DbUnit

@links_1075_p
#A JUnit extension (also usable with Ant) targeted for database-driven projects.

@links_1076_a
#Dinamica Framework

@links_1077_p
#Ajax/J2EE framework for RAD development (mainly oriented toward hispanic markets).

@links_1078_a
#Ebean ORM Persistence Layer

@links_1079_p
#Open source Java Object Relational Mapping tool.

@links_1080_a
#Eclipse CDO

@links_1081_p
#The CDO (Connected Data Objects) Model Repository is a distributed shared model framework for EMF models, and a fast server-based O/R mapping solution.

@links_1082_a
#Epictetus

@links_1083_p
#Free cross platform database tool.

@links_1084_a
#Fabric3

@links_1085_p
#Fabric3 is a project implementing a federated service network based on the Service Component Architecture specification (http://www.osoa.org).

@links_1086_a
#FIT4Data

@links_1087_p
#A testing framework for data management applications built on the Java implementation of FIT.

@links_1088_a
#Flux

@links_1089_p
#Java job scheduler, file transfer, workflow, and BPM.

@links_1090_a
#GNU Gluco Control

@links_1091_p
#Helps you to manage your diabetes.

@links_1092_a
#Golden T Studios

@links_1093_p
#Fun-to-play games with a simple interface.

@links_1094_a
#Group Session

@links_1095_p
#Open source web groupware.

@links_1096_a
#HA-JDBC

@links_1097_p
#High-Availability JDBC: A JDBC proxy that provides light-weight, transparent, fault tolerant clustering capability to any underlying JDBC driver.

@links_1098_a
#Harbor

@links_1099_p
#Pojo Application Server.

@links_1100_a
#Hibernate

@links_1101_p
#Relational persistence for idiomatic Java (O-R mapping tool).

@links_1102_a
#Hibicius

@links_1103_p
#Online Banking Client for the HBCI protocol.

@links_1104_a
#ImageMapper

@links_1105_p
#ImageMapper frees users from having to use file browsers to view their images. They get fast access to images and easy cataloguing of them via a user friendly interface.

@links_1106_a
#JAMWiki

@links_1107_p
#Java-based Wiki engine.

@links_1108_a
#Jala

@links_1109_p
#Open source collection of JavaScript modules.

@links_1110_a
#Java Simon

@links_1111_p
#Simple Monitoring API.

@links_1112_a
#JBoss jBPM

@links_1113_p
#A platform for executable process languages ranging from business process management (BPM) over workflow to service orchestration.

@links_1114_a
#JBoss Jopr

@links_1115_p
#An enterprise management solution for JBoss middleware projects and other application technologies.

@links_1116_a
#JGeocoder

@links_1117_p
#Free Java geocoder. Geocoding is the process of estimating a latitude and longitude for a given location.

@links_1118_a
#JGrass

@links_1119_p
#Java Geographic Resources Analysis Support System. Free, multi platform, open source GIS based on the GIS framework of uDig.

@links_1120_a
#Jena

@links_1121_p
#Java framework for building Semantic Web applications.

@links_1122_a
#JMatter

@links_1123_p
#Framework for constructing workgroup business applications based on the Naked Objects Architectural Pattern.

@links_1124_a
#JotBot

@links_1125_p
#Records your day at user defined intervals.

@links_1126_a
#JPOX

@links_1127_p
#Java persistent objects.

@links_1128_a
#Liftweb

@links_1129_p
#A Scala-based, secure, developer friendly web framework.

@links_1130_a
#LiquiBase

@links_1131_p
#A tool to manage database changes and refactorings.

@links_1132_a
#Luntbuild

@links_1133_p
#Build automation and management tool.

@links_1134_a
#localdb

@links_1135_p
#A tool that locates the full file path of the folder containing the database files.

@links_1136_a
#Magnolia

@links_1137_p
#Microarray Data Management and Export System for PFGRC (Pathogen Functional Genomics Resource Center) Microarrays.

@links_1138_a
#MiniConnectionPoolManager

@links_1139_p
#A lightweight standalone JDBC connection pool manager.

@links_1140_a
#Mr. Persister

@links_1141_p
#Simple, small and fast object relational mapping.

@links_1142_a
#Myna Application Server

@links_1143_p
#Java web app that provides dynamic web content and Java libraries access from JavaScript.

@links_1144_a
#MyTunesRss

@links_1145_p
#MyTunesRSS lets you listen to your music wherever you are.

@links_1146_a
#NCGC CurveFit

@links_1147_p
#From: NIH Chemical Genomics Center, National Institutes of Health, USA. An open source application in the life sciences research field. This application handles chemical structures and biological responses of thousands of compounds with the potential to handle million+ compounds. It utilizes an embedded H2 database to enable flexible query/retrieval of all data including advanced chemical substructure and similarity searching. The application highlights an automated curve fitting and classification algorithm that outperforms commercial packages in the field. Commercial alternatives are typically small desktop software that handle a few dose response curves at a time. A couple of commercial packages that do handle several thousand curves are very expensive tools (&gt;60k USD) that require manual curation of analysis by the user; require a license to Oracle; lack advanced query/retrieval; and the ability to handle chemical structures.

@links_1148_a
#Nuxeo

@links_1149_p
#Standards-based, open source platform for building ECM applications.

@links_1150_a
#nWire

@links_1151_p
#Eclipse plug-in which expedites Java development. It's main purpose is to help developers find code quicker and easily understand how it relates to the rest of the application, thus, understand the application structure.

@links_1152_a
#Ontology Works

@links_1153_p
#This company provides semantic technologies including deductive information repositories (the Ontology Works Knowledge Servers), semantic information fusion and semantic federation of legacy databases, ontology-based domain modeling, and management of the distributed enterprise.

@links_1154_a
#Ontoprise OntoBroker

@links_1155_p
#SemanticWeb-Middleware. It supports all W3C Semantic Web recommendations: OWL, RDF, RDFS, SPARQL, and F-Logic.

@links_1156_a
#Open Anzo

@links_1157_p
#Semantic Application Server.

@links_1158_a
#OpenGroove

@links_1159_p
#OpenGroove is a groupware program that allows users to synchronize data.

@links_1160_a
#OpenSocial Development Environment (OSDE)

@links_1161_p
#Development tool for OpenSocial application.

@links_1162_a
#Orion

@links_1163_p
#J2EE Application Server.

@links_1164_a
#P5H2

@links_1165_p
#A library for the <a href="http://www.processing.org">Processing</a> programming language and environment.

@links_1166_a
#Phase-6

@links_1167_p
#A computer based learning software.

@links_1168_a
#Pickle

@links_1169_p
#Pickle is a Java library containing classes for persistence, concurrency, and logging.

@links_1170_a
#Piman

@links_1171_p
#Water treatment projects data management.

@links_1172_a
#PolePosition

@links_1173_p
#Open source database benchmark.

@links_1174_a
#Poormans

@links_1175_p
#Very basic CMS running as a SWT application and generating static html pages.

@links_1176_a
#Railo

@links_1177_p
#Railo is an alternative engine for the Cold Fusion Markup Language, that compiles code programmed in CFML into Java bytecode and executes it on a servlet engine.

@links_1178_a
#Razuna

@links_1179_p
#Open source Digital Asset Management System with integrated Web Content Management.

@links_1180_a
#RIFE

@links_1181_p
#A full-stack web application framework with tools and APIs to implement most common web features.

@links_1182_a
#Rutema

@links_1183_p
#Rutema is a test execution and management tool for heterogeneous development environments written in Ruby.

@links_1184_a
#Sava

@links_1185_p
#Open-source web-based content management system.

@links_1186_a
#Scriptella

@links_1187_p
#ETL (Extract-Transform-Load) and script execution tool.

@links_1188_a
#Sesar

@links_1189_p
#Dependency Injection Container with Aspect Oriented Programming.

@links_1190_a
#SemmleCode

@links_1191_p
#Eclipse plugin to help you improve software quality.

@links_1192_a
#SeQuaLite

@links_1193_p
#A free, light-weight, java data access framework.

@links_1194_a
#ShapeLogic

@links_1195_p
#Toolkit for declarative programming, image processing and computer vision.

@links_1196_a
#Shellbook

@links_1197_p
#Desktop publishing application.

@links_1198_a
#Signsoft intelliBO

@links_1199_p
#Persistence middleware supporting the JDO specification.

@links_1200_a
#SimpleORM

@links_1201_p
#Simple Java Object Relational Mapping.

@links_1202_a
#SymmetricDS

@links_1203_p
#A web-enabled, database independent, data synchronization/replication software.

@links_1204_a
#SmartFoxServer

@links_1205_p
#Platform for developing multiuser applications and games with Macromedia Flash.

@links_1206_a
#Social Bookmarks Friend Finder

@links_1207_p
#A GUI application that allows you to find users with similar bookmarks to the user specified (for delicious.com).

@links_1208_a
#Springfuse

@links_1209_p
#Code generation For Spring, Spring MVC &amp; Hibernate.

@links_1210_a
#SQLOrm

@links_1211_p
#Java Object Relation Mapping.

@links_1212_a
#StorYBook

@links_1213_p
#A summary-based tool for novelist and script writers. It helps to keep the overview over the various traces a story has.

@links_1214_a
#StreamCruncher

@links_1215_p
#Event (stream) processing kernel.

@links_1216_a
#Tune Backup

@links_1217_p
#Easy-to-use backup solution for your iTunes library.

@links_1218_a
#weblica

@links_1219_p
#Desktop CMS.

@links_1220_a
#Web of Web

@links_1221_p
#Collaborative and realtime interactive media platform for the web.

@links_1222_a
#Werkzeugkasten

@links_1223_p
#Minimum Java Toolset.

@links_1224_a
#VPDA

@links_1225_p
#View providers driven applications is a Java based application framework for building applications composed from server components - view providers.

@links_1226_a
#Volunteer database

@links_1227_p
#A database front end to register volunteers, partnership and donation for a Non Profit organization.

@mainWeb_1000_h1
H2 データベース エンジン

@mainWeb_1001_p
#Welcome to H2, the Java SQL database. The main feature of H2 are:

@mainWeb_1002_li
#Very fast, open source, JDBC API

@mainWeb_1003_li
#Embedded and server modes; in-memory databases

@mainWeb_1004_li
#Browser based Console application

@mainWeb_1005_li
#Small footprint: around 1 MB jar file size

@mainWeb_1006_h3
ダウンロード

@mainWeb_1007_td
#Version 1.1.117 (2009-08-09):

@mainWeb_1008_a
#Windows Installer (4 MB)

@mainWeb_1009_a
#All Platforms (zip, 5 MB)

@mainWeb_1010_a
#All Downloads

@mainWeb_1011_td
&nbsp;&nbsp;&nbsp;

@mainWeb_1012_h3
サポート

@mainWeb_1013_a
Google グループ (English)

@mainWeb_1014_a
Google グループ (Japanese)

@mainWeb_1015_p
#For non-technical issues, use:

@mainWeb_1016_h3
特徴

@mainWeb_1017_th
H2

@mainWeb_1018_a
Derby

@mainWeb_1019_a
HSQLDB

@mainWeb_1020_a
MySQL

@mainWeb_1021_a
PostgreSQL

@mainWeb_1022_td
Pure Java

@mainWeb_1023_td
対応

@mainWeb_1024_td
対応

@mainWeb_1025_td
対応

@mainWeb_1026_td
非対応

@mainWeb_1027_td
非対応

@mainWeb_1028_td
#Memory Mode

@mainWeb_1029_td
対応

@mainWeb_1030_td
非対応

@mainWeb_1031_td
対応

@mainWeb_1032_td
非対応

@mainWeb_1033_td
非対応

@mainWeb_1034_td
トランザクション分離

@mainWeb_1035_td
対応

@mainWeb_1036_td
対応

@mainWeb_1037_td
非対応

@mainWeb_1038_td
対応

@mainWeb_1039_td
対応

@mainWeb_1040_td
コストベースオプティマイザ

@mainWeb_1041_td
対応

@mainWeb_1042_td
対応

@mainWeb_1043_td
非対応

@mainWeb_1044_td
対応

@mainWeb_1045_td
対応

@mainWeb_1046_td
暗号化データベース

@mainWeb_1047_td
対応

@mainWeb_1048_td
対応

@mainWeb_1049_td
非対応

@mainWeb_1050_td
非対応

@mainWeb_1051_td
非対応

@mainWeb_1052_td
ODBCドライバ

@mainWeb_1053_td
対応

@mainWeb_1054_td
非対応

@mainWeb_1055_td
非対応

@mainWeb_1056_td
対応

@mainWeb_1057_td
対応

@mainWeb_1058_td
フルテキストサーチ

@mainWeb_1059_td
対応

@mainWeb_1060_td
非対応

@mainWeb_1061_td
非対応

@mainWeb_1062_td
対応

@mainWeb_1063_td
対応

@mainWeb_1064_td
#Multi Version Concurrency

@mainWeb_1065_td
対応

@mainWeb_1066_td
非対応

@mainWeb_1067_td
非対応

@mainWeb_1068_td
非対応

@mainWeb_1069_td
対応

@mainWeb_1070_td
フットプリント (jar/dll size)

@mainWeb_1071_td
#~1 MB

@mainWeb_1072_td
#~2 MB

@mainWeb_1073_td
#~600 KB

@mainWeb_1074_td
#~4 MB

@mainWeb_1075_td
#~6 MB

@mainWeb_1076_p
#See also the <a href="features.html#comparison">detailed comparison</a> .

@mainWeb_1077_h3
ニュース

@mainWeb_1078_b
ニュースフィード:

@mainWeb_1079_a
#Full text (Atom)

@mainWeb_1080_p
#or <a href="http://www.h2database.com/html/newsfeed-rss.xml">Header only (RSS)</a> .

@mainWeb_1081_b
Email ニュースレター:

@mainWeb_1082_p
<a href="http://groups.google.com/group/h2database-news/subscribe"> H2 データベース ニュース</a> (Googleアカウントが必要です) に署名し、ニューリリースについての情報を入手して下さい。 あなたのemailアドレスはこのコンテンツでのみ使用されます。

@mainWeb_1083_td
&nbsp;

@mainWeb_1084_h3
寄稿する

@mainWeb_1085_p
#You can contribute to the development of H2 by sending feedback and bug    reports, or translate the H2 Console application (for details, start the H2 Console    and select Options / Translate).    To donate money, click on the PayPal button below. You will be listed as a supporter:

@main_1000_h1
H2 データベース エンジン

@main_1001_p
#Welcome to H2, the free Java SQL database engine.

@main_1002_a
クイックスタート

@main_1003_p
#Get a fast overview.

@main_1004_a
チュートリアル

@main_1005_p
Go through the samples.

@main_1006_a
特徴

@main_1007_p
See what this database can do and how to use these features.

@performance_1000_h1
パフォーマンス

@performance_1001_a
#Performance Comparison

@performance_1002_a
#PolePosition Benchmark

@performance_1003_a
#Application Profiling

@performance_1004_a
#Database Profiling

@performance_1005_a
#Database Performance Tuning

@performance_1006_a
#Fast Database Import

@performance_1007_h2
#Performance Comparison

@performance_1008_p
#In many cases H2 is faster than other (open source and not open source) database engines. Please note this is mostly a single connection benchmark run on one computer.

@performance_1009_h3
#Embedded

@performance_1010_th
#Test Case

@performance_1011_th
#Unit

@performance_1012_th
H2

@performance_1013_th
HSQLDB

@performance_1014_th
Derby

@performance_1015_td
#Simple: Init

@performance_1016_td
#ms

@performance_1017_td
#547

@performance_1018_td
#532

@performance_1019_td
#2594

@performance_1020_td
#Simple: Query (random)

@performance_1021_td
#ms

@performance_1022_td
#250

@performance_1023_td
#391

@performance_1024_td
#1515

@performance_1025_td
#Simple: Query (sequential)

@performance_1026_td
#ms

@performance_1027_td
#188

@performance_1028_td
#313

@performance_1029_td
#1406

@performance_1030_td
#Simple: Update (random)

@performance_1031_td
#ms

@performance_1032_td
#812

@performance_1033_td
#1750

@performance_1034_td
#17704

@performance_1035_td
#Simple: Delete (sequential)

@performance_1036_td
#ms

@performance_1037_td
#203

@performance_1038_td
#250

@performance_1039_td
#8843

@performance_1040_td
#Simple: Memory Usage

@performance_1041_td
#MB

@performance_1042_td
#7

@performance_1043_td
#11

@performance_1044_td
#11

@performance_1045_td
#BenchA: Init

@performance_1046_td
#ms

@performance_1047_td
#578

@performance_1048_td
#719

@performance_1049_td
#3328

@performance_1050_td
#BenchA: Transactions

@performance_1051_td
#ms

@performance_1052_td
#3047

@performance_1053_td
#2406

@performance_1054_td
#12907

@performance_1055_td
#BenchA: Memory Usage

@performance_1056_td
#MB

@performance_1057_td
#10

@performance_1058_td
#15

@performance_1059_td
#10

@performance_1060_td
#BenchB: Init

@performance_1061_td
#ms

@performance_1062_td
#2141

@performance_1063_td
#2406

@performance_1064_td
#11562

@performance_1065_td
#BenchB: Transactions

@performance_1066_td
#ms

@performance_1067_td
#1125

@performance_1068_td
#1375

@performance_1069_td
#3625

@performance_1070_td
#BenchB: Memory Usage

@performance_1071_td
#MB

@performance_1072_td
#9

@performance_1073_td
#11

@performance_1074_td
#8

@performance_1075_td
#BenchC: Init

@performance_1076_td
#ms

@performance_1077_td
#688

@performance_1078_td
#594

@performance_1079_td
#4500

@performance_1080_td
#BenchC: Transactions

@performance_1081_td
#ms

@performance_1082_td
#1906

@performance_1083_td
#64062

@performance_1084_td
#6047

@performance_1085_td
#BenchC: Memory Usage

@performance_1086_td
#MB

@performance_1087_td
#11

@performance_1088_td
#17

@performance_1089_td
#11

@performance_1090_td
#Executed statements

@performance_1091_td
##

@performance_1092_td
#322929

@performance_1093_td
#322929

@performance_1094_td
#322929

@performance_1095_td
#Total time

@performance_1096_td
#ms

@performance_1097_td
#11485

@performance_1098_td
#74798

@performance_1099_td
#74031

@performance_1100_td
#Statements per second

@performance_1101_td
##

@performance_1102_td
#28117

@performance_1103_td
#4317

@performance_1104_td
#4362

@performance_1105_h3
#Client-Server

@performance_1106_th
#Test Case

@performance_1107_th
#Unit

@performance_1108_th
H2

@performance_1109_th
HSQLDB

@performance_1110_th
Derby

@performance_1111_th
PostgreSQL

@performance_1112_th
MySQL

@performance_1113_td
#Simple: Init

@performance_1114_td
#ms

@performance_1115_td
#2782

@performance_1116_td
#2656

@performance_1117_td
#5625

@performance_1118_td
#4563

@performance_1119_td
#3484

@performance_1120_td
#Simple: Query (random)

@performance_1121_td
#ms

@performance_1122_td
#3093

@performance_1123_td
#2703

@performance_1124_td
#6688

@performance_1125_td
#4812

@performance_1126_td
#3860

@performance_1127_td
#Simple: Query (sequential)

@performance_1128_td
#ms

@performance_1129_td
#2969

@performance_1130_td
#2594

@performance_1131_td
#6437

@performance_1132_td
#4719

@performance_1133_td
#3625

@performance_1134_td
#Simple: Update (random)

@performance_1135_td
#ms

@performance_1136_td
#2969

@performance_1137_td
#3531

@performance_1138_td
#18250

@performance_1139_td
#5953

@performance_1140_td
#5125

@performance_1141_td
#Simple: Delete (sequential)

@performance_1142_td
#ms

@performance_1143_td
#1047

@performance_1144_td
#1250

@performance_1145_td
#6875

@performance_1146_td
#2485

@performance_1147_td
#2390

@performance_1148_td
#Simple: Memory Usage

@performance_1149_td
#MB

@performance_1150_td
#7

@performance_1151_td
#11

@performance_1152_td
#14

@performance_1153_td
#0

@performance_1154_td
#0

@performance_1155_td
#BenchA: Init

@performance_1156_td
#ms

@performance_1157_td
#2250

@performance_1158_td
#2453

@performance_1159_td
#6031

@performance_1160_td
#4328

@performance_1161_td
#3625

@performance_1162_td
#BenchA: Transactions

@performance_1163_td
#ms

@performance_1164_td
#10250

@performance_1165_td
#9016

@performance_1166_td
#21484

@performance_1167_td
#15609

@performance_1168_td
#11172

@performance_1169_td
#BenchA: Memory Usage

@performance_1170_td
#MB

@performance_1171_td
#10

@performance_1172_td
#15

@performance_1173_td
#10

@performance_1174_td
#0

@performance_1175_td
#1

@performance_1176_td
#BenchB: Init

@performance_1177_td
#ms

@performance_1178_td
#9500

@performance_1179_td
#10672

@performance_1180_td
#22609

@performance_1181_td
#19609

@performance_1182_td
#13406

@performance_1183_td
#BenchB: Transactions

@performance_1184_td
#ms

@performance_1185_td
#2734

@performance_1186_td
#2656

@performance_1187_td
#3875

@performance_1188_td
#4688

@performance_1189_td
#2531

@performance_1190_td
#BenchB: Memory Usage

@performance_1191_td
#MB

@performance_1192_td
#10

@performance_1193_td
#11

@performance_1194_td
#11

@performance_1195_td
#1

@performance_1196_td
#1

@performance_1197_td
#BenchC: Init

@performance_1198_td
#ms

@performance_1199_td
#1860

@performance_1200_td
#1484

@performance_1201_td
#6890

@performance_1202_td
#2219

@performance_1203_td
#3438

@performance_1204_td
#BenchC: Transactions

@performance_1205_td
#ms

@performance_1206_td
#9046

@performance_1207_td
#63266

@performance_1208_td
#18641

@performance_1209_td
#11703

@performance_1210_td
#7421

@performance_1211_td
#BenchC: Memory Usage

@performance_1212_td
#MB

@performance_1213_td
#12

@performance_1214_td
#17

@performance_1215_td
#13

@performance_1216_td
#0

@performance_1217_td
#1

@performance_1218_td
#Executed statements

@performance_1219_td
##

@performance_1220_td
#322929

@performance_1221_td
#322929

@performance_1222_td
#322929

@performance_1223_td
#322929

@performance_1224_td
#322929

@performance_1225_td
#Total time

@performance_1226_td
#ms

@performance_1227_td
#48500

@performance_1228_td
#102281

@performance_1229_td
#123405

@performance_1230_td
#80688

@performance_1231_td
#60077

@performance_1232_td
#Statements per second

@performance_1233_td
##

@performance_1234_td
#6658

@performance_1235_td
#3157

@performance_1236_td
#2616

@performance_1237_td
#4002

@performance_1238_td
#5375

@performance_1239_h3
#Benchmark Results and Comments

@performance_1240_h4
H2

@performance_1241_p
#Version 1.1.114 (2009-06-01) was used for the test. For simpler operations, the performance of H2 is about the same as for HSQLDB. For more complex queries, the query optimizer is very important. However H2 is not very fast in every case, certain kind of queries may still be slow. One situation where is H2 is slow is large result sets, because they are buffered to disk if more than a certain number of records are returned. The advantage of buffering is, there is no limit on the result set size. The open/close time is almost fixed, because of the file locking protocol: the engine waits some time after opening a database to ensure the database files are not opened by another process.

@performance_1242_h4
HSQLDB

@performance_1243_p
#Version 1.8.0.10 was used for the test. Cached tables are used in this test (hsqldb.default_table_type=cached), and the write delay is 1 second (SET WRITE_DELAY 1). HSQLDB is fast when using simple operations. HSQLDB is very slow in the last test (BenchC: Transactions), probably because is has a bad query optimizer. One query where HSQLDB is slow is a two-table join:

@performance_1244_p
#The PolePosition benchmark also shows that the query optimizer does not do a very good job for some queries. Another disadvantage of HSQLDB is the slow startup / shutdown time (currently not listed) when using bigger databases. The reason is, a backup of the whole data is made whenever the database is opened or closed.

@performance_1245_h4
Derby

@performance_1246_p
#Version 10.4.2.0 was used for the test. Derby is clearly the slowest embedded database in this test. This seems to be a structural problem, because all operations are really slow. It will be hard for the developers of Derby to improve the performance to a reasonable level. A few problems have been identified: leaving autocommit on is a problem for Derby. If it is switched off during the whole test, the results are about 20% better for Derby. Derby supports a testing mode (system property derby.system.durability=test) where durability is disabled. According to the documentation, this setting should be used for testing only, as the database may not recover after a crash. Enabling this setting improves performance by a factor of 2.6 (embedded mode) or 1.4 (server mode). Even if enabled, Derby is still less than half as fast as H2 in default mode.

@performance_1247_h4
PostgreSQL

@performance_1248_p
#Version 8.3.7 was used for the test. The following options where changed in postgresql.conf: fsync = off, commit_delay = 1000. PostgreSQL is run in server mode. It looks like the base performance is slower than MySQL, the reason could be the network layer. The memory usage number is incorrect, because only the memory usage of the JDBC driver is measured.

@performance_1249_h4
MySQL

@performance_1250_p
#Version 5.1.34-community was used for the test. MySQL was run with the InnoDB backend. The setting innodb_flush_log_at_trx_commit (found in the my.ini file) was set to 0. Otherwise (and by default), MySQL is really slow (around 140 statements per second in this test) because it tries to flush the data to disk for each commit. For small transactions (when autocommit is on) this is really slow. But many use cases use small or relatively small transactions. Too bad this setting is not listed in the configuration wizard, and it always overwritten when using the wizard. You need to change this setting manually in the file my.ini, and then restart the service. The memory usage number is incorrect, because only the memory usage of the JDBC driver is measured.

@performance_1251_h4
#Firebird

@performance_1252_p
#Firebird 1.5 (default installation) was tested, but the results are not published currently. It is possible to run the performance test with the Firebird database, and any information on how to configure Firebird for higher performance are welcome.

@performance_1253_h4
#Why Oracle / MS SQL Server / DB2 are Not Listed

@performance_1254_p
#The license of these databases does not allow to publish benchmark results. This doesn't mean that they are fast. They are in fact quite slow, and need a lot of memory. But you will need to test this yourself. SQLite was not tested because the JDBC driver doesn't support transactions.

@performance_1255_h3
#About this Benchmark

@performance_1256_h4
#How to Run

@performance_1257_p
#This test was executed as follows:

@performance_1258_h4
#Separate Process per Database

@performance_1259_p
#For each database, a new process is started, to ensure the previous test does not impact the current test.

@performance_1260_h4
#Number of Connections

@performance_1261_p
#This is mostly a single-connection benchmark. BenchB uses multiple connections; the other tests use one connection.

@performance_1262_h4
#Real-World Tests

@performance_1263_p
#Good benchmarks emulate real-world use cases. This benchmark includes 4 test cases: BenchSimple uses one table and many small updates / deletes. BenchA is similar to the TPC-A test, but single connection / single threaded (see also: www.tpc.org). BenchB is similar to the TPC-B test, using multiple connections (one thread per connection). BenchC is similar to the TPC-C test, but single connection / single threaded.

@performance_1264_h4
#Comparing Embedded with Server Databases

@performance_1265_p
#This is mainly a benchmark for embedded databases (where the application runs in the same virtual machine as the database engine). However MySQL and PostgreSQL are not Java databases and cannot be embedded into a Java application. For the Java databases, both embedded and server modes are tested.

@performance_1266_h4
#Test Platform

@performance_1267_p
#This test is run on Windows XP with the virus scanner switched off. The VM used is Sun JDK 1.5.

@performance_1268_h4
#Multiple Runs

@performance_1269_p
#When a Java benchmark is run first, the code is not fully compiled and therefore runs slower than when running multiple times. A benchmark should always run the same test multiple times and ignore the first run(s). This benchmark runs three times, but only the last run is measured.

@performance_1270_h4
#Memory Usage

@performance_1271_p
#It is not enough to measure the time taken, the memory usage is important as well. Performance can be improved by using a bigger cache, but the amount of memory is limited. HSQLDB tables are kept fully in memory by default; this benchmark uses 'disk based' tables for all databases. Unfortunately, it is not so easy to calculate the memory usage of PostgreSQL and MySQL, because they run in a different process than the test. This benchmark currently does not print memory usage of those databases.

@performance_1272_h4
#Delayed Operations

@performance_1273_p
#Some databases delay some operations (for example flushing the buffers) until after the benchmark is run. This benchmark waits between each database tested, and each database runs in a different process (sequentially).

@performance_1274_h4
#Transaction Commit / Durability

@performance_1275_p
#Durability means transaction committed to the database will not be lost. Some databases (for example MySQL) try to enforce this by default by calling fsync() to flush the buffers, but most hard drives don't actually flush all data. Calling fsync() slows down transaction commit a lot, but doesn't always make data durable. When comparing the results, it is important to think about the effect. Many database suggest to 'batch' operations when possible. This benchmark switches off autocommit when loading the data, and calls commit after each 1000 inserts. However many applications need 'short' transactions at runtime (a commit after each update). This benchmark commits after each update / delete in the simple benchmark, and after each business transaction in the other benchmarks. For databases that support delayed commits, a delay of one second is used.

@performance_1276_h4
#Using Prepared Statements

@performance_1277_p
#Wherever possible, the test cases use prepared statements.

@performance_1278_h4
#Currently Not Tested: Startup Time

@performance_1279_p
#The startup time of a database engine is important as well for embedded use. This time is not measured currently. Also, not tested is the time used to create a database and open an existing database. Here, one (wrapper) connection is opened at the start, and for each step a new connection is opened and then closed.

@performance_1280_h2
#PolePosition Benchmark

@performance_1281_p
#The PolePosition is an open source benchmark. The algorithms are all quite simple. It was developed / sponsored by db4o.

@performance_1282_th
#Test Case

@performance_1283_th
#Unit

@performance_1284_th
H2

@performance_1285_th
HSQLDB

@performance_1286_th
MySQL

@performance_1287_td
#Melbourne write

@performance_1288_td
#ms

@performance_1289_td
#369

@performance_1290_td
#249

@performance_1291_td
#2022

@performance_1292_td
#Melbourne read

@performance_1293_td
#ms

@performance_1294_td
#47

@performance_1295_td
#49

@performance_1296_td
#93

@performance_1297_td
#Melbourne read_hot

@performance_1298_td
#ms

@performance_1299_td
#24

@performance_1300_td
#43

@performance_1301_td
#95

@performance_1302_td
#Melbourne delete

@performance_1303_td
#ms

@performance_1304_td
#147

@performance_1305_td
#133

@performance_1306_td
#176

@performance_1307_td
#Sepang write

@performance_1308_td
#ms

@performance_1309_td
#965

@performance_1310_td
#1201

@performance_1311_td
#3213

@performance_1312_td
#Sepang read

@performance_1313_td
#ms

@performance_1314_td
#765

@performance_1315_td
#948

@performance_1316_td
#3455

@performance_1317_td
#Sepang read_hot

@performance_1318_td
#ms

@performance_1319_td
#789

@performance_1320_td
#859

@performance_1321_td
#3563

@performance_1322_td
#Sepang delete

@performance_1323_td
#ms

@performance_1324_td
#1384

@performance_1325_td
#1596

@performance_1326_td
#6214

@performance_1327_td
#Bahrain write

@performance_1328_td
#ms

@performance_1329_td
#1186

@performance_1330_td
#1387

@performance_1331_td
#6904

@performance_1332_td
#Bahrain query_indexed_string

@performance_1333_td
#ms

@performance_1334_td
#336

@performance_1335_td
#170

@performance_1336_td
#693

@performance_1337_td
#Bahrain query_string

@performance_1338_td
#ms

@performance_1339_td
#18064

@performance_1340_td
#39703

@performance_1341_td
#41243

@performance_1342_td
#Bahrain query_indexed_int

@performance_1343_td
#ms

@performance_1344_td
#104

@performance_1345_td
#134

@performance_1346_td
#678

@performance_1347_td
#Bahrain update

@performance_1348_td
#ms

@performance_1349_td
#191

@performance_1350_td
#87

@performance_1351_td
#159

@performance_1352_td
#Bahrain delete

@performance_1353_td
#ms

@performance_1354_td
#1215

@performance_1355_td
#729

@performance_1356_td
#6812

@performance_1357_td
#Imola retrieve

@performance_1358_td
#ms

@performance_1359_td
#198

@performance_1360_td
#194

@performance_1361_td
#4036

@performance_1362_td
#Barcelona write

@performance_1363_td
#ms

@performance_1364_td
#413

@performance_1365_td
#832

@performance_1366_td
#3191

@performance_1367_td
#Barcelona read

@performance_1368_td
#ms

@performance_1369_td
#119

@performance_1370_td
#160

@performance_1371_td
#1177

@performance_1372_td
#Barcelona query

@performance_1373_td
#ms

@performance_1374_td
#20

@performance_1375_td
#5169

@performance_1376_td
#101

@performance_1377_td
#Barcelona delete

@performance_1378_td
#ms

@performance_1379_td
#388

@performance_1380_td
#319

@performance_1381_td
#3287

@performance_1382_td
#Total

@performance_1383_td
#ms

@performance_1384_td
#26724

@performance_1385_td
#53962

@performance_1386_td
#87112

@performance_1387_p
#There are a few problems with the PolePosition test:

@performance_1388_li
#HSQLDB uses in-memory tables by default while H2 uses persistent tables. The HSQLDB version included in PolePosition does not support changing this, so you need to replace poleposition-0.20/lib/hsqldb.jar with a newer version (for example hsqldb-1.8.0.7.jar), and then use the setting hsqldb.connecturl=jdbc:hsqldb:file:data/hsqldb/dbbench2;hsqldb.default_table_type=cached;sql.enforce_size=true in Jdbc.properties.

@performance_1389_li
#HSQLDB keeps the database open between tests, while H2 closes the database (losing all the cache). To change that, use the database URL jdbc:h2:file:data/h2/dbbench;DB_CLOSE_DELAY=-1

@performance_1390_li
#The amount of cache memory is quite important, specially for the PolePosition test. Unfortunately, the PolePosition test does not take this into account.

@performance_1391_h2
#Application Profiling

@performance_1392_h3
#Analyze First

@performance_1393_p
#Before trying to optimize performance, it is important to understand where the problem is (what part of the application is slow). Blind optimization or optimization based on guesses should be avoided, because usually it is not an efficient strategy. There are various ways to analyze an application. Sometimes two implementations can be compared using System.currentTimeMillis(). But this does not work for complex applications with many modules, and for memory problems.

@performance_1394_p
#A good tool to measure both memory usage and performance is the <a href="http://www.yourkit.com">YourKit Java Profiler</a> .

@performance_1395_p
#A simple way to profile an application is to use the built-in profiling tool of java. Example:

@performance_1396_p
#Unfortunately, it is only possible to profile the application from start to end. Another solution is to create a number of full thread dumps. To do that, first run <code>jps -l</code> to get the process id, and then run <code>jstack &lt;pid&gt;</code> or <code>kill -QUIT &lt;pid&gt;</code> (Linux) or press Ctrl+C (Windows).

@performance_1397_h2
#Database Profiling

@performance_1398_p
#The ConvertTraceFile tool generates SQL statement statistics at the end of the SQL script file. The format used is similar to the profiling data generated when using java -Xrunhprof. As an example, execute the the following script using the H2 Console:

@performance_1399_p
#Now convert the .trace.db file using the ConvertTraceFile tool:

@performance_1400_p
#The generated file <code>test.sql</code> will contain the SQL statements as well as the following profiling data (results vary):

@performance_1401_h2
#Database Performance Tuning

@performance_1402_h3
#Use a Modern JVM

@performance_1403_p
#Newer JVMs are faster. Upgrading to the latest version of your JVM can provide a "free" boost to performance. On the Windows platform, switching from the default Client JVM to the Server JVM using the <code>-server</code> command-line option improves performance at the cost of a slight increase in start-up time.

@performance_1404_h3
#Virus Scanners

@performance_1405_p
#Some virus scanners scan files every time they are accessed. It is very important for performance that database files are not scanned for viruses. The database engine does never interprets the data stored in the files as programs, that means even if somebody would store a virus in a database file, this would be harmless (when the virus does not run, it cannot spread). Some virus scanners allow to exclude files by suffix. Make sure files ending with .db are not scanned.

@performance_1406_h3
トレースオプションを使用する

@performance_1407_p
#If the main performance hot spots are in the database engine, in many cases the performance can be optimized by creating additional indexes, or changing the schema. Sometimes the application does not directly generate the SQL statements, for example if an O/R mapping tool is used. To view the SQL statements and JDBC API calls, you can use the trace options. For more information, see <a href="features.html#trace_options">Using the Trace Options</a> .

@performance_1408_h3
#Index Usage

@performance_1409_p
#This database uses indexes to improve the performance of SELECT, UPDATE and DELETE statements. If a column is used in the WHERE clause of a query, and if an index exists on this column, then the index can be used. Multi-column indexes are used if all or the first columns of the index are used. Both equality lookup and range scans are supported. Indexes are used to order result sets, but only if the condition uses the same index or no index at all. The results are sorted in memory if required. Indexes are created automatically for primary key and unique constraints. Indexes are also created for foreign key constraints, if required. For other columns, indexes need to be created manually using the CREATE INDEX statement.

@performance_1410_h3
#Optimizer

@performance_1411_p
#This database uses a cost based optimizer. For simple and queries and queries with medium complexity (less than 7 tables in the join), the expected cost (running time) of all possible plans is calculated, and the plan with the lowest cost is used. For more complex queries, the algorithm first tries all possible combinations for the first few tables, and the remaining tables added using a greedy algorithm (this works well for most joins). Afterwards a genetic algorithm is used to test at most 2000 distinct plans. Only left-deep plans are evaluated.

@performance_1412_h3
#Expression Optimization

@performance_1413_p
#After the statement is parsed, all expressions are simplified automatically if possible. Operations are evaluated only once if all parameters are constant. Functions are also optimized, but only if the function is constant (always returns the same result for the same parameter values). If the WHERE clause is always false, then the table is not accessed at all.

@performance_1414_h3
#COUNT(*) Optimization

@performance_1415_p
#If the query only counts all rows of a table, then the data is not accessed. However, this is only possible if no WHERE clause is used, that means it only works for queries of the form SELECT COUNT(*) FROM table.

@performance_1416_h3
#Updating Optimizer Statistics / Column Selectivity

@performance_1417_p
#When executing a query, at most one index per joined table can be used. If the same table is joined multiple times, for each join only one index is used. Example: for the query SELECT * FROM TEST T1, TEST T2 WHERE T1.NAME='A' AND T2.ID=T1.ID, two index can be used, in this case the index on NAME for T1 and the index on ID for T2.

@performance_1418_p
#If a table has multiple indexes, sometimes more than one index could be used. Example: if there is a table TEST(ID, NAME, FIRSTNAME) and an index on each column, then two indexes could be used for the query SELECT * FROM TEST WHERE NAME='A' AND FIRSTNAME='B', the index on NAME or the index on FIRSTNAME. It is not possible to use both indexes at the same time. Which index is used depends on the selectivity of the column. The selectivity describes the 'uniqueness' of values in a column. A selectivity of 100 means each value appears only once, and a selectivity of 1 means the same value appears in many or most rows. For the query above, the index on NAME should be used if the table contains more distinct names than first names.

@performance_1419_p
#The SQL statement ANALYZE can be used to automatically estimate the selectivity of the columns in the tables. This command should be run from time to time to improve the query plans generated by the optimizer.

@performance_1420_h3
#In-Memory (Hash) Indexes

@performance_1421_p
#Using in-memory indexes, specially in-memory hash indexes, can speed up queries and data manipulation.

@performance_1422_p
#In-memory indexes are automatically used for in-memory databases, but can also be created for persistent databases using <code>CREATE MEMORY TABLE</code> . In many cases, the rows itself will also be kept in-memory. Please note this may cause memory problems for large tables.

@performance_1423_p
#In-memory hash indexes are backed by a hash table and are usually faster than regular indexes. However, hash indexes only supports direct lookup (WHERE ID = ?) but not range scan (WHERE ID &lt; ?). To use hash indexes, use HASH as in: <code>CREATE UNIQUE HASH INDEX</code> and <code>CREATE TABLE ...(ID INT PRIMARY KEY HASH,...)</code> .

@performance_1424_h3
#Optimization Examples

@performance_1425_p
#See <code>src/test/org/h2/samples/optimizations.sql</code> for a few examples of queries that benefit from special optimizations built into the database.

@performance_1426_h3
#Cache Size and Type

@performance_1427_p
#By default the cache size of H2 is quite small. Consider using a larger cache size, or enable the second level soft reference cache. See also <a href="features.html#cache_settings">Cache Settings</a> .

@performance_1428_h3
データ型

@performance_1429_p
#Each data type has different storage and performance characteristics:

@performance_1430_li
#The DECIMAL/NUMERIC type is slower and requires more storage than the REAL and DOUBLE types.

@performance_1431_li
#Text types are slower to read, write, and compare than numeric types and generally require more storage.

@performance_1432_li
#See <a href="advanced.html#large_objects">Large Objects</a> for information on BINARY vs. BLOB and VARCHAR vs. CLOB performance.

@performance_1433_li
#Parsing and formatting takes longer for the TIME, DATE, and TIMESTAMP types than the numeric types.

@performance_1434_li
#SMALLINT/TINYINT/BOOLEAN are not significantly smaller or faster to work with than INTEGER in most modes.

@performance_1435_h2
#Fast Database Import

@performance_1436_p
#To speed up large imports, consider using the following options temporarily:

@performance_1437_li
#SET CACHE_SIZE (a large cache is faster)

@performance_1438_li
#SET LOCK_MODE 0 (disable locking)

@performance_1439_li
#SET LOG 0 (disable the transaction log)

@performance_1440_li
#SET UNDO_LOG 0 (disable the session undo log)

@performance_1441_p
#These options can be set in the database URL: <code>jdbc:h2:~/test;CACHE_SIZE=65536;LOCK_MODE=0;LOG=0;UNDO_LOG=0</code> . Most of those options are not recommended for regular use, that means you need to reset them after use.

@quickstart_1000_h1
クイックスタート

@quickstart_1001_a
アプリケーションのエンベッドH2

@quickstart_1002_a
H2 コンソール アプリケーション

@quickstart_1003_h2
アプリケーションのエンベッドH2

@quickstart_1004_p
このデータベースはエンベッドモード、またはサーバーモードで使用可能です。エンベッドモードで使用する場合、以下を行う必要があります:

@quickstart_1005_li
#Add the <code>h2*.jar</code> to the classpath (H2 does not have any dependencies)

@quickstart_1006_li
JDBCドライバークラスを使用する: <code>org.h2.Driver</code>

@quickstart_1007_li
データベースURL <code>jdbc:h2:~/test</code> ユーザーホームディレクトリ内の "test" でデータベースを開く

@quickstart_1008_li
#A new database is automatically created

@quickstart_1009_h2
H2 コンソール アプリケーション

@quickstart_1010_p
このコンソールはブラウザインターフェースを使ってSQL データベースにアクセスします。

@quickstart_1011_p
Windows XPをご使用でなかったり、期待通りに機能しない場合は、<a href="tutorial.html">チュートリアル</a>内の詳細説明をご覧下さい。

@quickstart_1012_h3
手順

@quickstart_1013_h4
インストール

@quickstart_1014_p
Windows インストーラーを使用してソフトウェアをインストールしましょう (まだインストールされていない場合)。

@quickstart_1015_h4
コンソールを起動する

@quickstart_1016_p
#Click [Start], [All Programs], [H2], and [H2 Console (Command Line)]:

@quickstart_1017_p
コンソールウィンドウが 開きます:

@quickstart_1018_p
#Also, a new browser page should open with the URL <a href="http://localhost:8082">http://localhost:8082</a> . You may get a security warning from the firewall. If you don't want other computers in the network to access the database on your machine, you can let the firewall block these connections. Only local connections are required at this time.

@quickstart_1019_h4
ログイン

@quickstart_1020_p
#Select [Generic H2] and click [Connect]:

@quickstart_1021_p
ログインされました。

@quickstart_1022_h4
サンプル

@quickstart_1023_p
#Click on the [Sample SQL Script]:

@quickstart_1024_p
SQLコマンドがコマンドエリアに表示されます。

@quickstart_1025_h4
実行する

@quickstart_1026_p
#Click [Run]

@quickstart_1027_p
左側のデータベースアイコンの下に、 新しいテーブル TEST が追加されます。動作とステートメントの結果は、スクリプトの下に表示されます。

@quickstart_1028_h4
切断

@quickstart_1029_p
#Click on [Disconnect]:

@quickstart_1030_p
#to close the connection.

@quickstart_1031_h4
終了

@quickstart_1032_p
コンソールウィンドウを閉じます。詳細は<a href="tutorial.html">チュートリアル</a>をご覧下さい。

@roadmap_1000_h1
ロードマップ

@roadmap_1001_p
#New (feature) requests will usually be added at the very end of the list. The priority is increased for important and popular requests. Of course, patches are always welcome, but are not always applied as is. See also <a href="build.html#providing_patches">Providing Patches</a> .

@roadmap_1002_h2
#Version 1.2

@roadmap_1003_li
#Enable system property h2.optimizeInList by default

@roadmap_1004_h2
#Priority 1

@roadmap_1005_li
#Bugfixes

@roadmap_1006_li
#Page store: new storage mechanism

@roadmap_1007_li
#[Requires page store] Support large updates (use the transaction log for rollback).

@roadmap_1008_li
#[Requires page store] Shutdown compact

@roadmap_1009_li
#More tests with MULTI_THREADED=1

@roadmap_1010_li
#RECOVER=1 should automatically recover, =2 should run the recovery tool if required

@roadmap_1011_li
#Optimization: result set caching (like MySQL)

@roadmap_1012_li
#Server side cursors

@roadmap_1013_h2
#Priority 2

@roadmap_1014_li
#Improve test code coverage

@roadmap_1015_li
#Procedural language / script language (Java, Javascript)

@roadmap_1016_li
#Fulltext search: support streaming CLOB data.

@roadmap_1017_li
#Enable warning for 'Local variable declaration hides another field or variable'.

@roadmap_1018_li
#Test multi-threaded in-memory db access

@roadmap_1019_li
#MVCC: select for update should only lock the selected rows.

@roadmap_1020_li
#Option to shutdown all the running servers (on the same VM).

@roadmap_1021_li
#[Requires page store] Index organized tables CREATE TABLE...(...) ORGANIZATION INDEX

@roadmap_1022_li
#[Requires page store] Better space re-use in the files after deleting data: shrink the data file without closing the database (if the end of the file is empty)

@roadmap_1023_li
#Full outer joins

@roadmap_1024_li
#Implement INSTEAD OF trigger (for views, tables, metadata tables).

@roadmap_1025_li
#Support triggers for INFORMATION_SCHEMA tables (to better support PostgreSQL catalog: rebuild after creating new tables)

@roadmap_1026_li
#Use triggers for metadata tables; use for PostgreSQL catalog

@roadmap_1027_li
#Maven: deploy / upload h2..-sources.jar and javadocs as well.

@roadmap_1028_li
#Test very large databases and LOBs (up to 256 GB)

@roadmap_1029_li
#Support hints for the optimizer (which index to use, enforce the join order).

@roadmap_1030_li
#Change LOB mechanism (less files, keep index of lob files, point to files and row, delete unused files earlier, maybe bundle files into a tar file)

@roadmap_1031_li
#Clustering: recovery needs to becomes fully automatic. Global write lock feature.

@roadmap_1032_li
#Support mixed clustering mode (one embedded, others in server mode)

@roadmap_1033_li
#Sequence: add features [NO] MINVALUE, MAXVALUE, CYCLE

@roadmap_1034_li
#Deferred integrity checking (DEFERRABLE INITIALLY DEFERRED)

@roadmap_1035_li
#Groovy Stored Procedures (http://groovy.codehaus.org/Groovy+SQL)

@roadmap_1036_li
#Add a migration guide (list differences between databases)

@roadmap_1037_li
#Migrate database tool (also from other database engines)

@roadmap_1038_li
#Optimization: automatic index creation suggestion using the trace file?

@roadmap_1039_li
#Compression performance: don't allocate buffers, compress / expand in to out buffer

@roadmap_1040_li
#Rebuild index functionality to shrink index size and improve performance

@roadmap_1041_li
#Don't use deleteOnExit (bug 4513817: File.deleteOnExit consumes memory)

@roadmap_1042_li
#Console: add accesskey to most important commands (A, AREA, BUTTON, INPUT, LABEL, LEGEND, TEXTAREA)

@roadmap_1043_li
#Support nested outer joins (see todo.txt).

@roadmap_1044_li
#Test performance again with SQL Server, Oracle, DB2

@roadmap_1045_li
#Test with dbmonster (http://dbmonster.kernelpanic.pl/)

@roadmap_1046_li
#Test with dbcopy (http://dbcopyplugin.sourceforge.net)

@roadmap_1047_li
#Test with Spatial DB in a box / JTS: http://www.opengeospatial.org/standards/sfs - OpenGIS Implementation Specification

@roadmap_1048_li
#Write more tests and documentation for MVCC (Multi Version Concurrency Control)

@roadmap_1049_li
#Find a tool to view large text file (larger than 100 MB), with find, page up and down (like less), truncate before / after

@roadmap_1050_li
#Implement, test, document XAConnection and so on

@roadmap_1051_li
#Pluggable data type (for compression, validation, conversion, encryption)

@roadmap_1052_li
#CHECK: find out what makes CHECK=TRUE slow, move to CHECK2

@roadmap_1053_li
#Improve recovery: improve code for log recovery problems (less try/catch)

@roadmap_1054_li
#Index usage for (ID, NAME)=(1, 'Hi'); document

@roadmap_1055_li
#Make DDL (Data Definition) operations transactional

@roadmap_1056_li
#RANK() and DENSE_RANK(), Partition using OVER()

@roadmap_1057_li
#Suggestion: include Jetty as Servlet Container (like LAMP)

@roadmap_1058_li
#Trace shipping to server

@roadmap_1059_li
#Version check: docs / web console (using Javascript), and maybe in the library (using TCP/IP)

@roadmap_1060_li
#Web server classloader: override findResource / getResourceFrom

@roadmap_1061_li
#Cost for embedded temporary view is calculated wrong, if result is constant

@roadmap_1062_li
#Comparison: pluggable sort order: natural sort

@roadmap_1063_li
#Count index range query (count(*) where id between 10 and 20)

@roadmap_1064_li
#Support alter table add column if table has views defined

@roadmap_1065_li
#Eclipse plugin

@roadmap_1066_li
#Asynchronous queries to support publish/subscribe: SELECT ... FOR READ WAIT [maxMillisToWait]

@roadmap_1067_li
#Fulltext search Lucene: analyzer configuration.

@roadmap_1068_li
#Fulltext search (native): reader / tokenizer / filter.

@roadmap_1069_li
#Linked schema using CSV files: one schema for a directory of files; support indexes for CSV files

@roadmap_1070_li
#iReport to support H2

@roadmap_1071_li
#Implement missing JDBC API (CallableStatement,...)

@roadmap_1072_li
#Compression of the cache

@roadmap_1073_li
#Include SMPT (mail) server (at least client) (alert on cluster failure, low disk space,...)

@roadmap_1074_li
#Drop with restrict (currently cascade is the default)

@roadmap_1075_li
#JSON parser and functions

@roadmap_1076_li
#Automatic collection of statistics (auto ANALYZE)

@roadmap_1077_li
#Server: client ping from time to time (to avoid timeout - is timeout a problem?)

@roadmap_1078_li
#Copy database: tool with config GUI and batch mode, extensible (example: compare)

@roadmap_1079_li
#Document, implement tool for long running transactions using user-defined compensation statements.

@roadmap_1080_li
#Support SET TABLE DUAL READONLY

@roadmap_1081_li
#GCJ: what is the state now?

@roadmap_1082_li
#Events for: database Startup, Connections, Login attempts, Disconnections, Prepare (after parsing), Web Server (see http://docs.openlinksw.com/virtuoso/fn_dbev_startup.html)

@roadmap_1083_li
#Optimization: log compression

@roadmap_1084_li
#ROW_NUMBER() OVER([ORDER BY columnName])

@roadmap_1085_li
#Support standard INFORMATION_SCHEMA tables, as defined in http://www.contrib.andrew.cmu.edu/~shadow/sql/sql1992.txt; specially KEY_COLUMN_USAGE (http://dev.mysql.com/doc/refman/5.0/en/information-schema.html, http://www.xcdsql.org/Misc/INFORMATION_SCHEMA%20With%20Rolenames.gif)

@roadmap_1086_li
#Compatibility: in MySQL, HSQLDB, /0.0 is NULL; in PostgreSQL, Derby: division by zero

@roadmap_1087_li
#Functional tables should accept parameters from other tables (see FunctionMultiReturn) SELECT * FROM TEST T, P2C(T.A, T.R)

@roadmap_1088_li
#Custom class loader to reload functions on demand

@roadmap_1089_li
#Test http://mysql-je.sourceforge.net/

@roadmap_1090_li
#Close all files when closing the database (including LOB files that are open on the client side)

@roadmap_1091_li
#EXE file: maybe use http://jsmooth.sourceforge.net

@roadmap_1092_li
#Performance: automatically build in-memory indexes if the whole table is in memory

@roadmap_1093_li
#H2 Console: the webclient could support more features like phpMyAdmin.

@roadmap_1094_li
#Use Janino to convert Java to C++

@roadmap_1095_li
#The HELP information schema can be directly exposed in the Console

@roadmap_1096_li
#Maybe use the 0x1234 notation for binary fields, see MS SQL Server

@roadmap_1097_li
#Support Oracle CONNECT BY in some way: http://www.adp-gmbh.ch/ora/sql/connect_by.html, http://philip.greenspun.com/sql/trees.html

@roadmap_1098_li
#SQL Server 2005, Oracle: support COUNT(*) OVER(). See http://www.orafusion.com/art_anlytc.htm

@roadmap_1099_li
#SQL 2003 (http://www.wiscorp.com/sql_2003_standard.zip)

@roadmap_1100_li
#Version column (number/sequence and timestamp based)

@roadmap_1101_li
#Optimize getGeneratedKey: send last identity after each execute (server).

@roadmap_1102_li
#Test and document UPDATE TEST SET (ID, NAME) = (SELECT ID*10, NAME || '!' FROM TEST T WHERE T.ID=TEST.ID);

@roadmap_1103_li
#Max memory rows / max undo log size: use block count / row size not row count

@roadmap_1104_li
#Support 123L syntax as in Java; example: SELECT (2000000000*2)

@roadmap_1105_li
#Implement point-in-time recovery

@roadmap_1106_li
#LIKE: improved version for larger texts (currently using naive search)

@roadmap_1107_li
#Automatically convert to the next 'higher' data type whenever there is an overflow.

@roadmap_1108_li
#Throw an exception when the application calls getInt on a Long (optional)

@roadmap_1109_li
#Default date format for input and output (local date constants)

@roadmap_1110_li
#Support custom Collators

@roadmap_1111_li
#Document ROWNUM usage for reports: SELECT ROWNUM, * FROM (subquery)

@roadmap_1112_li
#Clustering: reads should be randomly distributed or to a designated database on RAM

@roadmap_1113_li
#Clustering: when a database is back alive, automatically synchronize with the master

@roadmap_1114_li
#Optimizer: use an index for IS NULL and IS NOT NULL (including linked tables).  ID IS NOT NULL could be converted to ID &gt;= Integer.MIN_VALUE.

@roadmap_1115_li
#Standalone tool to get relevant system properties and add it to the trace output.

@roadmap_1116_li
#Support 'call proc(1=value)' (PostgreSQL, Oracle)

@roadmap_1117_li
#JAMon (proxy jdbc driver)

@roadmap_1118_li
#Console: improve editing data (Tab, Shift-Tab, Enter, Up, Down, Shift+Del?)

@roadmap_1119_li
#Console: autocomplete Ctrl+Space inserts template

@roadmap_1120_li
#Simplify translation ('Donate a translation')

@roadmap_1121_li
#Option to encrypt .trace.db file

@roadmap_1122_li
#Write Behind Cache on SATA leads to data corruption See also http://sr5tech.com/write_back_cache_experiments.htm and http://www.jasonbrome.com/blog/archives/2004/04/03/writecache_enabled.html

@roadmap_1123_li
#Functions with unknown return or parameter data types: serialize / deserialize

@roadmap_1124_li
#Test if idle TCP connections are closed, and how to disable that

@roadmap_1125_li
#Try using a factory for Row, Value[] (faster?), http://javolution.org/, alternative ObjectArray / IntArray

@roadmap_1126_li
#Auto-Update feature for database, .jar file

@roadmap_1127_li
#ResultSet SimpleResultSet.readFromURL(String url): id varchar, state varchar, released timestamp

@roadmap_1128_li
#Partial indexing (see PostgreSQL)

@roadmap_1129_li
#The build should fail if the test fails

@roadmap_1130_li
#Add GUI to build a custom version (embedded, fulltext,...) using build flags

@roadmap_1131_li
#http://rubyforge.org/projects/hypersonic/

@roadmap_1132_li
#Add comparator (x === y) : (x = y or (x is null and y is null))

@roadmap_1133_li
#Try to create trace file even for read only databases

@roadmap_1134_li
#Add a sample application that runs the H2 unit test and writes the result to a file (so it can be included in the user app)

@roadmap_1135_li
#Count on a column that can not be null could be optimized to COUNT(*)

@roadmap_1136_li
#Table order: ALTER TABLE TEST ORDER BY NAME DESC (MySQL compatibility)

@roadmap_1137_li
#Backup tool should work with other databases as well

@roadmap_1138_li
#Console: -ifExists doesn't work for the console. Add a flag to disable other dbs

@roadmap_1139_li
#Performance: update in-place

@roadmap_1140_li
#Check if 'FSUTIL behavior set disablelastaccess 1' improves the performance (fsutil behavior query disablelastaccess)

@roadmap_1141_li
#Java static code analysis: http://pmd.sourceforge.net/

@roadmap_1142_li
#Java static code analysis: http://www.eclipse.org/tptp/

@roadmap_1143_li
#Compatibility for CREATE SCHEMA AUTHORIZATION

@roadmap_1144_li
#Implement Clob / Blob truncate and the remaining functionality

@roadmap_1145_li
#Maybe close LOBs after closing connection

@roadmap_1146_li
#Tree join functionality

@roadmap_1147_li
#Add multiple columns at the same time with ALTER TABLE .. ADD .. ADD ..

@roadmap_1148_li
#Add H2 to Gem (Ruby install system)

@roadmap_1149_li
#API for functions / user tables

@roadmap_1150_li
#Order conditions inside AND / OR to optimize the performance

@roadmap_1151_li
#Support linked JCR tables

@roadmap_1152_li
#Make sure H2 is supported by Execute Query: http://executequery.org/

@roadmap_1153_li
#Read InputStream when executing, as late as possible (maybe only embedded mode). Problem with re-execute.

@roadmap_1154_li
#Native fulltext search: min word length; store word positions

@roadmap_1155_li
#[Requires page store] Store dates in local time zone (portability of database files)

@roadmap_1156_li
#Recursive Queries (see details)

@roadmap_1157_li
#Add an option to the SCRIPT command to generate only portable / standard SQL

@roadmap_1158_li
#Test Dezign for Databases (http://www.datanamic.com)

@roadmap_1159_li
#Fast library for parsing / formatting: http://javolution.org/

@roadmap_1160_li
#Updatable Views (simple cases first)

@roadmap_1161_li
#Improve create index performance

@roadmap_1162_li
#Implement more JDBC 4.0 features

@roadmap_1163_li
#Support TRANSFORM / PIVOT as in MS Access

@roadmap_1164_li
#SELECT * FROM (VALUES (...), (...), ....) AS alias(f1, ...)

@roadmap_1165_li
#Support updatable views with join on primary keys (to extend a table)

@roadmap_1166_li
#Public interface for functions (not public static)

@roadmap_1167_li
#Autocomplete: if I type the name of a table that does not exist (should say: syntax not supported)

@roadmap_1168_li
#Document FTP server, including -ftpTask option to execute / kill remote processes

@roadmap_1169_li
#Eliminate undo log records if stored on disk (just one pointer per block, not per record)

@roadmap_1170_li
#Feature matrix like in <a href="http://www.inetsoftware.de/products/jdbc/mssql/features/default.asp">i-net software</a> .

@roadmap_1171_li
#Updatable result set on table without primary key or unique index

@roadmap_1172_li
#Use LinkedList instead of ArrayList where applicable

@roadmap_1173_li
#Support % operator (modulo)

@roadmap_1174_li
#Support 1+'2'=3, '1'+'2'='12' (MS SQL Server compatibility)

@roadmap_1175_li
#Support nested transactions

@roadmap_1176_li
#Add a benchmark for big databases, and one for many users

@roadmap_1177_li
#Compression in the result set (repeating values in the same column) over TCP/IP

@roadmap_1178_li
#Support curtimestamp (like curtime, curdate)

@roadmap_1179_li
#Support ANALYZE {TABLE|INDEX} tableName COMPUTE|ESTIMATE|DELETE STATISTICS ptnOption options

@roadmap_1180_li
#Support Sequoia (Continuent.org)

@roadmap_1181_li
#Dynamic length numbers / special methods for DataPage.writeByte / writeShort / Ronni Nielsen

@roadmap_1182_li
#Pluggable ThreadPool, (AvalonDB / deebee / Paul Hammant)

@roadmap_1183_li
#Release locks (shared or exclusive) on demand

@roadmap_1184_li
#Support OUTER UNION

@roadmap_1185_li
#Support parameterized views (similar to CSVREAD, but using just SQL for the definition)

@roadmap_1186_li
#A way (JDBC driver) to map an URL (jdbc:h2map:c1) to a connection object

@roadmap_1187_li
#Option for SCRIPT to only process one or a set of tables, and append to a file

@roadmap_1188_li
#Support linked tables to the current database

@roadmap_1189_li
#Support dynamic linked schema (automatically adding/updating/removing tables)

@roadmap_1190_li
#Compatibility with Derby: VALUES(1), (2); SELECT * FROM (VALUES (1), (2)) AS myTable(c1)

@roadmap_1191_li
#Compatibility: # is the start of a single line comment (MySQL) but date quote (Access). Mode specific

@roadmap_1192_li
#Run benchmarks with JDK 1.5, JDK 1.6, java -server

@roadmap_1193_li
#Optimizations: faster hash function for strings, byte arrays

@roadmap_1194_li
#DatabaseEventListener: callback for all operations (including expected time, RUNSCRIPT) and cancel functionality

@roadmap_1195_li
#H2 Console / large result sets: use 'streaming' instead of building the page in-memory

@roadmap_1196_li
#Benchmark: add a graph to show how databases scale (performance/database size)

@roadmap_1197_li
#Implement a SQLData interface to map your data over to a custom object

@roadmap_1198_li
#In the MySQL and PostgreSQL mode, use lower case identifiers by default (DatabaseMetaData.storesLowerCaseIdentifiers = true)

@roadmap_1199_li
#Allow execution time prepare for SELECT * FROM CSVREAD(?, 'columnNameString')

@roadmap_1200_li
#Support multiple directories (on different hard drives) for the same database

@roadmap_1201_li
#Server protocol: use challenge response authentication, but client sends hash(user+password) encrypted with response

@roadmap_1202_li
#Support EXEC[UTE] (doesn't return a result set, compatible to MS SQL Server)

@roadmap_1203_li
#Support native XML data type

@roadmap_1204_li
#Support triggers with a string property or option: SpringTrigger, OSGITrigger

@roadmap_1205_li
#Clustering: adding a node should be very fast and without interrupting clients (very short lock)

@roadmap_1206_li
#Support materialized views (using triggers)

@roadmap_1207_li
#Ability to resize the cache array when resizing the cache

@roadmap_1208_li
#Time based cache writing (one second after writing the log)

@roadmap_1209_li
#Check state of H2 driver for DDLUtils: https://issues.apache.org/jira/browse/DDLUTILS-185

@roadmap_1210_li
#Support JMX: create an MBean for each database and server (support JConsole).  See http://thedevcloud.blogspot.com/2008/10/displaying-hsql-database-manager-in.html  http://java.sun.com/j2se/1.5.0/docs/api/java/lang/management/ManagementFactory.html#getPlatformMBeanServer()  http://java.sun.com/j2se/1.5.0/docs/guide/management/agent.html

@roadmap_1211_li
#Index usage for REGEXP LIKE.

@roadmap_1212_li
#Compatibility: add a role DBA (like ADMIN).

@roadmap_1213_li
#Better support multiple processors for in-memory databases.

@roadmap_1214_li
#Access rights: remember the owner of an object. COMMENT: allow owner of object to change it.

@roadmap_1215_li
#Access rights: finer grained access control (grant access for specific functions)

@roadmap_1216_li
#Support N'text'

@roadmap_1217_li
#Pure SQL triggers (example: update parent table if the child table is changed).

@roadmap_1218_li
#Support SCOPE_IDENTITY() to avoid problems when inserting rows in a trigger

@roadmap_1219_li
#Set a connection read only (Connection.setReadOnly)

@roadmap_1220_li
#In MySQL mode, for AUTO_INCREMENT columns, don't set the primary key

@roadmap_1221_li
#Use JDK 1.4 file locking to create the lock file (but not yet by default); writing a system property to detect concurrent access from the same VM (different classloaders).

@roadmap_1222_li
#Support compatibility for jdbc:hsqldb:res:

@roadmap_1223_li
#Provide an Java SQL builder with standard and H2 syntax

@roadmap_1224_li
#Trace: write OS, file system, JVM,... when opening the database

@roadmap_1225_li
#Support indexes for views (probably requires materialized views)

@roadmap_1226_li
#Document SET SEARCH_PATH, BEGIN, EXECUTE, parameters

@roadmap_1227_li
#Browser: use Desktop.isDesktopSupported and browse when using JDK 1.6

@roadmap_1228_li
#Server: use one listener (detect if the request comes from an PG or TCP client)

@roadmap_1229_li
#Store dates as 'local'. Existing files use GMT. Use escape syntax for compatibility.

@roadmap_1230_li
#Support data type INTERVAL

@roadmap_1231_li
#Optimize SELECT MIN(ID), MAX(ID), COUNT(*) FROM TEST WHERE ID BETWEEN 100 AND 200

@roadmap_1232_li
#Support Oracle functions: TRUNC, NVL2, TO_CHAR, TO_DATE, TO_NUMBER

@roadmap_1233_li
#Sequence: PostgreSQL compatibility (rename, create) (http://www.postgresql.org/docs/8.2/static/sql-altersequence.html)

@roadmap_1234_li
#DISTINCT: support large result sets by sorting on all columns (additionally) and then removing duplicates.

@roadmap_1235_li
#File system that writes to two file systems (replicating file system)

@roadmap_1236_li
#File system with a background writer thread; test if this is faster

@roadmap_1237_li
#FTP access to a database (.csv for a table, a directory for a schema, a file for a lob, a script.sql file).

@roadmap_1238_li
#Better document the source code

@roadmap_1239_li
#Support select * from dual a left join dual b on b.x=(select max(x) from dual)

@roadmap_1240_li
#Optimization: don't lock when the database is read-only

@roadmap_1241_li
#Integrate spatial functions from http://geosysin.iict.ch/irstv-trac/wiki/H2spatial/Download

@roadmap_1242_li
#Support COSH, SINH, and TANH functions

@roadmap_1243_li
#FTP Server: implement SFTP / FTPS

@roadmap_1244_li
#Native search: support "phrase search", wildcard search (* and ?), case-insensitive search, boolean operators, and grouping

@roadmap_1245_li
#Improve documentation of access rights

@roadmap_1246_li
#Support ENUM data type (see MySQL, PostgreSQL, MS SQL Server, maybe others)

@roadmap_1247_li
#Command line option for the H2 Console and TCP configuration (which .h2.server.properties and .h2.keystore to use)

@roadmap_1248_li
#Support a schema name for Java functions

@roadmap_1249_li
#Remember the user defined data type (domain) of a column

@roadmap_1250_li
#Support Jackcess (MS Access databases)

@roadmap_1251_li
#Built-in methods to write large objects (BLOB and CLOB): FILE_WRITE('test.txt', 'Hello World')

@roadmap_1252_li
#MVCC: support transactionally consistent backups using SCRIPT

@roadmap_1253_li
#Improve time to open large databases (see mail 'init time for distributed setup')

@roadmap_1254_li
#Move Maven 2 repository from hsql.sf.net to h2database.sf.net

@roadmap_1255_li
#Java 1.5 tool: JdbcUtils.closeSilently(s1, s2,...)

@roadmap_1256_li
#Javadoc: document design patterns used

@roadmap_1257_li
#Does the FTP server has problems with multithreading?

@roadmap_1258_li
#Write an article about SQLInjection (h2\src\docsrc\html\images\SQLInjection.txt)

@roadmap_1259_li
#Convert SQL-injection-2.txt to html document, include SQLInjection.java sample

@roadmap_1260_li
#Improve LOB in directories performance

@roadmap_1261_li
#Web site design: http://www.igniterealtime.org/projects/openfire/index.jsp

@roadmap_1262_li
#HSQLDB compatibility: Openfire server uses: CREATE SCHEMA PUBLIC AUTHORIZATION DBA;  CREATE USER SA PASSWORD ""; GRANT DBA TO SA; SET SCHEMA PUBLIC

@roadmap_1263_li
#Translation: use ?? in help.csv

@roadmap_1264_li
#Translated .pdf

@roadmap_1265_li
#Cluster: hot deploy (adding a node at runtime)

@roadmap_1266_li
#MySQL compatibility: update test1 t1, test2 t2 set t1.id = t2.id where t1.id = t2.id;

@roadmap_1267_li
#Recovery tool: bad blocks should be converted to INSERT INTO SYSTEM_ERRORS(...), and things should go into the .trace.db file

@roadmap_1268_li
#RECOVER=2 to backup the database, run recovery, open the database

@roadmap_1269_li
#Recovery should work with encrypted databases

@roadmap_1270_li
#Corruption: new error code, add help

@roadmap_1271_li
#Space reuse: after init, scan all storages and free those that don't belong to a live database object

@roadmap_1272_li
#SysProperties: change everything to H2_...

@roadmap_1273_li
#Use FilterIn / FilterOut putStream?

@roadmap_1274_li
#Access rights: add missing features (users should be 'owner' of objects; missing rights for sequences; dropping objects)

@roadmap_1275_li
#Support NOCACHE table option (Oracle)

@roadmap_1276_li
#Support table partitioning.

@roadmap_1277_li
#Index usage for UPDATE ... WHERE .. IN (SELECT...)

@roadmap_1278_li
#Add regular javadocs (using the default doclet, but another css) to the homepage.

@roadmap_1279_li
#The database should be kept open for a longer time when using the server mode.

@roadmap_1280_li
#Javadocs: for each tool, add a copy &amp; paste sample in the class level.

@roadmap_1281_li
#Javadocs: add @author tags.

@roadmap_1282_li
#Fluent API for tools: Server.createTcpServer().setPort(9081).setPassword(password).start();

@roadmap_1283_li
#MySQL compatibility: real SQL statement for DESCRIBE TEST

@roadmap_1284_li
#Use a default delay of 1 second before closing a database.

@roadmap_1285_li
#Write (log) to system table before adding to internal data structures.

@roadmap_1286_li
#Support very large deletes and updates.

@roadmap_1287_li
#Doclet (javadocs): constructors are not listed.

@roadmap_1288_li
#Support direct lookup for MIN and MAX when using WHERE (see todo.txt / Direct Lookup).

@roadmap_1289_li
#Support other array types (String[], double[]) in PreparedStatement.setObject(int, Object);

@roadmap_1290_li
#MVCC should not be memory bound (uncommitted data is kept in memory in the delta index; maybe using a regular b-tree index solves the problem).

@roadmap_1291_li
#Oracle compatibility: support NLS_DATE_FORMAT.

@roadmap_1292_li
#Support flashback queries as in Oracle.

@roadmap_1293_li
#Import / Export of fixed with text files.

@roadmap_1294_li
#Support OUT parameters in user-defined procedures.

@roadmap_1295_li
#Support getGeneratedKeys to return multiple rows when used with batch updates.  This is supported by MySQL, but not Derby. Both PostgreSQL and HSQLDB don't support getGeneratedKeys.  Also support it when using INSERT ... SELECT.

@roadmap_1296_li
#HSQLDB compatibility: automatic data type for SUM if value is the value is too big (by default use the same type as the data).

@roadmap_1297_li
#Improve the optimizer to select the right index for special cases: where id between 2 and 4 and booleanColumn

@roadmap_1298_li
#Linked tables: make hidden columns available (Oracle: rowid and ora_rowscn columns).

@roadmap_1299_li
#Support merge join.

@roadmap_1300_li
#H2 Console: in-place autocomplete.

@roadmap_1301_li
#Oracle: support DECODE method (convert to CASE WHEN).

@roadmap_1302_li
#Support large databases: split LOB (BLOB, CLOB) to multiple directories / disks (similar to tablespaces).

@roadmap_1303_li
#Support to assign a primary key index a user defined name.

@roadmap_1304_li
#Cluster: add feature to make sure cluster nodes can not get out of sync (for example by stopping one process).

@roadmap_1305_li
#H2 Console: support configuration option for fixed width (monospace) font.

@roadmap_1306_li
#Native fulltext search: support analyzers (specially for Chinese, Japanese).

@roadmap_1307_li
#Automatically compact databases from time to time (as a background process).

@roadmap_1308_li
#Support SCOPE_IDENTITY().

@roadmap_1309_li
#Support GRANT SELECT, UPDATE ON *.

@roadmap_1310_li
#Test Eclipse DTP.

@roadmap_1311_li
#H2 Console: autocomplete: keep the previous setting

@roadmap_1312_li
#MySQL, MS SQL Server compatibility: support case sensitive (mixed case) identifiers without quotes.

@roadmap_1313_li
#executeBatch: option to stop at the first failed statement.

@roadmap_1314_li
#Implement OLAP features as described here: http://www.devx.com/getHelpOn/10MinuteSolution/16573/0/page/5

@roadmap_1315_li
#Support Oracle ROWID (unique identifier for each row).

@roadmap_1316_li
#Server mode: improve performance for batch updates.

@roadmap_1317_li
#Applets: support read-only databases in a zip file (accessed as a resource).

@roadmap_1318_li
#Long running queries / errors / trace system table.

@roadmap_1319_li
#H2 Console should support JaQu directly.

@roadmap_1320_li
#H2 Console: support single file upload and directory download (optional).

@roadmap_1321_li
#Document FTL_SEARCH, FTL_SEARCH_DATA.

@roadmap_1322_li
#Sequences: CURRVAL should be session specific. Compatibility with PostgreSQL.

@roadmap_1323_li
#Support DatabaseMetaData.insertsAreDetected: updatable result sets should detect inserts.

@roadmap_1324_li
#Auto-server: add option to define the IP address range or list.

@roadmap_1325_li
#Index creation only using deterministic functions.

@roadmap_1326_li
#Use http://recaptcha.net somehow to secure the Google Group.

@roadmap_1327_li
#Support DELETE with TOP or LIMIT. See also: http://dev.mysql.com/doc/refman/5.1/de/delete.html

@roadmap_1328_li
#Change the default for NULL || 'x' to return NULL

@roadmap_1329_li
#ANALYZE: use a bloom filter for each indexed column to estimate count of distinct values.

@roadmap_1330_li
#ANALYZE: for unique indexes that allow null, count the number of null.

@roadmap_1331_li
#AUTO_SERVER: support changing IP addresses (disable a network while the database is open).

@roadmap_1332_li
#Avoid using java.util.Calendar internally because it's slow, complicated, and seems to be buggy.

@roadmap_1333_li
#Support TRUNCATE .. CASCADE like PostgreSQL.

@roadmap_1334_li
#Support opening a database that is in the classpath, maybe using a new file system.

@roadmap_1335_li
#Fulltext search: lazy result generation using SimpleRowSource.

@roadmap_1336_li
#Support transformation to join for user defined functions, as for IN(SELECT...).

@roadmap_1337_li
#Fulltext search: support alternative syntax: WHERE FTL_CONTAINS(name, 'hello').

@roadmap_1338_li
#MySQL compatibility: support REPLACE, see http://dev.mysql.com/doc/refman/5.1/de/replace.html

@roadmap_1339_li
#MySQL compatibility: support INSERT INTO table SET column1 = value1, column2 = value2

@roadmap_1340_li
#Docs: add a one line description for each functions and SQL statements at the top (in the link section).

@roadmap_1341_li
#Javadoc search: weight for titles should be higher ('random' should list Functions as the best match).

@roadmap_1342_li
#Replace information_schema tables with regular tables that are automatically re-built when needed. Use indexes.

@roadmap_1343_li
#Support a special trigger on all tables.

@roadmap_1344_li
#Delete temporary files or objects using finalize.

@roadmap_1345_li
#Oracle compatibility: support calling 0-parameters functions without parenthesis. Make constants obsolete.

@roadmap_1346_li
#MySQL, HSQLDB compatibility: support where 'a'=1 (not supported by Derby, PostgreSQL)

@roadmap_1347_li
#Allow calling function with no parameters without parenthesis. See http://code.google.com/p/h2database/issues/detail?id=50

@roadmap_1348_li
#CSV: currently # is a line comment and can start at any field. Make it optional.

@roadmap_1349_li
#Add database creation date and time to the database.

@roadmap_1350_li
#Support ASSERTIONS.

@roadmap_1351_li
#Support multi-threaded kernel with multi-version concurrency.

@roadmap_1352_li
#MySQL compatibility: support comparing 1='a'

@roadmap_1353_li
#Support PostgreSQL lock modes: http://www.postgresql.org/docs/8.3/static/explicit-locking.html

@roadmap_1354_li
#PostgreSQL compatibility: test DbVisualizer and Squirrel SQL using a new PostgreSQL JDBC driver.

@roadmap_1355_li
#RunScript should be able to read from system in (or quite mode for Shell).

@roadmap_1356_li
#Natural join: support select x from dual natural join dual.

@roadmap_1357_li
#Natural join: somehow support this: select a.x, b.x, x from dual a natural join dual b

@roadmap_1358_li
#MySQL compatibility: for auto_increment columns, convert 0 to next value (as when inserting NULL).

@roadmap_1359_li
#Functions: support hashcode(value); cryptographic and fast

@roadmap_1360_li
#Serialized file lock: support long running queries.

@roadmap_1361_li
#Network: use 127.0.0.1 if other addresses don't work.

@roadmap_1362_li
#Select for update in mvcc mode: only lock the selected records.

@roadmap_1363_li
#Support reading JCR data: one table per node type; query table; cache option

@roadmap_1364_li
#OSGi: create a sample application, test, document.

@roadmap_1365_li
#help.csv: use complete examples for functions; run as test case.

@roadmap_1366_li
#Re-implement PooledConnection; use a lightweight connection object.

@roadmap_1367_li
#Doclet: convert tests in javadocs to a java class.

@roadmap_1368_li
#Doclet: format fields like methods, but support sorting by name and value.

@roadmap_1369_li
#Doclet: shrink the html files.

@roadmap_1370_li
#Finer granularity for SLF4J trace - See http://code.google.com/p/h2database/issues/detail?id=62

@roadmap_1371_li
#MySQL compatibility: support REPLACE - See http://code.google.com/p/h2database/issues/detail?id=73

@roadmap_1372_li
#MySQL compatibility: support SET NAMES 'latin1' - See also http://code.google.com/p/h2database/issues/detail?id=56

@roadmap_1373_li
#MySQL compatibility: DELETE .. FROM .. USING - See http://dev.mysql.com/doc/refman/5.0/en/delete.html

@roadmap_1374_li
#Allow to scan index backwards starting with a value (to better support ORDER BY DESC).

@roadmap_1375_li
#Java Service Wrapper: try http://yajsw.sourceforge.net/

@roadmap_1376_li
#Batch parameter for INSERT, UPDATE, and DELETE, and commit after each batch. See also MySQL DELETE.

@roadmap_1377_li
#MySQL compatibility: support ALTER TABLE .. MODIFY COLUMN.

@roadmap_1378_li
#Use a lazy and auto-close input stream (open resource when reading, close on eof).

@roadmap_1379_li
#PostgreSQL compatibility: generate_series.

@roadmap_1380_li
#Connection pool: 'reset session' command (delete temp tables, rollback, autocommit true).

@roadmap_1381_li
#Improve SQL documentation, see http://www.w3schools.com/sql/

@roadmap_1382_li
#MySQL compatibility: DatabaseMetaData.stores*() methods should return the same values. Test with SquirrelSQL.

@roadmap_1383_li
#MS SQL Server compatibility: support DATEPART syntax.

@roadmap_1384_li
#Oracle compatibility: support CREATE OR REPLACE VIEW syntax.

@roadmap_1385_li
#Sybase/DB2/Oracle compatibility: support out parameters in stored procedures - See http://code.google.com/p/h2database/issues/detail?id=83

@roadmap_1386_li
#Support INTERVAL data type (see Oracle and others).

@roadmap_1387_li
#Combine Server and Console tool (only keep Server).

@roadmap_1388_li
#Store the Lucene index in the database itself.

@roadmap_1389_li
#Oracle compatibility: support DECODE(x, ...).

@roadmap_1390_li
#Console: Start Browser: if ip number changed, try localhost instead.

@roadmap_1391_li
#MVCC: compare concurrent update behavior with PostgreSQL and Oracle.

@roadmap_1392_li
#HSQLDB compatibility: CREATE FUNCTION (maybe using a Function interface).

@roadmap_1393_li
#HSQLDB compatibility: support CALL "java.lang.Math.sqrt"(2.0)

@roadmap_1394_li
#Support comma as the decimal separator in the CSV tool.

@roadmap_1395_li
#Compatibility: Support jdbc:default:connection using ThreadLocal (part of SQLJ)

@roadmap_1396_li
#Compatibility: Java functions with SQLJ Part1 http://www.acm.org/sigmod/record/issues/9912/standards.pdf.gz

@roadmap_1397_li
#Compatibility: Java functions with SQL/PSM (Persistent Stored Modules) - need to find the documentation.

@roadmap_1398_li
#CACHE_SIZE: automatically use a fraction of Runtime.maxMemory - maybe automatically the second level cache.

@roadmap_1399_li
#Support date/time/timestamp as documented in http://en.wikipedia.org/wiki/ISO_8601

@roadmap_1400_li
#PostgreSQL compatibility: when in PG mode, treat BYTEA data like PG.

@roadmap_1401_li
#Support standard MERGE statement: http://en.wikipedia.org/wiki/Merge_%28SQL%29

@roadmap_1402_li
#MySQL compatibility: REPLACE http://dev.mysql.com/doc/refman/6.0/en/replace.html

@roadmap_1403_li
#Support =ANY(array) as in PostgreSQL.

@roadmap_1404_li
#IBM DB2 compatibility: support PREVIOUS VALUE FOR sequence.

@roadmap_1405_li
#MySQL compatibility: alter table add index i(c), add constraint c foreign key(c) references t(c);

@roadmap_1406_li
#Compatibility: use different LIKE ESCAPE characters depending on the mode (disable for Derby, HSQLDB, DB2, Oracle, MSSQLServer).

@roadmap_1407_li
#Functions to calculate the memory and disk space usage of a row or value.

@roadmap_1408_li
#Oracle compatibility: support CREATE SYNONYM table FOR schema.table.

@roadmap_1409_li
#Optimize A=? OR B=? to UNION if the cost is lower.

@roadmap_1410_li
#More secure default configuration if remote access is enabled.

@roadmap_1411_li
#Optimization for EXISTS: convert to inner join if possible.

@roadmap_1412_li
#Improve database file locking (maybe use native file locking). The current approach seems to be problematic  if the file system is on a remote share (see Google Group 'Lock file modification time is in the future').

@roadmap_1413_li
#Document internal features such as BELONGS_TO_TABLE, NULL_TO_DEFAULT, SEQUENCE.

@roadmap_1414_h2
#Not Planned

@roadmap_1415_li
#HSQLDB (did) support this: select id i from test where i&lt;0 (other databases don't). Supporting it may break compatibility.

@roadmap_1416_li
#String.intern (so that Strings can be compared with ==) will not be used because some VMs have problems when used extensively.

@sourceError_1000_h1
#Online Error Analyzer

@sourceError_1001_a
ホーム

@sourceError_1002_a
#Input

@sourceError_1003_h2
#&nbsp; <a href="javascript:select('details')" id="detailsTab">Details</a> &nbsp; <a href="javascript:select('source')" id="sourceTab">Source Code</a>

@sourceError_1004_p
#Fill in the error message and stack trace and click on 'Details' or 'Source Code':

@sourceError_1005_b
#Error Code:

@sourceError_1006_b
#Product Version:

@sourceError_1007_b
メッセージ:

@sourceError_1008_b
#More Information:

@sourceError_1009_b
#Stack Trace:

@sourceError_1010_b
#Source File:

@sourceError_1011_p
#Raw file

@sourceError_1012_p
#(fast; only Firefox)

@tutorial_1000_h1
チュートリアル

@tutorial_1001_a
起動とH2コンソールの使用

@tutorial_1002_a
#Settings of the H2 Console

@tutorial_1003_a
JDBCを使用してデータベースに接続

@tutorial_1004_a
新しいデータベースを作成する

@tutorial_1005_a
サーバーを使用する

@tutorial_1006_a
Hibernateを使用する

@tutorial_1007_a
#Using TopLink and Glassfish

@tutorial_1008_a
Webアプリケーションで データベースを使用する

@tutorial_1009_a
CSV (Comma Separated Values) サポート

@tutorial_1010_a
アップグレード、 バックアップ、修復

@tutorial_1011_a
#Command Line Tools

@tutorial_1012_a
OpenOffice Baseを使用する

@tutorial_1013_a
Java Web Start / JNLP

@tutorial_1014_a
#Using a Connection Pool

@tutorial_1015_a
フルテキストサーチ

@tutorial_1016_a
#User-Defined Variables

@tutorial_1017_a
#Date and Time

@tutorial_1018_a
#Using Spring

@tutorial_1019_h2
起動とH2コンソールの使用

@tutorial_1020_p
#The H2 Console application lets you access a SQL database using a browser interface. This can be a H2 database, or another database that supports the JDBC API.

@tutorial_1021_p
これはクライアント / サーバーアプリケーションで、サーバーとクライアントの両方実行されることが必要です。

@tutorial_1022_p
プラットフォームと環境によって、アプリケーションの起動方法が多数あります:

@tutorial_1023_th
OS

@tutorial_1024_th
起動

@tutorial_1025_td
Windows

@tutorial_1026_td
[スタート]、 [すべてのプログラム]、 [H2]、 [H2 Console]をクリックします

@tutorial_1027_td
#When using the Sun JDK 1.5, a window with the title 'H2 Console ' should appear.  When using the Sun JDK 1.6, an icon will be added to the system tray:

@tutorial_1028_td
#If you don't get the window and the system tray icon,  then maybe Java is not installed correctly (in this case, try another way to start the application).  A browser window should open and point to the Login page at http://localhost:8082 .

@tutorial_1029_td
Windows

@tutorial_1030_td
ファイルブラウザを開き、h2/binフォルダまで進み、h2.batをダブルクリックします。

@tutorial_1031_td
正しく動作したら、システムトレイにアイコンが追加されます。 問題があれば、コンソールウィンドウにエラーメッセージが表示されます。 ブラウザウィンドウが開き、ログインページが表示されます。 (URL: http://localhost:8082/)

@tutorial_1032_td
Any

@tutorial_1033_td
#Double click on the h2*.jar file.  This only works if the .jar suffix is associated with java.

@tutorial_1034_td
Any

@tutorial_1035_td
コンソールウィンドウを開き、'h2/lib'ディレクトリまで進み、下記を実行します:

@tutorial_1036_h3
ファイアウォール

@tutorial_1037_p
サーバーを起動させたら、ファイアウォールによるセキュリティ警告を受けるでしょう (1度インストールした場合)。外部ネットワークからあなたのマシンのデータベースにアクセスされたくないのであれば、ファイアーウォールが他の接続を遮断します。ローカルマシンからの接続はまだつながっています。他のコンピュータから、このコンピューターのデータベースにアクセスしたい場合のみ、 ファイアウォールでリモート接続を許可する必要があります。

@tutorial_1038_p
#It has been reported that when using Kaspersky 7.0 with firewall, the H2 Console is very slow when connecting over the IP address. A workaround is to connect using localhost, however this only works on the local machine.

@tutorial_1039_p
小さなファイアーウォールはすでにサーバーに組み込まれています。 デフォルトによるこの構造は、他のコンピューターがサーバーにアクセスすることを許可していません。 これは、好きなように変更することができます (他のコンピューターからの接続を許可します)。

@tutorial_1040_h3
Javaをテストする

@tutorial_1041_p
#To find out which version of Java is installed, open a command prompt and type:

@tutorial_1042_p
もしエラーメッセージが表示されたら、Javaのバイナリディレクトリを環境変数のPathに追加します。

@tutorial_1043_h3
#Error Message 'Port may be in use'

@tutorial_1044_p
#You can only start one instance of the H2 Console, otherwise you will get the following error message: <code>The Web server could not be started. Possible cause: another server is already running...</code> . It is possible to start multiple console applications on the same computer (using different ports), but this is usually not required as the console supports multiple concurrent connections.

@tutorial_1045_h3
他のポートを使用する

@tutorial_1046_p
もしポートが他のアプリケーションによって使用されている場合は、H2コンソールを異なったポートで起動したいはずです。これは、.h2.server.properties.ファイル内のポートを変更することにより実行できます。このファイルはユーザディレクトリ内に格納されています (Windowsでは通常、"Documents and Settings/&lt;ユーザ名>")。関連する項目はwebPortです。

@tutorial_1047_h3
ブラウザを使用してサーバーに接続

@tutorial_1048_p
#If the server started successfully, you can connect to it using a web browser. JavaScript needs to be enabled. If you started the server on the same computer as the browser, open the URL http://localhost:8082 . If you want to connect to the application from another computer, you need to provide the IP address of the server, for example: http://192.168.0.2:8082 . If you enabled SSL on the server side, the URL needs to start with https:// .

@tutorial_1049_h3
複数の同時セッション

@tutorial_1050_p
複数の同時ブラウザセッションがサポートされています。 データベースオブジェクトはサーバーに属しているため、同時接続の数はサーバーアプリケーションの利用可能メモリによって制限されています。

@tutorial_1051_h3
ログイン

@tutorial_1052_p
ログインページでは、データベースに接続するための接続情報を設定する必要があります。 JDBCドライバをデータベースのクラスに設定し、JDBCのURL、ユーザ名とパスワードを入力します。 完了したら [Connect] をクリックします。

@tutorial_1053_p
#You can save and reuse previously saved settings. The settings are stored in a properties file (see <a href="#console_settings">Settings of the H2 Console</a> ).

@tutorial_1054_h3
エラーメッセージ

@tutorial_1055_p
エラーメッセージは赤で表示されます。 メッセージをクリックすることによって、例外の記録の表示、非表示を切り替えることができます。

@tutorial_1056_h3
データベースドライバの追加

@tutorial_1057_p
#Additional database drivers can be registered by adding the Jar file location of the driver to the environment variables H2DRIVERS or CLASSPATH. Example (Windows): to add the database driver library C:\Programs\hsqldb\lib\hsqldb.jar, set the environment variable H2DRIVERS to C:\Programs\hsqldb\lib\hsqldb.jar.

@tutorial_1058_p
複数のドライバを設定することも可能です; それぞれのパスは ';' (Windows) や ':' (他のOS) で区切ります。 パス名内のスペースは有効です。設定は引用されません。

@tutorial_1059_h3
#Using the H2 Console

@tutorial_1060_p
#The H2 Console application has three main panels: the toolbar on top, the tree on the left, and the query / result panel on the right. The database objects (for example, tables) are listed on the left panel. Type in a SQL command on the query panel and click 'Run'. The result of the command appears just below the command.

@tutorial_1061_h3
テーブル名、またはカラム名をインサートする

@tutorial_1062_p
テーブル名やカラム名は、ツリー内のテーブル名、カラム名をクリックすることによってスクリプトにインサートすることができます。クエリが空の時にテーブルをクリックすると、 'SELECT * FROM ...' も同様に追加されます。 クエリを入力している間、使用されているテーブルはツリー内で自動的に拡張されます。例えば、 'SELECT * FROM TEST T WHERE T.' と入力すると、ツリー内のTESTテーブルは自動的に拡張されます。

@tutorial_1063_h3
切断とアプリケーションの終了

@tutorial_1064_p
#To log out of the database, click 'Disconnect' in the toolbar panel. However, the server is still running and ready to accept new sessions.

@tutorial_1065_p
#To stop the server, right click on the system tray icon and select [Exit]. If you don't have the system tray icon, navigate to [Preferences] and click [Shutdown], press [Ctrl]+[C] in the console where the server was started (Windows), or close the console window.

@tutorial_1066_h2
#Settings of the H2 Console

@tutorial_1067_p
#The settings of the H2 Console are stored in a configuration file called <code>.h2.server.properties</code> in you user home directory. For Windows installations, the user home directory is usually <code>C:\Documents and Settings\[username]</code> . The configuration file contains the settings of the application and is automatically created when the H2 Console is first started.

@tutorial_1068_h2
JDBCを使用してデータベースに接続

@tutorial_1069_p
#To connect to a database, a Java application first needs to load the database driver, and then get a connection. A simple way to do that is using the following code:

@tutorial_1070_p
#This code first loads the driver ( <code>Class.forName(...)</code> ) and then opens a connection (using <code>DriverManager.getConnection()</code> ). The driver name is <code>"org.h2.Driver"</code> . The database URL always needs to start with <code>jdbc:h2:</code> to be recognized by this database. The second parameter in the <code>getConnection()</code> call is the user name ('sa' for System Administrator in this example). The third parameter is the password. In this database, user names are not case sensitive, but passwords are.

@tutorial_1071_h2
新しいデータベースを作成する

@tutorial_1072_p
初期設定では、データベースの指定されたURLがまだ存在しない場合、自動的に新しい (空の) データベースが作られます。

@tutorial_1073_h2
サーバーを使用する

@tutorial_1074_p
#H2 currently supports three server: a web server (for the H2 Console), a TCP server (for client/server connections) and an PG server (for PostgreSQL clients). The servers can be started in different ways, one is using the server tool.

@tutorial_1075_h3
#Starting the Server Tool from Command Line

@tutorial_1076_p
#To start the server tool from the command line with the default settings, run:

@tutorial_1077_p
#This will start the server tool with the default options. To get the list of options and default values, run:

@tutorial_1078_p
#There are options available to use other ports, and start or not start parts. For details, see the API documentation of the server tool.

@tutorial_1079_h3
TCPサーバーに接続する

@tutorial_1080_p
データベースへリモート接続するためには、TCPサーバーを使用します。次のドライバとデータベースURLを利用します:

@tutorial_1081_li
JDBCドライバクラス: org.h2.Driver

@tutorial_1082_li
データベースURL: jdbc:h2:tcp://localhost/~/test

@tutorial_1083_p
データベースURLについての詳細は、特徴内のページをご覧下さい。

@tutorial_1084_h3
#Starting the TCP Server within an Application

@tutorial_1085_p
#Servers can also be started and stopped from within an application. Sample code:

@tutorial_1086_h3
他の過程からTCPサーバーを終了する

@tutorial_1087_p
#The TCP server can be stopped from another process. To stop the server from the command line, run:

@tutorial_1088_p
ユーザアプリケーションからサーバーを終了するには、次のコードを使用します:

@tutorial_1089_p
#This function will only stop the TCP server. If other server were started in the same process, they will continue to run. To avoid recovery when the databases are opened the next time, all connections to the databases should be closed before calling this method. To stop a remote server, remote connections must be enabled on the server. Shutting down a TCP server can be protected using the option -tcpPassword (the same password must be used to start and stop the TCP server).

@tutorial_1090_h2
Hibernateを使用する

@tutorial_1091_p
#This database supports Hibernate version 3.1 and newer. You can use the HSQLDB Dialect, or the native H2 Dialect. Unfortunately the H2 Dialect included in Hibernate is buggy. A <a href="http://opensource.atlassian.com/projects/hibernate/browse/HHH-3401">patch for Hibernate</a> has been submitted. The dialect for the newest version of Hibernate is also available at src/tools/org/hibernate/dialect/H2Dialect.java.txt. You can rename it to H2Dialect.java and include this as a patch in your application.

@tutorial_1092_h2
#Using TopLink and Glassfish

@tutorial_1093_p
#To use H2 with Glassfish (or Sun AS), set the Datasource Classname to <code>org.h2.jdbcx.JdbcDataSource</code> . You can set this in the GUI at Application Server - Resources - JDBC - Connection Pools, or by editing the file <code>sun-resources.xml</code> : at element <code>jdbc-connection-pool</code> , set the attribute <code>datasource-classname</code> to <code>org.h2.jdbcx.JdbcDataSource</code> .

@tutorial_1094_p
#The H2 database is compatible with HSQLDB and PostgreSQL. To take advantage of H2 specific features, use the <code>H2Platform</code> . The source code of this platform is included in H2 at <code>src/tools/oracle/toplink/essentials/platform/database/DatabasePlatform.java.txt</code> . You will need to copy this file to your application, and rename it to .java. To enable it, change the following setting in persistence.xml:

@tutorial_1095_p
#In old versions of Glassfish, the property name is <code>toplink.platform.class.name</code> .

@tutorial_1096_h2
Webアプリケーションで データベースを使用する

@tutorial_1097_p
Webアプリケーション内からデータベースに接続するには様々な方法があります。 以下はTomcatかJBossを使用の場合のいくつかの例です。

@tutorial_1098_h3
エンベッドモード

@tutorial_1099_p
(現在)最も簡単なソリューションはエンベッドモードでデータベースを使用することです。 それは、アプリケーションが起動する時や (良いソリューションは Servletリスナーを使用します。下記参照)、セッションが起動する時、アプリケーションにおける接続が開始するということを意味します。データベースは、セッションやアプリケーションが同じ過程で実行している限り、多様なセッションやアプリケーションから同時に接続されることが可能です。 多くのServletコンテナは (例； Tomcat) ただひとつのプロセスで利用されるので、問題はありません。 (Tomcatをクラスターモードで起動している場合を除いて)。 Tomcatはマルチスレッドとマルチクラスローダーを使用しています。もし複数のアプリケーションが同じデータベースに同時にアクセスする場合、データベースjarをshared/lib、またはserver/libディレクトリに置く必要があります。 webアプリケーションが起動した時にデータベースを開き、webアプリケーションが終了した時にデータベースを閉じるのが良い方法です。もし複数のアプリケーションを使用する場合、そのうちひとつのアプリケーションをこのように動作することが必要です。アプリケーションでは、セッションごとにひとつの接続を使うか、リクエスト(アクション)ごとにひとつの接続を使うという概念があります。これらの接続はできる限り、使用後に終了させます(しかし、終了させなくても悪くはありません)。

@tutorial_1100_h3
サーバーモード

@tutorial_1101_p
サーバーモードは類似していますが、他のプロセスでサーバーを起動させることを許可しています。

@tutorial_1102_h3
データベースの起動と終了にServletリスナーを使用する

@tutorial_1103_p
#Add the h2*.jar file to your web application, and add the following snippet to your web.xml file (between the 'context-param' and the 'filter' section):

@tutorial_1104_p
#For details on how to access the database, see the file DbStarter.java. By default the DbStarter listener opens an embedded connection using the database URL 'jdbc:h2:~/test', user name 'sa', and password 'sa'. If you want to use this connection within your servlet, you can access as follows:

@tutorial_1105_p
#The DbStarter can also start the TCP server, however this is disabled by default. To enable it, use the parameter db.tcpServer in the file web.xml. Here is the complete list of options. These options need to be placed between the 'description' tag and the 'listener' / 'filter' tags:

@tutorial_1106_p
#When the web application is stopped, the database connection will be closed automatically. If the TCP server is started within the DbStarter, it will also be stopped automatically.

@tutorial_1107_h3
#Using the H2 Console Servlet

@tutorial_1108_p
#The H2 Console is a standalone application and includes its own web server, but it can be used as a servlet as well. To do that, include the the h2 jar file in your application, and add the following configuration to your web.xml:

@tutorial_1109_p
#For details, see also <code>src/tools/WEB-INF/web.xml</code> .

@tutorial_1110_p
#To create a web application with just the H2 Console, run the following command:

@tutorial_1111_h2
CSV (Comma Separated Values) サポート

@tutorial_1112_p
#The CSV file support can be used inside the database using the functions CSVREAD and CSVWRITE, or it can be used outside the database as a standalone tool.

@tutorial_1113_h3
データベース内からCSVファイルに書き込む

@tutorial_1114_p
クエリからCSVファイルを作成するのに、組込み関数 CSVWRITEを使用することができます。例:

@tutorial_1115_h3
データベース内からCSVファイルを読み込む

@tutorial_1116_p
CSVREAD関数を使用してCSVファイルを読み込むことができます。 例:

@tutorial_1117_h3
JavaアプリケーションからCSVファイルに書き込む

@tutorial_1118_p
データベースを全く使用しなくても、JavaアプリケーションでCSVツールを使用することができます。 例:

@tutorial_1119_h3
JavaアプリケーションからCSVファイルを読み込む

@tutorial_1120_p
データベースを開かなくてもCSVファイルを読み込むことができます。 例:

@tutorial_1121_h2
アップグレード、 バックアップ、修復

@tutorial_1122_h3
データベースのアップグレー

@tutorial_1123_p
あるバージョンのデータベースエンジンを次のバージョンにアップグレードする際の推奨する方法は、 古いエンジンを使って(SQLスクリプトのフォームでの)データベースのバックアップを作成し、新しいエンジンを使ってSQLスクリプトを実行します。

@tutorial_1124_h3
バックアップ

@tutorial_1125_p
異なった方法のデータベースのバックアップがあります。例えば、データベースファイルをコピーすることが可能です。しかしながら、この方法はデータベースが使用されている間は推奨しません。データベースは人が判読しやすく、極めて大きいというわけではありません。データベースバックアップの推奨する方法は、圧縮したSQLスクリプトを作成することです。この方法は、バックアップツールを使用することで可能です:

@tutorial_1126_p
オプションについての情報は、SQLコマンドスクリプトをご覧下さい。バックアップは遠隔で行えますが、ファイルはサーバー側に作られます。サーバーからファイルを取るのに、ビルトインFTPサーバーを使用することができます。データベースのバックアップを作るのに、SQLコマンドスクリプトを 使用することもできます。

@tutorial_1127_h3
修復

@tutorial_1128_p
SQLスクリプトファイルからデータベースを修復するには、RunScriptツールを使用する必要があります:

@tutorial_1129_p
オプションについての情報は、SQLコマンド RUNSCRIPTをご覧下さい。修復は遠隔で行えますが、サーバー側にファイルが存在する必要があります。サーバーからファイルをコピーするのに、ビルトインFTPサーバーを使用することができます。SQLスクリプトを実行するために、 SQLコマンド RUNSCRIPTを使用することができます。SQLスクリプトファイルには、RUNSCRIPTコマンドのフォーム内に他のスクリプトファイルのリファレンスが含まれています。しかしながら、サーバーモードを使用している時、リファレンススクリプトファイルはサーバー側で利用可能であることが必要です。

@tutorial_1130_h3
オンラインバックアップ

@tutorial_1131_p
BACKUP SQLステートメントとバックアップツールの両方が全てのデータベースファイルをzipファイル形式で作成します。しかし、このファイルのコンテンツは人間が解読可能なものではありません。SCRIPTステートメントを除いて、BACKUPステートメントはデータベースオブジェクトをロックしないため、他のユーザーをブロックしません。結果として、バックアップは一貫性のあるトランザクションです:

@tutorial_1132_p
バックアップツール (org.h2.tools.Backup) はオンラインバックアップを作成するために利用されません; このプログラムが実行されている間、データベースは使用されてはいけません。

@tutorial_1133_p
#Creating a backup while the database is running is not supported, except if the file systems support creating snapshots. The problem is that it can't be guaranteed that the data is copied in the right order.

@tutorial_1134_h2
#Command Line Tools

@tutorial_1135_p
#This database comes with a number of command line tools. To get more information about a tool, start it with the parameter '-?', for example:

@tutorial_1136_p
#The command line tools are:

@tutorial_1137_b
バックアップ

@tutorial_1138_li
#creates a backup of a database.

@tutorial_1139_b
#ChangeFileEncryption

@tutorial_1140_li
#allows changing the file encryption password or algorithm of a database.

@tutorial_1141_b
#Console

@tutorial_1142_li
#starts the browser based H2 Console.

@tutorial_1143_b
#ConvertTraceFile

@tutorial_1144_li
#converts a .trace.db file to a Java application and SQL script.

@tutorial_1145_b
#CreateCluster

@tutorial_1146_li
#creates a cluster from a standalone database.

@tutorial_1147_b
#DeleteDbFiles

@tutorial_1148_li
#deletes all files belonging to a database.

@tutorial_1149_b
#Recover

@tutorial_1150_li
#helps recovering a corrupted database.

@tutorial_1151_b
#Restore

@tutorial_1152_li
#restores a backup of a database.

@tutorial_1153_b
#RunScript

@tutorial_1154_li
#runs a SQL script against a database.

@tutorial_1155_b
#Script

@tutorial_1156_li
#allows converting a database to a SQL script for backup or migration.

@tutorial_1157_b
Server

@tutorial_1158_li
#is used in the server mode to start a H2 server.

@tutorial_1159_b
#Shell

@tutorial_1160_li
#is a command line database tool.

@tutorial_1161_p
#The tools can also be called from an application by calling the main or another public method. For details, see the Javadoc documentation.

@tutorial_1162_h2
OpenOffice Baseを使用する

@tutorial_1163_p
OpenOffice.org Base はJDBC API上のデータベースアクセスをサポートしています。 OpenOffice Baseを使ってH2データベースに接続するためには、最初にOpenOfficeにJDBCドライバを追加する必要があります。H2データベースに接続する手順:

@tutorial_1164_li
#Start OpenOffice Writer, go to [Tools], [Options]

@tutorial_1165_li
#Make sure you have selected a Java runtime environment in OpenOffice.org / Java

@tutorial_1166_li
#Click [Class Path...], [Add Archive...]

@tutorial_1167_li
#Select your h2 jar file (location is up to you, could be wherever you choose)

@tutorial_1168_li
#Click [OK] (as much as needed), stop OpenOffice (including the Quickstarter)

@tutorial_1169_li
OpenOffice Base を起動する

@tutorial_1170_li
#Connect to an existing database; select [JDBC]; [Next]

@tutorial_1171_li
#Example datasource URL: jdbc:h2:~/test

@tutorial_1172_li
JDBCドライバクラス: org.h2.Driver

@tutorial_1173_p
#Now you can access the database stored in the current users home directory.

@tutorial_1174_p
#To use H2 in NeoOffice (OpenOffice without X11):

@tutorial_1175_li
#In NeoOffice, go to [NeoOffice], [Preferences]

@tutorial_1176_li
#Look for the page under [NeoOffice], [Java]

@tutorial_1177_li
#Click [Class Path], [Add Archive...]

@tutorial_1178_li
#Select your h2 jar file (location is up to you, could be wherever you choose)

@tutorial_1179_li
#Click [OK] (as much as needed), restart NeoOffice.

@tutorial_1180_p
#Now, when creating a new database using the "Database Wizard" :

@tutorial_1181_li
#Click [File], [New], [Database].

@tutorial_1182_li
#Select [Connect to existing database] and the select [JDBC]. Click next.

@tutorial_1183_li
#Example datasource URL: jdbc:h2:~/test

@tutorial_1184_li
JDBCドライバクラス: org.h2.Driver

@tutorial_1185_p
#Another solution to use H2 in NeoOffice is:

@tutorial_1186_li
#Package the h2 jar within an extension package

@tutorial_1187_li
#Install it as a Java extension in NeoOffice

@tutorial_1188_p
#This can be done by create it using the NetBeans OpenOffice plugin. See also <a href="http://wiki.services.openoffice.org/wiki/Extensions_development_java">Extensions Development</a> .

@tutorial_1189_h2
Java Web Start / JNLP

@tutorial_1190_p
Java Web Start / JNLP (Java Network Launch Protocol) を使用している時、パーミッションタグは.jnlp ファイルに設定され、application.jarファイルは署名されていなければなりません。そうでなければ、ファイルシステムに書き込もうとした時、次の例外が発生するでしょう: java.security.AccessControlException: access denied (java.io.FilePermission ... read) パーミッションタグの例:

@tutorial_1191_h2
#Using a Connection Pool

@tutorial_1192_p
#For H2, opening a connection is fast if the database is already open. Still, using a connection pool improves performance if you open and close connections a lot. A simple connection pool is included in H2. It is based on the <a href="http://www.source-code.biz/snippets/java/8.htm">Mini Connection Pool Manager</a> from Christian d'Heureuse. There are other, more complex, open source connection pools available, for example the <a href="http://jakarta.apache.org/commons/dbcp/">Apache Commons DBCP</a> . For H2, it is about twice as faster to get a connection from the built-in connection pool than to get one using DriverManager.getConnection(). The build-in connection pool is used as follows:

@tutorial_1193_h2
フルテキストサーチ

@tutorial_1194_p
#H2 includes two fulltext search implementations. One is using Apache Lucene, and the other (the native implementation) stores the index data in special tables in the database.

@tutorial_1195_h3
#Using the Native Fulltext Search

@tutorial_1196_p
初期化するには、次を呼び出します:

@tutorial_1197_p
#You need to initialize it in each database where you want to use it. Afterwards, you can create a fulltext index for a table using:

@tutorial_1198_p
#PUBLIC is the schema, TEST is the table name. The list of column names (column separated) is optional, in this case all columns are indexed. The index is updated in realtime. To search the index, use the following query:

@tutorial_1199_p
#This will produce a result set that contains the query needed to retrieve the data:

@tutorial_1200_p
#QUERY: "PUBLIC"."TEST" WHERE "ID"=1

@tutorial_1201_p
#To get the raw data, use <code>FT_SEARCH_DATA('Hello', 0, 0);</code> . The result contains the columns SCHEMA (the schema name), TABLE (the table name), COLUMNS (an array of column names), and KEYS (an array of objects). To join a table, use a join as in: <code>SELECT T.* FROM FT_SEARCH_DATA('Hello', 0, 0) FT, TEST T WHERE FT.TABLE='TEST' AND T.ID= FT.KEYS[0];</code>

@tutorial_1202_p
Javaアプリケーション内からインデックスを呼び出すことも可能です:

@tutorial_1203_h3
Luceneフルテキストサーチを使用する

@tutorial_1204_p
#To use the Lucene full text search, you need the Lucene library in the classpath. How to do that depends on the application; if you use the H2 Console, you can add the Lucene jar file to the environment variables H2DRIVERS or CLASSPATH. To initialize the Lucene fulltext search in a database, call:

@tutorial_1205_p
#You need to initialize it in each database where you want to use it. Afterwards, you can create a full text index for a table using:

@tutorial_1206_p
#PUBLIC is the schema, TEST is the table name. The list of column names (column separated) is optional, in this case all columns are indexed. The index is updated in realtime. To search the index, use the following query:

@tutorial_1207_p
#This will produce a result set that contains the query needed to retrieve the data:

@tutorial_1208_p
#QUERY: "PUBLIC"."TEST" WHERE "ID"=1

@tutorial_1209_p
#To get the raw data, use <code>FTL_SEARCH_DATA('Hello', 0, 0);</code> . The result contains the columns SCHEMA (the schema name), TABLE (the table name), COLUMNS (an array of column names), and KEYS (an array of objects). To join a table, use a join as in: <code>SELECT T.* FROM FTL_SEARCH_DATA('Hello', 0, 0) FT, TEST T WHERE FT.TABLE='TEST' AND T.ID= FT.KEYS[0];</code>

@tutorial_1210_p
Javaアプリケーション内からインデックスを呼び出すことも可能です:

@tutorial_1211_h2
#User-Defined Variables

@tutorial_1212_p
#This database supports user-defined variables. Variables start with @ and can be used wherever expressions or parameters are allowed. Variables are not persisted and session scoped, that means only visible from within the session in which they are defined. A value is usually assigned using the SET command:

@tutorial_1213_p
#The value can also be changed using the SET() method. This is useful in queries:

@tutorial_1214_p
#Variables that are not set evaluate to NULL. The data type of a user-defined variable is the data type of the value assigned to it, that means it is not necessary (or possible) to declare variable names before using them. There are no restrictions on the assigned values; large objects (LOBs) are supported as well.

@tutorial_1215_h2
#Date and Time

@tutorial_1216_p
#Date, time and timestamp values support ISO 8601 formatting, including time zone:

@tutorial_1217_p
#If the time zone is not set, the value is parsed using the current time zone setting of the system. Date and time information is stored in H2 database files in GMT (Greenwich Mean Time). If the database is opened using another system time zone, the date and time will change accordingly. If you want to move a database from one time zone to the other and don't want this to happen, you need to create a SQL script file using the SCRIPT command or Script tool, and then load the database using the RUNSCRIPT command or the RunScript tool in the new time zone.

@tutorial_1218_h2
#Using Spring

@tutorial_1219_p
#Use the following configuration to start and stop the H2 TCP server using the Spring Framework:

@tutorial_1220_p
#The "destroy-method" will help prevent exceptions on hot-redeployment or when restarting the server.

