@advanced_1000_h1
進歩したトピックス

@advanced_1001_a
Result Sets

@advanced_1002_a
大きなオブジェクト

@advanced_1003_a
リンクテーブル

@advanced_1004_a
トランザクション分離

@advanced_1005_a
クラスタリング / 高可用性

@advanced_1006_a
2フェーズコミット

@advanced_1007_a
互換性

@advanced_1008_a
Windowsサービスとして実行する

@advanced_1009_a
ODBCドライバ

@advanced_1010_a
ACID

@advanced_1011_a
永続性問題

@advanced_1012_a
リカバーツールを使用する

@advanced_1013_a
ファイルロックプロトコル

@advanced_1014_a
SQLインジェクションに対する防御

@advanced_1015_a
セキュリティプロトコル

@advanced_1016_a
汎用一意識別子 (UUID)

@advanced_1017_a
システムプロパティから読み込まれた設定

@advanced_1018_a
用語集とリンク

@advanced_1019_h2
Result Sets

@advanced_1020_h3
行数の制限

@advanced_1021_p
アプリケーションから結果が返される前に、全ての行はデータベースによって読み取られます。 サーバー側のカーソルは現在サポートされていません。もし最初の数行がアプリケーションに読み取られたら、 result setサイズはパフォーマンスを改善するために制限されます。これは、クエリーの LIMIT を使用することで 実現できます (例: SELECT * FROM TEST LIMIT 100)、または Statement.setMaxRows(max) を使用します。

@advanced_1022_h3
大きなResult Set と外部ソート

@advanced_1023_p
1000行以上のresult setのために、結果はディスクにバッファーされます。 もし ORDER BY が使用されていたら、ソートは、外部ソートアルゴリズムを使用して 完了しています。このケースでは、それぞれの行のブロックはクイックソートを使用してソートされ、 ディスクに書き込まれています; データを読み込んでいる時、ブロックは一緒にマージされます。

@advanced_1024_h2
大きなオブジェクト

@advanced_1025_h3
大きなオブジェクトのソートと読み込み

@advanced_1026_p
メモリに収まらないオブジェクトは可能であるなら、 データ型は CLOB (テキストデータ) または BLOB (バイナリーデータ) が使用されるべきです。 これらのデータ型に関して、オブジェクトはストリームを使用して、完全にメモリから読み込まれるというわけではありません。 BLOB を保存するためには、PreparedStatement.setBinaryStream を使用します。 CLOB を使用するためには、PreparedStatement.setCharacterStream を使用します。 BLOB を読み込みためには、ResultSet.getBinaryStream を使用し、CLOB を読み込むために ResultSet.getCharacterStream を使用します。もし クライアント / サーバーモードが使用されていたら、 BLOB と CLOB データはアクセス時に完全にメモリから読み込まれます。このケースでは、メモリによって BLOB と CLOB のサイズは制限されています。

@advanced_1027_h2
リンクテーブル

@advanced_1028_p
このデータベースはリンクテーブルをサポートしています。これは、 現在存在しないテーブルは、ただ他のデータベースへリンクするという意味です。 このようなリンクを作るには、CREATE LINKED TABLE ステートメントを使用します:

@advanced_1029_p
この時、通常の方法でテーブルにアクセスすることが可能です。このテーブルにデータを挿入する時、 制限があります: テーブルに行を挿入、または更新する時、insertステートメントで設定されていないNULLと値は、 両方ともNULLとして挿入されます。目的のテーブルのデフォルト値がNULL以外なら、 望みどおりの効果は得られません。

@advanced_1030_p
#For each linked table a new connection is opened. This can be a problem for some databases when using many linked tables. For Oracle XE, the maximum number of connection can be increased. Oracle XE needs to be restarted after changing these values:

@advanced_1031_h2
トランザクション分離

@advanced_1032_p
このデータベースは次のトランザクション分離レベルをサポートしています:

@advanced_1033_b
Read Committed (コミット済み読み取り)

@advanced_1034_li
これはデフォルトレベルです。
read lockは早急に解除されます。 このレベルを使用する時、高い同時並行性が可能です。
これは多数のデータベースシステムで使用される分離レベルです。

@advanced_1035_li
これを有効にするには、 SQLステートメント 'SET LOCK_MODE 3' を実行します。

@advanced_1036_li
または、;LOCK_MODE=3 をデータベースURLに付け加えます: jdbc:h2:~/test;LOCK_MODE=3

@advanced_1037_b
Serializable (直列化)

@advanced_1038_li
これを有効にするには、 SQLステートメント 'SET LOCK_MODE 1' を実行します。

@advanced_1039_li
または、;LOCK_MODE=1 をデータベースURLに付け加えます: jdbc:h2:~/test;LOCK_MODE=1

@advanced_1040_b
Read Uncommitted (非コミット読み取り)

@advanced_1041_li
このレベルの意味は、トランザクション分離は無効だということです。

@advanced_1042_li
これを有効にするには、SQLステートメント 'SET LOCK_MODE 0' を実行します

@advanced_1043_li
または、;LOCK_MODE=0 をデータベースURLに付け加えます: jdbc:h2:~/test;LOCK_MODE=0

@advanced_1044_p
分離レベル "serializable" を使用している時、ダーティリード、反復不可能読み取り、 ファントムリードを防ぐことができます。

@advanced_1045_b
Dirty Reads (ダーティリード)

@advanced_1046_li
他の接続によるコミットされていない変更を読み取ることができる、という意味です。

@advanced_1047_li
実行可能: read uncommitted (非コミット読み取り)

@advanced_1048_b
Non-Repeatable Reads (反復不可能読み取り)

@advanced_1049_li
ひとつの接続が行を読み取り、 他の接続が行を変更し、コミットすると、最初の接続は同じ行を再読し、新しい結果を取得します。

@advanced_1050_li
実行可能: read uncommitted (非コミット読み取り)、read committed (コミット済み読み取り)

@advanced_1051_b
Phantom Reads (ファントムリード)

@advanced_1052_li
ひとつの接続が条件を使って行の集まりを読み取り、 他の接続がこの条件を壊して行を挿入し、コミットした時、最初の接続は同じ条件を使って再読し、 新しい行を取得します。

@advanced_1053_li
実行可能: read uncommitted (非コミット読み取り)、read committed (コミット済み読み取り)

@advanced_1054_h3
テーブルレベルロック

@advanced_1055_p
このデータベースは、同じデータベースへの複数の並列接続を許可しています。 全ての接続が一貫性のあるデータのみ参照できることを確認するために、テーブルレベルのロックを使用しています。 このメカニズムは高い同時並行性を要求しませんが、とても高速です。 共有ロックと排他ロックがサポートされています。 テーブルから読み取る前に、データベースはテーブルに共有ロックを追加しようとします (これはオブジェクト上に他の接続による排他ロックがない場合にのみ可能です)。 共有ロックが正常に追加されたら、テーブルを読み取ることができます。 他の接続も同じオブジェクトに共有ロックを持つことは許可されています。もし接続がテーブルに書き込みをしたいのであれば (行の更新、または削除)、排他ロックが必要です。排他ロックを取得するためには、 他の接続はオブジェクト上にどんなロックも持っていてはいけません。 接続のコミット後、全てのロックは解除されます。このデータベースは全てのロックをメモリ内に保持します。

@advanced_1056_h3
ロックタイムアウト

@advanced_1057_p
もし接続がオブジェクト上でロックを取得できないのであれば、一定時間待機します (ロックタイムアウト)。この時間の間、うまくいけば接続はロックコミットを保有し、 この時、ロックを取得することが可能です。他の接続がロックを解除しないため、 これが不可能であれば、失敗した接続がロックタイムアウト例外を取得します。 それぞれの接続に個別にロックタイムアウトを設定することができます。

@advanced_1058_h2
クラスタリング / 高可用性

@advanced_1059_p
このデータベースは簡単なクラスタリング / 高可用性メカニズムをサポートしています。 アーキテクチャ: 二つのデータベースサーバーは二つの異なったコンピューター上で動作し、 両方のコンピューターは同じデータベースのコピーです。もし両方のサーバーが動いたら、 それぞれのデータベース操作は両方のコンピューター上で実行されます。ひとつのサーバーがおちたら (電源、ハードウェア、またはネットワーク障害)、他のサーバーはまだ動作を続行します。 このポイントから、操作は他のサーバーがバックアップされるまで、ひとつのサーバー上で実行されます。

@advanced_1060_p
クラスタリングはサーバーモードでのみ使用できます (エンベッドモードはクラスタリングをサポートしていません)。 サーバーを停止しないでクラスタを回復することは可能ですが、二番目のデータベースが回復している間に、 他のどんなアプリケーションでも最初のデータベースのデータを変更しないことは重要なため、 クラスタを回復するのは現在手動プロセスです。

@advanced_1061_p
クラスタを初期化するには、次の手順に従います:

@advanced_1062_li
データベースを作成する

@advanced_1063_li
他の位置にデータベースをコピーし、クラスタリングを初期化するために、 CreateClusterツールを使用します。その後、同じデータが含まれる二つのデータベースを所有します。

@advanced_1064_li
二つのサーバーを起動します (ひとつはそれぞれのデータベースのコピー)

@advanced_1065_li
これでクライアントアプリケーションのデータベースに接続する準備ができました

@advanced_1066_h3
CreateClusterツールを使用する

@advanced_1067_p
クラスタリングがどのように機能するか理解するために、 次の例を試してみて下さい。この例では、二つのデータベースは同じコンピューター内に属していますが、 通常は、データベースは異なるサーバー内にあります。

@advanced_1068_li
二つのディレクトリを作成します: server1 と server2 です。それぞれのディレクトリは コンピューター上のディレクトリをシミュレートします。

@advanced_1069_li
最初のディレクトリを示してTCPサーバーを起動します。 次のコマンドラインを使用して実行できます:

@advanced_1070_li
二番目のディレクトリを示して二番目のTCPサーバーを起動します。 これは二番目の (重複の) コンピューターで動いているサーバーをシミュレートします。 次のコマンドラインを使用して実行できます:

@advanced_1071_li
クラスタリングを初期化するためにCreateClusterツールを使用します。 データベースが存在しなければ、自動的に新しい、空のデータベースを作成します。 次のコマンドラインでツールを実行します:

@advanced_1072_li
これでアプリケーション、または JDBC URL jdbc:h2:tcp://localhost:9101,localhost:9102/test を使用したH2コンソールを使用してデータベースへアクセスできます。

@advanced_1073_li
サーバーを止めたら (プロセスを無視して)、他のマシンは動作を続行し、 従ってデータベースもまだアクセス可能だということがわかります。

@advanced_1074_li
クラスタを回復するために、まず最初に失敗したデータベースを削除し、止められていたサーバーを 再起動します。そして、CreateClusterツールを再実行します。

@advanced_1075_h3
クラスタリングアルゴリズムと制限

@advanced_1076_p
読み取り専用クエリーは、最初のクラスタノードに対してのみ 実行されますが、他の全てのステートメントは全てのノードに対して実行されます。 現在、トランザクションの問題を回避するように作られたロードバランシングは存在しません。 次の関数は、異なったクラスタノード上で異なった結果をもたらすので、実行には注意して下さい: RANDOM_UUID()、SECURE_RAND()、SESSION_ID()、MEMORY_FREE()、 MEMORY_USED()、CSVREAD()、CSVWRITE()、RAND() [seed を使用していない時] 直接ステートメントを変更する際に、これらの関数を使用してはなりません (例: INSERT、 UPDATE、または MERGE)。しかし、読み取り専用ステートメントでは使用でき、 結果はステートメントを変更するために使用することができます。

@advanced_1077_h2
2フェーズコミット

@advanced_1078_p
2フェーズコミットプロトコルがサポートされています。 2フェーズコミットは次のように機能します:

@advanced_1079_li
オートコミットはOFFの状態であることが必要です

@advanced_1080_li
トランザクションは、例えば行を挿入することによって、起動されます

@advanced_1081_li
トランザクションは、SQLステートメント PREPARE COMMIT transactionName を実行することによって "prepared" とマークされます

@advanced_1082_li
現在トランザクションはコミット、またはロールバックすることができます

@advanced_1083_li
トランザクションがコミット、またはロールバックに成功する前に問題が起きたら (例えば、ネットワークの問題が起きたことによって)、トランザクションは "in-doubt" の状態になります

@advanced_1084_li
データベースへの再接続時、in-doubtトランザクションは SELECT * FROM INFORMATION_SCHEMA.IN_DOUBT でリストアップされます

@advanced_1085_li
リスト上のそれぞれのトランザクションは、COMMIT TRANSACTION transactionName または、 ROLLBACK TRANSACTION transactionName を実行してコミット、またはロールバックされなければなりません

@advanced_1086_li
変更を適用するために、データベースを終了し、再び開く必要があります

@advanced_1087_h2
互換性

@advanced_1088_p
このデータベースは (ある程度までは)、HSQLDB、MySQL や PostgreSQLのような 他のデータベースと互換性があります。H2が互換性のないある一定の領域があります。

@advanced_1089_h3
オートコミットがONの時のトランザクションコミット

@advanced_1090_p
この時、このデータベースエンジンは 結果が返ってくる直前にトランザクションをコミットします (オートコミットがONの場合)。 クエリーにとって、アプリケーションがresult setを通してスキャンする前や、result setが閉じられる前でさえも、 トランザクションはコミットされるということを意味しています。このケースでは、他のデータベースエンジンは result setが閉じられる時、トランザクションをコミットします。

@advanced_1091_h3
キーワード / 予約語

@advanced_1092_p
引用 (二重引用符で囲まれる) されない限り、識別子 (テーブル名、カラム名など) として使用できないキーワードのリストがあります。 現在のリスト:

@advanced_1093_p
CURRENT_TIMESTAMP, CURRENT_TIME, CURRENT_DATE, CROSS, DISTINCT, EXCEPT, EXISTS, FROM, FOR, FALSE, FULL, GROUP, HAVING, INNER, INTERSECT, IS, JOIN, LIKE, MINUS, NATURAL, NOT, NULL, ON, ORDER, PRIMARY, ROWNUM, SELECT, SYSDATE, SYSTIME, SYSTIMESTAMP, TODAY, TRUE, UNION, WHERE

@advanced_1094_p
このリストのある特定のワードはキーワードです。なぜなら、例えば CURRENT_TIMESTAMP のような 互換性のため "()" なしで使用できる関数だからです。

@advanced_1095_h2
Windowsサービスとして実行する

@advanced_1096_p
ネイティブラッパー / アダプタを使用して、JavaアプリケーションはWindowsサービスとして実行できます。これを実行するために、様々なツールが有効です。Tanuki Software, Inc. (<a href="http://wrapper.tanukisoftware.org/">http://wrapper.tanukisoftware.org/</a>) のJavaサービスラッパーはインストールが含まれています。H2データベースエンジンサービスのインストール、起動、終了とアンインストールのためのバッチファイルが添付されます。このサービスは、TCPサーバーとH2コンソールWebアプリケーションが含まれます。バッチファイルは、H2/service ディレクトリに配置されています。

@advanced_1097_h3
サービスをインストールする

@advanced_1098_p
サービスは、最初にWindowsサービスとして登録することが必要です。 これを行うために、1_install_service.bat をダブルクリックします。 成功すれば、コマンドプロンプトウィンドウが開き、すぐに消えます。失敗したらメッセージが現れます。

@advanced_1099_h3
サービスを起動する

@advanced_1100_p
Windowsのサービスマネージャを使用するか、2_start_service.bat をダブルクリックして H2データベースエンジンサービスを起動することができます。サービスがインストールされていなければ、 バッチファイルはエラーメッセージを表示しないということに注意して下さい。

@advanced_1101_h3
H2コンソールに接続する

@advanced_1102_p
サービスのインストールと起動後、ブラウザを使用してH2コンソールアプリケーションに 接続することができます。3_start_browser.bat をダブルクリックして実行します。 デフォルトのポート (8082) はバッチファイルでハードコード化されているものです。

@advanced_1103_h3
サービスを終了する

@advanced_1104_p
サービスを終了するには、4_stop_service.bat をダブルクリックします。 サービスがインストール、または開始されていなければ、 バッチファイルはエラーメッセージを表示しないということに注意して下さい。

@advanced_1105_h3
サービスのアンインストール

@advanced_1106_p
サービスをアンインストールするには、5_uninstall_service.bat をダブルクリックします。成功すれば、コマンドプロンプトウィンドウが開き、すぐに消えます。 失敗したらメッセージが現れます。 

@advanced_1107_h2
ODBCドライバ

@advanced_1108_p
#This database does not come with its own ODBC driver at this time, but it supports the PostgreSQL network protocol. Therefore, the PostgreSQL ODBC driver can be used. Support for the PostgreSQL network protocol is quite new and should be viewed as experimental. It should not be used for production applications.

@advanced_1109_p
#At this time, the PostgreSQL ODBC driver does not work on 64 bit versions of Windows. For more information, see: <a href="http://svr5.postgresql.org/pgsql-odbc/2005-09/msg00127.php">ODBC Driver on Windows 64 bit</a>

@advanced_1110_h3
#ODBC Installation

@advanced_1111_p
#First, the ODBC driver must be installed. Any recent PostgreSQL ODBC driver should work, however version 8.2.4 or newer is recommended. The Windows version of the PostgreSQL ODBC driver is available at <a href="http://www.postgresql.org/ftp/odbc/versions/msi">http://www.postgresql.org/ftp/odbc/versions/msi</a> .

@advanced_1112_h3
#Starting the Server

@advanced_1113_p
#After installing the ODBC driver, start the H2 Server using the command line:

@advanced_1114_p
#The PG Server (PG for PostgreSQL protocol) is started as well. By default, databases are stored in the current working directory where the server is started. Use -baseDir to save databases in another directory, for example the user home directory:

@advanced_1115_p
#The PG server can be started and stopped from within a Java application as follows:

@advanced_1116_p
#By default, only connections from localhost are allowed. To allow remote connections, use <code>-pgAllowOthers true</code> when starting the server.

@advanced_1117_h3
#ODBC Configuration

@advanced_1118_p
#After installing the driver, a new Data Source must be added. In Windows, run <code>odbcad32.exe</code> to open the Data Source Administrator. Then click on 'Add...' and select the PostgreSQL Unicode driver. Then click 'Finish'. You will be able to change the connection properties:

@advanced_1119_th
#Property

@advanced_1120_th
#Example

@advanced_1121_th
#Remarks

@advanced_1122_td
#Data Source

@advanced_1123_td
#H2 Test

@advanced_1124_td
#The name of the ODBC Data Source

@advanced_1125_td
#Database

@advanced_1126_td
#test

@advanced_1127_td
#The database name. Only simple names are supported at this time;

@advanced_1128_td
#relative or absolute path are not supported in the database name.

@advanced_1129_td
#By default, the database is stored in the current working directory

@advanced_1130_td
#where the Server is started except when the -baseDir setting is used.

@advanced_1131_td
#The name must be at least 3 characters.

@advanced_1132_td
#Server

@advanced_1133_td
#localhost

@advanced_1134_td
#The server name or IP address.

@advanced_1135_td
#By default, only remote connections are allowed

@advanced_1136_td
#User Name

@advanced_1137_td
#sa

@advanced_1138_td
#The database user name.

@advanced_1139_td
#SSL Mode

@advanced_1140_td
#disabled

@advanced_1141_td
#At this time, SSL is not supported.

@advanced_1142_td
#Port

@advanced_1143_td
#5435

@advanced_1144_td
#The port where the PG Server is listening.

@advanced_1145_td
#Password

@advanced_1146_td
#sa

@advanced_1147_td
#The database password.

@advanced_1148_p
#Afterwards, you may use this data source.

@advanced_1149_h3
#PG Protocol Support Limitations

@advanced_1150_p
#At this time, only a subset of the PostgreSQL network protocol is implemented. Also, there may be compatibility problems on the SQL level, with the catalog, or with text encoding. Problems are fixed as they are found. Currently, statements can not be cancelled when using the PG protocol.

@advanced_1151_h3
#Security Considerations

@advanced_1152_p
#Currently, the PG Server does not support challenge response or encrypt passwords. This may be a problem if an attacker can listen to the data transferred between the ODBC driver and the server, because the password is readable to the attacker. Also, it is currently not possible to use encrypted SSL connections. Therefore the ODBC driver should not be used where security is important.

@advanced_1153_h2
ACID

@advanced_1154_p
データベースの世界では、ACIDとは以下を表しています:

@advanced_1155_li
Atomicity (原子性) : トランザクションはアトミックでなければならず、全てのタスクが実行されたか、実行されないかの どちらかであるという意味です。

@advanced_1156_li
Consistency (一貫性) : 全てのオペレーションは定義された制約に従わなくてはいけません。

@advanced_1157_li
Isolation (独立性 / 分離性) : トランザクションはそれぞれ独立 (隔離) されていなくてはなりません。

@advanced_1158_li
Durability (永続性) : コミットされたトランザクションは失われません。

@advanced_1159_h3
Atomicity (原子性)

@advanced_1160_p
このデータベースでのトランザクションは常にアトミックです。

@advanced_1161_h3
Consistency (一貫性)

@advanced_1162_p
このデータベースは常に一貫性のある状態です。 参照整合性のルールは常に実行されます。

@advanced_1163_h3
Isolation (独立性 / 分離性)

@advanced_1164_p
#For H2, as with most other database systems, the default isolation level is 'read committed'. This provides better performance, but also means that transactions are not completely isolated. H2 supports the transaction isolation levels 'serializable', 'read committed', and 'read uncommitted'.

@advanced_1165_h3
Durability (永続性)

@advanced_1166_p
#This database does not guarantee that all committed transactions survive a power failure. Tests show that all databases sometimes lose transactions on power failure (for details, see below). Where losing transactions is not acceptable, a laptop or UPS (uninterruptible power supply) should be used. If durability is required for all possible cases of hardware failure, clustering should be used, such as the H2 clustering mode.

@advanced_1167_h2
永続性問題

@advanced_1168_p
完全な永続性とは、全てのコミットされたトランザクションは電源異常に耐えられる、ということを意味します。 いくつかのデータベースは、永続性を保証すると主張していますが、このような主張は誤っています。 永続性テストはH2、HSQLDB、PostgreSQL、Derbyに対して実行されました。これらの全てのデータベースは、 時々コミットされたトランザクションを失います。このテストはH2ダウンロードに含まれています。 org.h2.test.poweroff.Test をご覧下さい。

@advanced_1169_h3
永続性を実現する (しない) 方法

@advanced_1170_p
失われなかったコミット済みトランザクションは、最初に思うよりもより複雑だということを理解して下さい。 完全な永続性を保障するためには、データベースは、コミットの呼び出しが返ってくる前に ログレコードがハードドライブ上にあることを確実にしなければなりません。 これを行うために、データベースは異なったメソッドを使用します。ひとつは "同期書き込み" ファイルアクセスモードを使用することです。Javaでは、RandomAccessFile はモード "rws" と "rwd" を サポートしています:

@advanced_1171_li
rwd: それぞれのファイル内容の更新は、元になるストレージデバイスと同時に書き込まれます。

@advanced_1172_li
rws: rwdに加えて、それぞれのメタデータの更新は同時に書き込まれます。

@advanced_1173_p
この特徴はDerbyで使用されています。それらのモードのうちのひとつは、テスト (org.h2.test.poweroff.TestWrite) において、毎秒およそ5万件の書き込み操作を実現します。オペレーティングシステムのライトバッファーが無効の時でさえも、 書き込み速度は毎秒およそ5万件です。この特徴はディスクを交換させるというものではありません。 なぜなら、全てのバッファーをフラッシュするのではないからです。テストはファイル内の同じバイトを何度も更新しました。 もしハードドライブがこの速度での書き込みが可能なら、ディスクは少なくても毎秒5万回転か、 または300万 RPM (revolutions per minute 回転毎分) を行う必要があります。 そのようなハードドライブは存在しません。テストで使用されたハードドライブは、およそ7200 RPM、または 毎秒120回転です。これがオーバーヘッドなので、最大書き込み速度はこれより低くなくてはなりません。

@advanced_1174_p
バッファーは fsync 関数を呼ぶことによってフラッシュされます。Javaでこれを行う二つの方法があります:

@advanced_1175_li
FileDescriptor.sync() ドキュメンテーションには、これは強制的に全てのシステムバッファーに基本となる デバイスとの同期を取らせる、と書かれています。このFileDescriptorに関連するバッファーのインメモリでの 変更コピーが全て物理メディアに書かれた後、Syncは返ることになっています。

@advanced_1176_li
FileChannel.force() (JDK 1.4 以来) このメソッドは、強制的にこのチャネルのファイルの更新は それを含むストレージデバイスに書き込まれることを行います。

@advanced_1177_p
デフォルトでは、MySQLはそれぞれのコミットごとに fsync を呼びます。それらのメソッドのうちひとつを使用している時、 毎秒およそ60件だけが実行され、使用されているハードドライブのRPM速度と一貫性があります。 残念ながら、FileDescriptor.sync() または FileChannel.force() を呼んだ時でさえも データは常にハードドライブに存続するとは限りません。なぜなら、多くのハードドライブは fsync() に従わないからです: http://hardware.slashdot.org/article.pl?sid=05/05/13/0529252 内の"Your Hard Drive Lies to You" をご覧下さい。Mac OS X では、fsync はハードドライブバッファーをフラッシュしません: http://lists.apple.com/archives/darwin-dev/2005/Feb/msg00072.html そのため状況は混乱していて、 問題があることをテストは証明しています。

@advanced_1178_p
ハードドライブバッファーを懸命にフラッシュしようと試みると、パフォーマンスは非常に悪いものになります。 最初に、ハードドライブは実際には全てのバッファーをフラッシュしているということを確かめることが必要です。 テストは信頼性ある方法でこれが行われていないことを示しています。その結果、トランザクションの最大数は毎秒およそ60件です。 これらの理由により、H2のデフォルト性質はコミットされたトランザクションの書き込みを遅らせることです。

@advanced_1179_p
H2では、電源異常の後、1秒以上のコミットされたトランザクションが失われます。 この性質を変更するためには。 SET WRITE_DELAY と CHECKPOINT SYNC を使用します。 多くの他のデータベースも同様に遅延コミットをサポートしています。パフォーマンス比較では、 遅延コミットは、サポートする全てのデータベースによって使用されました。

@advanced_1180_h3
永続性テストを実行する

@advanced_1181_p
このデータベースと他のデータベースの、永続性 / 非永続性テストを行うために、 パッケージ内 org.h2.test.poweroff のテストアプリケーションを使用することができます。 ネットワーク接続の二つのコンピューターがこのテストを実行するのに必要です。 ひとつのコンピューターは、他のコンピューター上でテストアプリケーションが実行されている間 (電源は切られています) ただ聞いています。リスナーアプリケーションのコンピューターは TCP/IP ポートを開き、 次の接続のために聞きます。二つ目のコンピューターは最初リスナーに接続し、データベースを作成して レコードの挿入を開始します。この接続は "autocommit" に設定されます。それぞれのレコード挿入後のコミットが 自動的に行われるという意味です。その後、テストコンピューターはこのレコードの挿入に成功したということを リスナーに通知します。リスナーコンピューターは10秒ごとに最後に挿入されたレコードを表示します。 電源を手動でOFFにしてコンピューターを再起動し、アプリケーションを再び実行します。 多くのケースで、リスナーコンピューターが知る全てのレコードを含むデータベースはないということがわかります。 詳細は、リスナーのソースコードとテストアプリケーションを参照して下さい。 

@advanced_1182_h2
リカバーツールを使用する

@advanced_1183_p
リカバーツールはデータベースが破損している場合においても、 データファイルのコンテンツを復元するために使用されます。現段階では、ログファイルのコンテンツ、 または大きなオブジェクト (CLOB または BLOB) は復元しません。 このツールを実行するには、このコマンドラインをタイプして下さい:

@advanced_1184_p
現在のディレクトリのそれぞれのデータベースのために、テキストファイルが作られます。 このファイルには、データベースのスキーマを再び作成するために、行挿入ステートメント (データのための) と data definition (DDL) ステートメントを含んでいます。このファイルは、行挿入ステートメントが 正しいテーブル名を保持していないため、直接実行するこはできません。そのため、 ファイルは実行する前に手動で前処理を行う必要があります。

@advanced_1185_h2
ファイルロックプロトコル

@advanced_1186_p
データベースが開かれている時はいつでも、他のプロセスでデータベースが使用中だということを 知らせるためにロックファイルが作られます。もしデータベースが閉じられたら、または データベースが開かれたプロセスが終了したら、このロックファイルは削除されます。

@advanced_1187_p
特別なケースでは (例えば、停電のためプロセスが正常に終了されなかった場合)、 ロックファイルは作られたプロセスによって削除されません。これは、ロックファイルの存在は、 ファイルロックのための安全なプロトコルではない、ということを意味しています。 しかし、このソフトウェアはデータベースファイルを守るため、challenge-responseプロトコルを使用します。 セキュリティ (同じデータベースファイルは、同時に二つのプロセスによって開かれてはいけない) と シンプリシティー (ロックファイルはユーザーによって手動で削除される必要がない) の両方を備えるために 二つのメソッド (アルゴリズム) が実行されます。二つのメソッドは、"Fileメソッド" と "Socketメソッド" です。

@advanced_1188_h3
ファイルロックメソッド "File"

@advanced_1189_p
データベースファイルロックのデフォルトメソッドは "Fileメソッド" です。アルゴリズム:

@advanced_1190_li
ロックファイルが存在しない時は、作成されます (アトミックオペレーション File.createNewFile を使用する)。 その時、プロセスは少し (20ms) 待機し、再びファイルをチェックします。 もしファイルがこの間に変更されたら、オペレーションは中止されます。 ロックファイルを作成したすぐ後にプロセスがロックファイルを削除する時、 これはレースコンディションから保護し、三番目のプロセスはファイルを再び作成します。 二つのライターしか存在しなければ、これは起こりません。

@advanced_1191_li
もしファイルが作成されたら、ロックメソッド ("file") でランダムな番号が一緒に挿入されます。 その後、ファイルが他のスレッド/ プロセスによって削除、または 修正された時、定期的にチェックする (デフォルトでは毎秒1回) watchdogスレッドは開始されます。 これが起きる時はいつも、ファイルは古いデータに上書きされます。システムが非常に混み合っている時でさえも、 非検出の状態で処理できないロックファイルを変更するために、watchdogスレッドは最優先に実行します。 しかし、watchdogスレッドはほとんどの時間待機しているため、非常に小さなリソース (CPU time) を使用します。 また、watchdogはハードディスクから読み取りのみ行い、書き込みはしません。

@advanced_1192_li
もしロックファイルが存在し、20ms内に変更されたら、プロセスは数回 (10回以上) 待機します。 まだ変更されていたら、例外が投げられます (データベースはロックされます)。 多数の並列ライターで競合している状態を排除するためにこれが行われます。 その後、ファイルは新しいバージョンに上書きされます。 そして、スレッドは2秒間待機します。もしファイルを保護するwatchdogスレッドが存在したら、 変更は上書きし、このプロセスはデータベースをロックするために機能しなくなります。 しかし、もしwatchdogスレッドが存在しなければ、ロックファイルはこのスレッドによって 書かれたままの状態です。このケースでは、ファイルは削除され、自動的にまた作成されます。 watchdogスレッドはこのケースでは起動され、ファイルはロックされます。

@advanced_1193_p
このアルゴリズムは100以上の並列スレッドでテストされました。いくつかのケースでは、 データベースをロックしようとする多数の並列スレッドが存在する時、それらはしばらくお互いをブロックします (それらのうちどれかがファイルをロックすることができないことを意味します)。 しかし、ファイルは同時に二つのスレッドによってロックされることは決してありません。 しかし、多数の並列スレッド / プロセスを使用することは一般的な使用ケースではありません。 通常、データベースを開くことができなかったり、(速い)ループのやり直しができなかったりした場合、 アプリケーションはユーザーにエラーを投げるべきです。

@advanced_1194_h3
ファイルロックメソッド "Socket"

@advanced_1195_p
実行される二つ目のロックメカニズムがありますが、 デフォルトでは使用不可です。アルゴリズムは:

@advanced_1196_li
ロックファイルが存在しない時は、作成されます。その時、サーバーソケットは定義されたポートで開かれ、 開かれた状態を保ちます。開かれたデータベースのプロセスのポートとIPアドレスはロックファイルの中に書かれています。

@advanced_1197_li
もしロックファイルが存在し、ロックメソッドが "file" なら、ソフトウェアは "file" メソッドにスイッチします。

@advanced_1198_li
もしロックファイルが存在し、ロックメソッドが "socket" なら、プロセスはポートが使用されているかチェックします。 最初のプロセスがまだ実行されていたら、ポートは使用されていれ、このプロセスは例外を投げます (database is in use)。 最初のプロセスが失われたら (例えば、停電または、仮想マシンの異常終了のため)、ポートは解除されます。 新しいプロセスはロックファイルを削除し、再び起動します。

@advanced_1199_p
このメソッドは、活発に毎秒同じファイルをポーリングする (読み込む) watchdogスレッドを必要としていません。 このメソッドの問題は、ファイルがネットワークシェアに保存されたら、二つのプロセスは (異なるコンピューターで実行中の)、 TCP/IP接続を直接保持していなければ、同じデータベースファイルを開くことができます。

@advanced_1200_h2
SQLインジェクションに対する防御

@advanced_1201_h3
SQLインジェクションとは

@advanced_1202_p
このデータベースエンジンは "SQLインジェクション" として知られる セキュリティ脆弱性の解決策を備えています。 これは、SQLインジェクションの意味とは何か、 についての短い説明です。いくつかのアプリケーションは、エンベッドユーザーがこのように入力する SQLステートメントを構築します:

@advanced_1203_p
このメカニズムがアプリケーションのどこかで使用され、ユーザー入力が正しくないフィルター処理、 またはエンベッドなら、ユーザーはパスワード: ' OR ''=' のような (この例の場合) 特別に作られた入力を使用することによって、SQLの機能、またはステートメントに入り込むことが可能です。 このケースでは、ステートメントはこのようになります:

@advanced_1204_p
データベースに保存されたパスワードが何であっても、これは常に正しいものになります。 SQLインジェクションについての詳細は、用語集とリンク をご覧下さい。

@advanced_1205_h3
リテラルを無効にする

@advanced_1206_p
ユーザー入力が直接SQLステートメントに組み込まれなければ、 SQLインジェクションは不可能です。上記の問題の簡単な解決方法は、PreparedStatementを使用することです:

@advanced_1207_p
このデータベースは、ユーザー入力をデータベースに通す時、パラメータの使用を強制する方法を提供しています。 SQLステートメントの組み込まれたリテラルを無効にすることでこれを実行します。 次のステートメントを実行します:

@advanced_1208_p
その後、文字列リテラルや数値リテラルのSQLステートメントはもう認められません。これは、 WHERE NAME='abc' や WHERE CustomerId=10 といった形のSQLステートメントは失敗するという意味です。 PreparedStatementや上に記載されたパラメータは使用することができます。また、 リテラルの含まれないSQLステートメントと同様に、SQLステートメントを動的に生成したり、 APIステートメントを使用することも可能です。数値リテラルが許可されている二つ目のモードもあります: SET ALLOW_LITERALS NUMBERS 全てのリテラルを許可するには、 SET ALLOW_LITERALS ALL を実行します (これはデフォルトの設定です)。リテラルはadministratorのみによって使用可能、または使用不可になります。

@advanced_1209_h3
定数を使用する

@advanced_1210_p
リテラルを無効にするということは、ハードコード化された "定数" リテラルを無効にする、 ということも意味します。このデータベースは、CREATE CONSTANT コマンドを使用して定数を定義することをサポートしています。 定数はリテラルが有効であるときのみ定義することができますが、リテラルが無効の時でも使用することができます。 カラム名の名前の衝突を避けるために、定数は他のスキーマで定義できます:

@advanced_1211_p
リテラルが有効の時でも、クエリーやビューの中でハードコード化された数値リテラル、 またはテキストリテラルの代わりに、定数を使用する方がより良いでしょう。With 定数では、タイプミスはコンパイル時に発見され、ソースコードは理解、変更しやすくなります。

@advanced_1212_h3
ZERO() 関数を使用する

@advanced_1213_p
組み込み関数 ZERO() がすでにあるため、 数値 0 のための定数を作る必要はありません:

@advanced_1214_h2
セキュリティプロトコル

@advanced_1215_p
次の文章は、このデータベースで使用されている セキュリティプロトコルのドキュメントです。これらの記述は非常に専門的で、 根本的なセキュリティの基本をすでに知っているセキュリティ専門家のみを対象としています。

@advanced_1216_h3
ユーザーパスワードの暗号化

@advanced_1217_p
ユーザーがデータベースに接続しようとする時、ユーザー名の組み合わせ、@、パスワードは SHA-256 を使用してハッシュ化され、このハッシュ値はデータベースに送信されます。 この手順は、クライアントとサーバー間の転送をアタッカーが聞ける (非暗号化できる) のであれば、 再使用する値からのアタッカーを試みることはありません。しかし、パスワードはクライアントとサーバー間で 暗号化されていない接続を使用している時でさえも、プレーンテキストで送信されることはありません これはもしユーザーが、異なる場面で同じパスワードを再利用しても、このパスワードはある程度まで保護されます。 詳細は"RFC 2617 - HTTP Authentication: Basic and Digest Access Authentication" もご覧下さい。

@advanced_1218_p
新しいデータベース、またはユーザーが作られた時、暗号化された安全なランダムの 新しいsalt値が生成されます。salt値のサイズは 64 bit です。 ランダムなsaltを使用することによって、多数の異なった (通常、使用された) パスワードのハッシュ値を アタッカーに再計算されるリスクが軽減します。

@advanced_1219_p
ユーザーパスワードのハッシュ値の組み合わせと (上記をご覧下さい) saltは SHA-256を使用してハッシュ化されます。 結果の値はデータベースに保存されます。ユーザーがデータベースに接続しようとする時、 データベースは、保存されたsalt値のユーザーパスワードのハッシュ値と計算されたハッシュ値を結合します。 他の製品は複数の反復 (ハッシュ値を繰り返しハッシュする) を使用していますが、 この製品ではサービス攻撃の拒絶 (アタッカーが偽のパスワードで接続しようとするところや、 サーバーがそれぞれのパスワードのハッシュ値を計算するのに長い時間費やすところ) のリスクを軽減するのに これは使用しません。理由は: もしアタッカーがハッシュ化されたパスワードにアクセスしたら、 プレーンテキストのデータにもアクセスできるため、パスワードはもはや必要ではなくなってしまいます。 もしデータが、保存されている他のコンピューターによって保護されていて、遠隔のみであるなら、 反復回数は全く必要とされません。

@advanced_1220_h3
ファイル暗号化

@advanced_1221_p
データベースファイルは二つの異なるアルゴリズムを使用して、暗号化されます: AES-128 と XTEA です (32 ラウンドを使用)。 XTEAをサポートする理由はパフォーマンス (XTEAはAESのおよそ二倍の速さです) と、AESが突然壊れた場合、代わりとなるアルゴリズムを 持っているからです。

@advanced_1222_p
ユーザーが暗号化されたデータベースに接続しようとした時、"file" という単語と、@と、 ファイルパスワードの組み合わせは、SHA-256を使用してハッシュ化されます。 このハッシュ値はサーバーに送信されます。

@advanced_1223_p
新しいデータベースファイルが作られた時、暗号化された安全なランダムの新しいsalt値が生成されます。 このsaltのサイズは 64 bitです。ファイルパスワードのハッシュとsalt値の組み合わせは、 SHA-256を使用して1024回ハッシュ化されます。反復の理由は、アタッカーが通常のパスワードの ハッシュ値を計算するよりも困難にするためです。

@advanced_1224_p
ハッシュ値の結果は、ブロック暗号アルゴリズム (AES-128、または 32ラウンドのXTEA) のためのキーとして 使用されます。その時、初期化ベクター (IV) キーは、再びSHA-256を使用してキーをハッシュ化することによって 計算されます。IVはアタッカーに知らないということを確認して下さい。秘密のIVを使用する理由は、 ウォーターマークアタック (電子透かし攻撃) を防御するためです。

@advanced_1225_p
データのブロックを保存する前に (それぞれのブロックは 8 バイト長)、次のオペレーションを 実行します: 最初に、IVはIVキー (同じblock cipher algorithmを使用して) でブロックナンバーを 暗号化することによって計算されます。このIVはXORを使用してプレーンテキストと併用されます。 結果データはAES-128、またはXTEAアルゴリズムを使用して暗号化されます。

@advanced_1226_p
復号化の時、オペレーションは反対に行われます。最初に、ブロックはキーを使用して復号化され、 その時、IVはXORを使用して復号化テキストと併用されます。

@advanced_1227_p
その結果、オペレーションのブロック暗号モードはCBT (Cipher-block chaining) ですが、 それぞれの連鎖はたったひとつのブロック長です。ECB (Electronic codebook) モードに優る利点は、 データのパターンが明らかにされない点で、複数のブロックCBCに優る利点は、 はじき出された暗号テキストビットは次のブロックではじき出されたプレーンテキストビットに伝播されないという点です。

@advanced_1228_p
データベース暗号化は、使用されていない間は (盗まれたノートパソコン等) 安全なデータベースだということを 意味します。これは、データベースが使用されている間に、アタッカーがファイルにアクセスしたというケースを 意味するのではありません。アタッカーが書き込みアクセスをした時、例えば、 彼はファイルの一部を古いバージョンに置き換え、データをこのように操ります。

@advanced_1229_p
ファイル暗号化はデータベースエンジンのパフォーマンスを低速にします。非暗号化モードと比較すると、 データベースオペレーションは、XTEAを使用する時はおよそ2.2倍長くかかり、 AESを使用する時は2.5倍長くかかります (エンベッドモード)。

@advanced_1230_h3
SSL/TLS 接続

@advanced_1231_p
遠隔SSL/TLS接続は、Java Secure Socket Extension (SSLServerSocket / SSLSocket) の使用をサポートしています。デフォルトでは、匿名のSSLは使用可能です。デフォルトの暗号化パッケージソフトは SSL_DH_anon_WITH_RC4_128_MD5 です。

@advanced_1232_h3
HTTPS 接続

@advanced_1233_p
webサーバーは、SSLServerSocketを使用したHTTP と HTTPS接続をサポートします。 簡単に開始できるように、デフォルトの自己認証された証明書がありますが、 カスタム証明書も同様にサポートされています。 

@advanced_1234_h2
汎用一意識別子 (UUID)

@advanced_1235_p
このデータベースはUUIDをサポートしています。 また、暗号化強力疑似乱数ジェネレーターを使用して新しいUUIDを作成する関数をサポートしています。 同じ値をもつ二つの無作為なUUIDが存在する可能性は、確率論を使用して計算されることができます。 "Birthday Paradox" もご覧下さい。標準化された無作為に生成されたUUIDは、122の無作為なビットを保持しています。 4ビットはバージョン(無作為に生成されたUUID) に、2ビットはバリアント (Leach-Salz) に使用されます。 このデータベースは組み込み関数 RANDOM_UUID() を使用してこのようなUUIDを生成することをサポートしています。 ここに、値の数字が生成された後、二つの 同一のUUIDが生じる可能性を見積もる小さなプログラムがあります:

@advanced_1236_p
いくつかの値は:

@advanced_1237_p
人の隕石に衝突するという年に一度の危険性は、170億に一回と見積もられ、それは、確率がおよそ 0.000'000'000'06 だということを意味しています。

@advanced_1238_h2
システムプロパティから読み込まれた設定

@advanced_1239_p
いくつかのデータベースの設定は、-DpropertyName=value を使用してコマンドラインで設定することができます。 通常、これらの設定は手動で変更することは必要とされていません。設定は大文字と小文字を区別しています。 例:

@advanced_1240_p
現在の設定の値は、INFORMATION_SCHEMA.SETTINGS テーブルで読み込むことが可能です。

@advanced_1241_th
設定

@advanced_1242_th
デフォルト

@advanced_1243_th
説明

@advanced_1244_td
h2.check

@advanced_1245_td
true

@advanced_1246_td
データベースエンジンでのアサーション

@advanced_1247_td
h2.check2

@advanced_1248_td
false

@advanced_1249_td
追加されたアサーション

@advanced_1250_td
h2.clientTraceDirectory

@advanced_1251_td
trace.db/

@advanced_1252_td
JDBCクライアントのトレースファイルが保存されているディレクトリ (クライアント / サーバーのみ)

@advanced_1253_td
h2.emergencySpaceInitial

@advanced_1254_td
1048576

@advanced_1255_td
ディスクの全ての問題を早く検出する "reserve" ファイルのサイズ

@advanced_1256_td
h2.emergencySpaceMin

@advanced_1257_td
131072

@advanced_1258_td
"reserve" ファイルの最小サイズ

@advanced_1259_td
h2.lobCloseBetweenReads

@advanced_1260_td
false

@advanced_1261_td
読み込みオペレーションの間にLOBファイルを閉じる

@advanced_1262_td
h2.lobFilesInDirectories

@advanced_1263_td
false

@advanced_1264_td
LOBファイルをサブディレクトリに保存する

@advanced_1265_td
h2.lobFilesPerDirectory

@advanced_1266_td
256

@advanced_1267_td
ディレクトリごとのLOBファイルの最大数

@advanced_1268_td
h2.logAllErrors

@advanced_1269_td
false

@advanced_1270_td
ファイルにどのの種類のエラーのスタックトレースを書き込む

@advanced_1271_td
h2.logAllErrorsFile

@advanced_1272_td
h2errors.txt

@advanced_1273_td
エラーを記録するファイル名

@advanced_1274_td
h2.maxFileRetry

@advanced_1275_td
16

@advanced_1276_td
再試行ファイルの削除と改名の回数

@advanced_1277_td
h2.multiThreadedKernel

@advanced_1278_td
false

@advanced_1279_td
同時に実行する複数セッションを許可する

@advanced_1280_td
h2.objectCache

@advanced_1281_td
true

@advanced_1282_td
一般に使用されるオブジェクトをキャッシュする (integer、string)

@advanced_1283_td
h2.objectCacheMaxPerElementSize

@advanced_1284_td
4096

@advanced_1285_td
キャッシュのオブジェクトの最大サイズ

@advanced_1286_td
h2.objectCacheSize

@advanced_1287_td
1024

@advanced_1288_td
オブジェクトキャッシュのサイズ

@advanced_1289_td
h2.optimizeEvaluatableSubqueries

@advanced_1290_td
true

@advanced_1291_td
#Optimize subqueries that are not dependent on the outer query

@advanced_1292_td
h2.optimizeIn

@advanced_1293_td
true

@advanced_1294_td
最適化 IN(...) 比較

@advanced_1295_td
h2.optimizeMinMax

@advanced_1296_td
true

@advanced_1297_td
最適化 MIN と MAX の集合関数

@advanced_1298_td
h2.optimizeSubqueryCache

@advanced_1299_td
true

@advanced_1300_td
サブクエリの結果をキャッシュ

@advanced_1301_td
h2.overflowExceptions

@advanced_1302_td
true

@advanced_1303_td
integerのオーバーフローに例外を投げる

@advanced_1304_td
h2.recompileAlways

@advanced_1305_td
false

@advanced_1306_td
常にprepared statementを再コンパイルする

@advanced_1307_td
h2.redoBufferSize

@advanced_1308_td
262144

@advanced_1309_td
redo bufferのサイズ (回復時に起動で使用)

@advanced_1310_td
h2.runFinalizers

@advanced_1311_td
true

@advanced_1312_td
閉じられていない接続を検出するために finalizers を実行する

@advanced_1313_td
h2.scriptDirectory

@advanced_1314_td
スクリプトファイルが保存されるか、読み込まれる相対、または絶対ディレクトリ

@advanced_1315_td
h2.serverCachedObjects

@advanced_1316_td
64

@advanced_1317_td
TCPサーバー: セッションごとのキャッシュオブジェクトの数

@advanced_1318_td
h2.serverSmallResultSetSize

@advanced_1319_td
100

@advanced_1320_td
TCPサーバー: このサイズ以下のresult setがひとつのブロックに送信される

@advanced_1321_h2
用語集とリンク

@advanced_1322_th
用語

@advanced_1323_th
説明

@advanced_1324_td
AES-128

@advanced_1325_td
ブロック暗号化アルゴリズム。こちらもご覧下さい:<a href="http://en.wikipedia.org/wiki/Advanced_Encryption_Standard">Wikipedia: AES</a>

@advanced_1326_td
Birthday Paradox

@advanced_1327_td
部屋にいる二人が同じ誕生日の可能性が期待された以上に高いということを説明する。 また、有効なランダムに生成されたUUID。こちらもご覧下さい:<a href="http://en.wikipedia.org/wiki/Birthday_paradox">Wikipedia: Birthday Paradox</a>

@advanced_1328_td
Digest

@advanced_1329_td
パスワードを保護するプロトコル (データは保護しません)。こちらもご覧下さい:<a href="http://www.faqs.org/rfcs/rfc2617.html">RFC 2617: HTTP Digest Access Authentication</a>

@advanced_1330_td
GCJ

@advanced_1331_td
JavaのGNUコンパイラー<a href="http://gcc.gnu.org/java/">http://gcc.gnu.org/java/</a> and <a href="http://nativej.mtsystems.ch">http://nativej.mtsystems.ch/ (not free any more)</a>

@advanced_1332_td
HTTPS

@advanced_1333_td
セキュリティをHTTP接続に提供するプロトコル。こちらもご覧下さい: <a href="http://www.ietf.org/rfc/rfc2818.txt">RFC 2818: HTTP Over TLS</a>

@advanced_1334_td
Modes of Operation

@advanced_1335_a
Wikipedia: Block cipher modes of operation

@advanced_1336_td
Salt

@advanced_1337_td
パスワードのセキュリティを増大する乱数。こちらもご覧下さい: <a href="http://en.wikipedia.org/wiki/Key_derivation_function">Wikipedia: Key derivation function</a>

@advanced_1338_td
SHA-256

@advanced_1339_td
暗号化の一方方向のハッシュ関数。こちらもご覧下さい:<a href="http://en.wikipedia.org/wiki/SHA_family">Wikipedia: SHA hash functions</a>

@advanced_1340_td
SQLインジェクション

@advanced_1341_td
組み込みのユーザー入力でアプリケーションがSQLステートメントを生成するセキュリティ脆弱性 こちらもご覧下さい:<a href="http://en.wikipedia.org/wiki/SQL_injection">Wikipedia: SQL Injection</a>

@advanced_1342_td
Watermark Attack (透かし攻撃)

@advanced_1343_td
復号化することなくあるデータの存在を証明できる、ある暗号化プログラムのセキュリティ問題。 詳細は、インターネットで "watermark attack cryptoloop" を検索して下さい。

@advanced_1344_td
SSL/TLS

@advanced_1345_td
Secure Sockets Layer / Transport Layer Security。こちらもご覧下さい: <a href="http://java.sun.com/products/jsse/">Java Secure Socket Extension (JSSE)</a>

@advanced_1346_td
XTEA

@advanced_1347_td
ブロック暗号化アルゴリズム。こちらもご覧下さい: <a href="http://en.wikipedia.org/wiki/XTEA">Wikipedia: XTEA</a>

@build_1000_h1
構築

@build_1001_a
#Portability

@build_1002_a
#Environment

@build_1003_a
#Building the Software

@build_1004_a
#Using Maven 2

@build_1005_h2
#Portability

@build_1006_p
#This database is written in Java and therefore works on many platforms. It can also be compiled to a native executable using GCJ.

@build_1007_h2
#Environment

@build_1008_p
#To build the database executables, the following software stack was used. In most cases, newer version or compatible software works too.

@build_1009_li
#Windows XP

@build_1010_li
#Sun JDK Version 1.4 or 1.5

@build_1011_li
#Apache Ant Version 1.6.5

@build_1012_li
#Mozilla Firefox 1.5

@build_1013_li
#Eclipse Version 3.2.2

@build_1014_li
#YourKit Java Profiler

@build_1015_h2
#Building the Software

@build_1016_p
#On the command line, go to the directory src and execute the following command:

@build_1017_p
#You will get a list of targets. If you want to build the jar files, execute:

@build_1018_p
#To create a jar file with the JDBC API and the classes required to connect to a server only, use the target jarClient:

@build_1019_p
#The other targets may be used as well.

@build_1020_h2
#Using Maven 2

@build_1021_h3
#Using a Central Repository

@build_1022_p
#You can include the database in your Maven 2 project as a dependency. Example:

@build_1023_h3
#Using Snapshot Version

@build_1024_p
#To build a 'snapshot' H2 .jar file and upload it the to the local Maven 2 repository, execute the following command:

@build_1025_p
#Afterwards, you can include the database in your Maven 2 project as a dependency:

@download_1000_h1
#Downloads

@download_1001_h3
#Version 1.0.58 (2007-09-15, Current)

@download_1002_a
#Windows Installer

@download_1003_a
#Platform-Independent Zip

@download_1004_h3
#Version 1.0 / 2007-03-04 (Last Stable)

@download_1005_a
#Windows Installer

@download_1006_a
#Platform-Independent Zip

@download_1007_h3
#Download Mirror

@download_1008_a
#Platform-Independent Zip

@download_1009_h3
#Subversion Source Repository

@download_1010_a
#Google Code

@download_1011_p
#For details about changes, see the <a href="history.html">Change Log</a> .

@faq_1000_h1
#Frequently Asked Questions

@faq_1001_a
#Are there any known bugs? When is the next release?

@faq_1002_a
#Is this Database Engine Open Source?

@faq_1003_a
#My query is slow

@faq_1004_a
#How to Create a New Database?

@faq_1005_a
#How to Connect to a Database?

@faq_1006_a
#Where are the Database Files Stored?

@faq_1007_a
#What is the Size Limit (maximum size) of a Database?

@faq_1008_a
#Is it Reliable?

@faq_1009_a
#Is the GCJ version stable? Faster?

@faq_1010_a
#How to Translate this Project?

@faq_1011_h3
#Are there any known bugs? When is the next release?

@faq_1012_p
#Usually, bugs get fixes as they are found. There is a release every few weeks. Here is the list of known and confirmed issues as of 2007-09-15:

@faq_1013_li
#Some problems have been found with right outer join. Internally, it is converted to left outer join, which  does not always produce the same results as other databases when used in combination with other joins.

@faq_1014_h3
#Is this Database Engine Open Source?

@faq_1015_p
#Yes. It is free to use and distribute, and the source code is included. See also under license.

@faq_1016_h3
#My query is slow

@faq_1017_p
#Slow SELECT (or DELETE, UPDATE, MERGE) statement can have multiple reasons. Follow this checklist:

@faq_1018_li
#Run ANALYSE (see documentation for details).

@faq_1019_li
#Run the query with EXPLAIN and check if indexes are used (see documentation for details).

@faq_1020_li
#If required, create additional indexes and try again using ANALYZE and EXPLAIN.

@faq_1021_li
#If it doesn't help please report the problem.

@faq_1022_h3
#How to Create a New Database?

@faq_1023_p
#By default, a new database is automatically created if it does not yet exist.

@faq_1024_h3
#How to Connect to a Database?

@faq_1025_p
#The database driver is <code>org.h2.Driver</code> , and the database URL starts with <code>jdbc:h2:</code> . To connect to a database using JDBC, use the following code:

@faq_1026_h3
#Where are the Database Files Stored?

@faq_1027_p
#When using database URLs like jdbc:h2:~/test, the database is stored in the user directory. For Windows, this is usually C:\Documents and Settings\&lt;userName&gt;. If the base directory is not set (as in jdbc:h2:test), the database files are stored in the directory where the application is started (the current working directory). When using the H2 Console application from the start menu, this is [Installation Directory]/bin. The base directory can be set in the database URL. A fixed or relative path can be used. When using the URL jdbc:h2:file:data/sample, the database is stored in the directory data (relative to the current working directory). The directory must exist. It is also possible to use the fully qualified directory (and for Windows, drive) name. Example: jdbc:h2:file:C:/data/test

@faq_1028_h3
#What is the Size Limit (maximum size) of a Database?

@faq_1029_p
#The theoretical limit is currently 256 GB for the data. This number is excluding BLOB and CLOB data: Every CLOB or BLOB can be up to 256 GB as well. The size limit of the index data is 256 GB as well.

@faq_1030_p
#The maximum file size for FAT or FAT32 file systems is 4 GB. So if you use FAT or FAT32, the limit is 4 GB for the data.

@faq_1031_h3
#Is it Reliable?

@faq_1032_p
#That is not easy to say. It is still a quite new product. A lot of tests have been written, and the code coverage of these tests is very high. Randomized stress tests are run regularly. But as this is a relatively new product, there are probably some problems that have not yet been found. Areas that are not 100% tested:

@faq_1033_li
#Platforms other than Windows XP and the Sun JVM 1.4 and 1.5

@faq_1034_li
#Data types BLOB, CLOB, VARCHAR_IGNORECASE, OTHER

@faq_1035_li
#Cluster mode, 2-Phase Commit, Savepoints

@faq_1036_li
#Server mode (well tested, but not as well as Embedded mode)

@faq_1037_li
#Multi-Threading and using multiple connections

@faq_1038_li
#Updatable result sets

@faq_1039_li
#Referential integrity and check constraints, Triggers

@faq_1040_li
#ALTER TABLE statements, Views, Linked Tables, Schema, UNION

@faq_1041_li
#Not all built-in functions are completely tested

@faq_1042_li
#The Optimizer may not always select the best plan

@faq_1043_li
#24/7 operation and large databases (500 MB and up)

@faq_1044_li
#Wide indexes with large VARCHAR or VARBINARY columns and / or with a lot of columns

@faq_1045_p
#Areas considered Experimental:

@faq_1046_li
#ODBC driver and the GCJ native version on Windows

@faq_1047_li
#Linear Hash Index

@faq_1048_li
#Compatibility modes for other databases (only some features are implemented)

@faq_1049_li
#The ARRAY data type and related functionality.

@faq_1050_h3
#Is the GCJ version stable? Faster?

@faq_1051_p
#The GCJ version is not as stable as the Java version. When running the regression test with the GCJ version, sometimes the application just stops at what seems to be a random point without error message. Currently, the GCJ version is also slower than when using the Sun VM. However, the startup of the GCJ version is faster than when using a VM.

@faq_1052_h3
#How to Translate this Project?

@faq_1053_p
#The following files can be translated at the moment:

@features_1000_h1
特徴

@features_1001_a
#Feature List

@features_1002_a
#Comparison to Other Database Engines

@features_1003_a
#Products that Work with H2

@features_1004_a
#Connection Modes

@features_1005_a
#Database URL Overview

@features_1006_a
#Connecting to a Database with File Encryption

@features_1007_a
#Database File Locking

@features_1008_a
#Opening a Database Only if it Already Exists

@features_1009_a
#Closing the Database

@features_1010_a
#Log Index Changes

@features_1011_a
#Custom File Access Mode

@features_1012_a
#Multiple Connections

@features_1013_a
#Database File Layout

@features_1014_a
#Logging and Recovery

@features_1015_a
#Compatibility Modes

@features_1016_a
#Using the Trace Options

@features_1017_a
#Read Only Databases

@features_1018_a
#Binary and Text Storage Formats

@features_1019_a
#Graceful Handling of Low Disk Space Situations

@features_1020_a
#Computed Columns / Function Based Index

@features_1021_a
#Multi-Dimensional Indexes

@features_1022_a
#Using Passwords

@features_1023_a
#User Defined Functions and Stored Procedures

@features_1024_a
#Triggers

@features_1025_a
#Compacting a Database

@features_1026_a
#Cache Settings

@features_1027_a
#Why Java

@features_1028_h2
#Feature List

@features_1029_h3
#Main Features

@features_1030_li
#Very fast database engine

@features_1031_li
#Free, with source code

@features_1032_li
#Written in Java

@features_1033_li
#Supports standard SQL, JDBC API

@features_1034_li
#Embedded and Server mode, Clustering support

@features_1035_li
#Strong security features

@features_1036_li
#Experimental native version (GCJ) and ODBC drivers

@features_1037_h3
#Additional Features

@features_1038_li
#Disk based or in-memory databases and tables, read-only database support, temporary tables

@features_1039_li
#Transaction support (read committed and serializable transaction isolation), 2-phase-commit

@features_1040_li
#Multiple connections, table level locking

@features_1041_li
#Cost based optimizer, using a genetic algorithm for complex queries, zero-administration

@features_1042_li
#Scrollable and updatable result set support, large result set, external result sorting, functions can return a result set

@features_1043_li
#Encrypted database (AES or XTEA), SHA-256 password encryption, encryption functions, SSL

@features_1044_h3
#SQL Support

@features_1045_li
#Support for multiple schemas, information schema

@features_1046_li
#Referential integrity / foreign key constraints with cascade, check constraints

@features_1047_li
#Inner and outer joins, subqueries, read only views and inline views

@features_1048_li
#Triggers and Java functions / stored procedures

@features_1049_li
#Many built-in functions, including XML and lossless data compression

@features_1050_li
#Wide range of data types including large objects (BLOB/CLOB) and arrays

@features_1051_li
#Sequence and autoincrement columns, computed columns (can be used for function based indexes)

@features_1052_li
#ORDER BY, GROUP BY, HAVING, UNION, LIMIT, TOP

@features_1053_li
#Collation support, users, roles

@features_1054_li
#Compatibility modes for HSQLDB, MySQL and PostgreSQL

@features_1055_h3
#Security Features

@features_1056_li
#Includes a solution for the SQL injection problem

@features_1057_li
#User password authenticated uses SHA-256 and salt

@features_1058_li
#User passwords are never transmitted in plain text over the network (even when using insecure connections)

@features_1059_li
#All database files (including script files that can be used to backup data) can be encrypted using AES-256 and XTEA encryption algorithms

@features_1060_li
#The remote JDBC driver supports TCP/IP connections over SSL/TLS

@features_1061_li
#The built-in web server supports connections over SSL/TLS

@features_1062_li
#Passwords can be sent to the database using char arrays instead of Strings

@features_1063_h3
#Other Features and Tools

@features_1064_li
#Small footprint (smaller than 1 MB), low memory requirements

@features_1065_li
#Multiple index types (b-tree, tree, hash, linear hash)

@features_1066_li
#Support for multi-dimensional indexes

@features_1067_li
#CSV (comma separated values) file support

@features_1068_li
#Support for linked tables, and a built-in virtual 'range' table

@features_1069_li
#EXPLAIN PLAN support, sophisticated trace options

@features_1070_li
#Database closing can be delayed or disabled to improve the performance

@features_1071_li
#Web-based Console application (English, German, partially French and Spanish) with autocomplete

@features_1072_li
#The database can generate SQL script files

@features_1073_li
#Contains a recovery tool that can dump the contents of the data file

@features_1074_li
#Automatic re-compilation of prepared statements

@features_1075_li
#Uses a small number of database files, binary and text storage formats, graceful handling of low disk space situations

@features_1076_li
#Uses a checksum for each record and log entry for data integrity

@features_1077_li
#Well tested (high code coverage, randomized stress tests)

@features_1078_h2
#Comparison to Other Database Engines

@features_1079_th
#Feature

@features_1080_th
#H2

@features_1081_th
#Derby

@features_1082_th
#HSQLDB

@features_1083_th
#MySQL

@features_1084_th
#PostgreSQL

@features_1085_td
#Embedded Mode (Java)

@features_1086_td
#Yes

@features_1087_td
#Yes

@features_1088_td
#Yes

@features_1089_td
#No

@features_1090_td
#No

@features_1091_td
#Pure Java

@features_1092_td
#Yes

@features_1093_td
#Yes

@features_1094_td
#Yes

@features_1095_td
#No

@features_1096_td
#No

@features_1097_td
#Performance (Embedded)

@features_1098_td
#Fast

@features_1099_td
#Slow

@features_1100_td
#Fast

@features_1101_td
#N/A

@features_1102_td
#N/A

@features_1103_td
トランザクション分離

@features_1104_td
#Yes

@features_1105_td
#Yes

@features_1106_td
#No

@features_1107_td
#Yes

@features_1108_td
#Yes

@features_1109_td
#Cost Based Optimizer

@features_1110_td
#Yes

@features_1111_td
#Yes

@features_1112_td
#No

@features_1113_td
#Yes

@features_1114_td
#Yes

@features_1115_td
#Clustering

@features_1116_td
#Yes

@features_1117_td
#No

@features_1118_td
#No

@features_1119_td
#Yes

@features_1120_td
#Yes

@features_1121_td
#Encrypted Database

@features_1122_td
#Yes

@features_1123_td
#Yes

@features_1124_td
#No

@features_1125_td
#No

@features_1126_td
#No

@features_1127_td
#Files per Database

@features_1128_td
#Few

@features_1129_td
#Many

@features_1130_td
#Few

@features_1131_td
#Many

@features_1132_td
#Many

@features_1133_td
#Footprint (jar/dll size)

@features_1134_td
#~ 1 MB

@features_1135_td
#~ 2 MB

@features_1136_td
#~ 600 KB

@features_1137_td
#~ 4 MB

@features_1138_td
#~ 6 MB

@features_1139_h3
#Derby and HSQLDB

@features_1140_p
#After an unexpected process termination (for example power failure), H2 can recover safely and automatically without any user interaction. For Derby and HSQLDB, there are some manual steps required ('Another instance of Derby may have already booted the database' / 'The database is already in use by another process').

@features_1141_h3
#DaffodilDb and One$Db

@features_1142_p
#It looks like the development of this database has stopped. The last release was February 2006.

@features_1143_h3
#McKoi

@features_1144_p
#It looks like the development of this database has stopped. The last release was August 2004

@features_1145_h2
#Products that Work with H2

@features_1146_th
#Product

@features_1147_th
#Description

@features_1148_a
#Apache Jackrabbit

@features_1149_td
#Open source implementation of the Java Content Repository API (JCR).

@features_1150_a
#Apache OpenJPA

@features_1151_td
#Open source implementation of the Java Persistence API (JPA).

@features_1152_a
#AppFuse

@features_1153_td
#Helps building web applications.

@features_1154_a
#Blojsom

@features_1155_td
#Java-based multi-blog, multi-user software package (Mac OS X Weblog Server)

@features_1156_a
#Bookmarks Portlet

@features_1157_td
#JSR168 compliant bookmarks management portlet application.

@features_1158_a
#DB Solo

@features_1159_td
#SQL query tool.

@features_1160_a
#DbVisualizer

@features_1161_td
#Database tool.

@features_1162_a
#Execute Query

@features_1163_td
#Database utility written in Java.

@features_1164_a
#Golden T Studios

@features_1165_td
#Fun-to-play games with a simple interface.

@features_1166_a
#Hibernate

@features_1167_td
#Relational persistence for idiomatic Java (O-R mapping tool).

@features_1168_a
#H2 Spatial

@features_1169_td
#A project to add spatial functions to H2 database.

@features_1170_a
#JAMWiki

@features_1171_td
#Java-based Wiki engine.

@features_1172_a
#JavaPlayer

@features_1173_td
#Pure Java MP3 player.

@features_1174_a
#JPOX

@features_1175_td
#Java persistent objects.

@features_1176_a
#LiquiBase

@features_1177_td
#A tool to manage database changes and refactorings.

@features_1178_a
#Luntbuild

@features_1179_td
#Build automation and management tool.

@features_1180_a
#Mr. Persister

@features_1181_td
#Simple, small and fast object relational mapping.

@features_1182_a
#MyTunesRss

@features_1183_td
#MyTunesRSS lets you listen to your music wherever you are.

@features_1184_a
#PolePosition

@features_1185_td
#Open source database benchmark.

@features_1186_a
#Scriptella

@features_1187_td
#ETL (Extract-Transform-Load) and script execution tool.

@features_1188_a
#SemmleCode

@features_1189_td
#Eclipse plugin to help you improve software quality.

@features_1190_a
#Shellbook

@features_1191_td
#Desktop publishing application.

@features_1192_a
#Signsoft intelliBO

@features_1193_td
#Persistence middleware supporting the JDO specification.

@features_1194_a
#SQL Workbench/J

@features_1195_td
#Free DBMS-independent SQL tool.

@features_1196_a
#SQuirreL SQL Client

@features_1197_td
#Graphical tool to view the structure of a database, browse the data, issue SQL commands etc.

@features_1198_a
#SQuirreL DB Copy Plugin

@features_1199_td
#Tool to copy data from one database to another.

@features_1200_a
#StreamCruncher

@features_1201_td
#Event (stream) processing kernel.

@features_1202_a
#Tamava

@features_1203_td
#Newsgroups Reader.

@features_1204_a
#Tune Backup

@features_1205_td
#Easy-to-use backup solution for your iTunes library.

@features_1206_a
#Web of Web

@features_1207_td
#Collaborative and realtime interactive media platform for the web.

@features_1208_h2
#Connection Modes

@features_1209_p
#The following connection modes are supported:

@features_1210_li
#Local connections using JDBC (embedded)

@features_1211_li
#Remote connections using JDBC over TCP/IP (client/server)

@features_1212_li
#Remote connections using ODBC over TCP/IP (client/server)

@features_1213_li
#In-Memory databases (private and shared)

@features_1214_h2
#Database URL Overview

@features_1215_p
#This database does support multiple connection modes and features when connecting to a database. This is achieved using different database URLs. The settings in the URLs are not case sensitive.

@features_1216_th
#Topic

@features_1217_th
#URL Format and Examples

@features_1218_td
#Embedded (local) connection

@features_1219_td
#jdbc:h2:[file:][&lt;path&gt;]&lt;databaseName&gt;

@features_1220_td
#jdbc:h2:~/test

@features_1221_td
#jdbc:h2:file:/data/sample

@features_1222_td
#jdbc:h2:file:C:/data/sample (Windows only)

@features_1223_td
#In-Memory (private)

@features_1224_td
#jdbc:h2:mem:

@features_1225_td
#In-Memory (named)

@features_1226_td
#jdbc:h2:mem:&lt;databaseName&gt;

@features_1227_td
#jdbc:h2:mem:test_mem

@features_1228_td
#Remote using TCP/IP

@features_1229_td
#jdbc:h2:tcp://&lt;server&gt;[:&lt;port&gt;]/&lt;databaseName&gt;

@features_1230_td
#jdbc:h2:tcp://localhost/test

@features_1231_td
#jdbc:h2:tcp://dbserv:8084/sample

@features_1232_td
#Remote using SSL/TLS

@features_1233_td
#jdbc:h2:ssl://&lt;server&gt;[:&lt;port&gt;]/&lt;databaseName&gt;

@features_1234_td
#jdbc:h2:ssl://secureserv:8085/sample;

@features_1235_td
#Using Encrypted Files

@features_1236_td
#jdbc:h2:&lt;url&gt;;CIPHER=[AES|XTEA]

@features_1237_td
#jdbc:h2:ssl://secureserv/testdb;CIPHER=AES

@features_1238_td
#jdbc:h2:file:~/secure;CIPHER=XTEA

@features_1239_td
#File Locking Methods

@features_1240_td
#jdbc:h2:&lt;url&gt;;FILE_LOCK={NO|FILE|SOCKET}

@features_1241_td
#jdbc:h2:file:~/quickAndDirty;FILE_LOCK=NO

@features_1242_td
#jdbc:h2:file:~/private;CIPHER=XTEA;FILE_LOCK=SOCKET

@features_1243_td
#Only Open if it Already Exists

@features_1244_td
#jdbc:h2:&lt;url&gt;;IFEXISTS=TRUE

@features_1245_td
#jdbc:h2:file:~/sample;IFEXISTS=TRUE

@features_1246_td
#Don't Close the Database when the VM Exits

@features_1247_td
#jdbc:h2:&lt;url&gt;;DB_CLOSE_ON_EXIT=FALSE

@features_1248_td
#User Name and/or Password

@features_1249_td
#jdbc:h2:&lt;url&gt;[;USER=&lt;username&gt;][;PASSWORD=&lt;value&gt;]

@features_1250_td
#jdbc:h2:file:~/sample;USER=sa;PASSWORD=123

@features_1251_td
#Log Index Changes

@features_1252_td
#jdbc:h2:&lt;url&gt;;LOG=2

@features_1253_td
#jdbc:h2:file:~/sample;LOG=2

@features_1254_td
#Debug Trace Settings

@features_1255_td
#jdbc:h2:&lt;url&gt;;TRACE_LEVEL_FILE=&lt;level 0..3&gt;

@features_1256_td
#jdbc:h2:file:~/sample;TRACE_LEVEL_FILE=3

@features_1257_td
#Ignore Unknown Settings

@features_1258_td
#jdbc:h2:&lt;url&gt;;IGNORE_UNKNOWN_SETTINGS=TRUE

@features_1259_td
#Custom File Access Mode

@features_1260_td
#jdbc:h2:&lt;url&gt;;ACCESS_MODE_LOG=rws;ACCESS_MODE_DATA=rws

@features_1261_td
#Changing Other Settings

@features_1262_td
#jdbc:h2:&lt;url&gt;;&lt;setting&gt;=&lt;value&gt;[;&lt;setting&gt;=&lt;value&gt;...]

@features_1263_td
#jdbc:h2:file:~/sample;TRACE_LEVEL_SYSTEM_OUT=3

@features_1264_h3
#Connecting to an Embedded (Local) Database

@features_1265_p
#The database URL for connecting to a local database is <code>jdbc:h2:[file:][&lt;path&gt;]&lt;databaseName&gt;</code> . The prefix <code>file:</code> is optional. If no or only a relative path is used, then the current working directory is used as a starting point. The case sensitivity of the path and database name depend on the operating system, however it is suggested to use lowercase letters only. The database name must be at least three characters long (a limitation of File.createTempFile). To point to the user home directory, use ~/, as in: jdbc:h2:~/test.

@features_1266_h3
#Memory-Only Databases

@features_1267_p
#For certain use cases (for example: rapid prototyping, testing, high performance operations, read-only databases), it may not be required to persist (changes to) the data at all. This database supports the memory-only mode, where the data is not persisted.

@features_1268_p
#In some cases, only one connection to a memory-only database is required. This means the database to be opened is private. In this case, the database URL is <code>jdbc:h2:mem:</code> Opening two connections within the same virtual machine means opening two different (private) databases.

@features_1269_p
#Sometimes multiple connections to the same memory-only database are required. In this case, the database URL must include a name. Example: <code>jdbc:h2:mem:db1</code> . Accessing the same database in this way only works within the same virtual machine and class loader environment.

@features_1270_p
#It is also possible to access a memory-only database remotely (or from multiple processes in the same machine) using TCP/IP or SSL/TLS. An example database URL is: <code>jdbc:h2:tcp://localhost/mem:db1</code> (using private database remotely is also possible).

@features_1271_h2
#Connecting to a Database with File Encryption

@features_1272_p
#To use file encryption, it is required to specify the encryption algorithm (the 'cipher') and the file password. The algorithm needs to be specified using the connection parameter. Two algorithms are supported: XTEA and AES. The file password is specified in the password field, before the user password. A single space needs to be added between the file password and the user password; the file password itself may not contain spaces. File passwords (as well as user passwords) are case sensitive. Here is an example to connect to a password encrypted database:

@features_1273_h2
#Database File Locking

@features_1274_p
#Whenever a database is opened, a lock file is created to signal other processes that the database is in use. If database is closed, or if the process that opened the database terminates, this lock file is deleted.

@features_1275_p
#The following file locking methods are implemented:

@features_1276_li
#The default method is 'file' and uses a watchdog thread to protect the database file. The watchdog reads the lock file each second.

@features_1277_li
#The second method is 'socket' and opens a server socket. The socket method does not require reading the lock file every second. The socket method should only be used if the database files are only accessed by the one (and always the same) computer.

@features_1278_li
#It is also possible to open the database without file locking; in this case it is up to the application to protect the database files.

@features_1279_p
#To open the database with a different file locking method, use the parameter 'FILE_LOCK'. The following code opens the database with the 'socket' locking method:

@features_1280_p
#The following code forces the database to not create a lock file at all. Please note that this is unsafe as another process is able to open the same database, possibly leading to data corruption:

@features_1281_p
#For more information about the algorithms please see in Advanced Topics under File Locking Protocol.

@features_1282_h2
#Opening a Database Only if it Already Exists

@features_1283_p
#By default, when an application calls <code>DriverManager.getConnection(url,...)</code> and the database specified in the URL does not yet exist, a new (empty) database is created. In some situations, it is better to restrict creating new database, and only open the database if it already exists. This can be done by adding <code>;ifexists=true</code> to the URL. In this case, if the database does not already exist, an exception is thrown when trying to connect. The connection only succeeds when the database already exists. The complete URL may look like this:

@features_1284_h2
#Closing the Database

@features_1285_h3
#Delayed Database Closing

@features_1286_p
#Usually, the database is closed when the last connection to it is closed. In some situations this slows down the application, for example when it is not possible leave the connection open. The automatic closing of the database can be delayed or disabled with the SQL statement SET DB_CLOSE_DELAY &lt;seconds&gt;. The seconds specifies the number of seconds to keep a database open after the last connection to it was closed. For example the following statement will keep the database open for 10 seconds:

@features_1287_p
#The value -1 means the database is never closed automatically. The value 0 is the default and means the database is closed when the last connection is closed. This setting is persistent and can be set by an administrator only. It is possible to set the value in the database URL: <code>jdbc:h2:~/test;DB_CLOSE_DELAY=10</code> .

@features_1288_h3
#Don't Close the Database when the VM Exits

@features_1289_p
#By default, a database is closed when the last connection is closed. However, if it is never closed, the database is closed when the virtual machine exits normally. This is done using a shutdown hook. In some situations, the database should not be closed in this case, for example because the database is still used at virtual machine shutdown (to store the shutdown process in the database for example). For those cases, the automatic closing of the database can be disabled in the database URL. The first connection (the one that is opening the database) needs to set the option in the database URL (it is not possible to change the setting afterwards). The database URL to disable database closing on exit is:

@features_1290_h2
#Log Index Changes

@features_1291_p
#Usually, changes to the index file are not logged for performance. If the index file is corrupt or missing when opening a database, it is re-created from the data. The index file can get corrupt when the database is not shut down correctly, because of power failure or abnormal program termination. In some situations, for example when using very large databases (over a few hundred MB), re-creating the index file takes very long. In these situations it may be better to log changes to the index file, so that recovery from a corrupted index file is fast. To enable log index changes, add LOG=2 to the URL, as in jdbc:h2:~/test;LOG=2 This setting should be specified when connecting. The update performance of the database will be reduced when using this option.

@features_1292_h3
#Ignore Unknown Settings

@features_1293_p
#Some applications (for example OpenOffice.org Base) pass some additional parameters when connecting to the database. Why those parameters are passed is unknown. The parameters PREFERDOSLIKELINEENDS and IGNOREDRIVERPRIVILEGES are such examples, they are simply ignored to improve the compatibility with OpenOffice.org. If an application passes other parameters when connecting to the database, usually the database throws an exception saying the parameter is not supported. It is possible to ignored such parameters by adding ;IGNORE_UNKNOWN_SETTINGS=TRUE to the database URL.

@features_1294_h3
#Changing Other Settings when Opening a Connection

@features_1295_p
#In addition to the settings already described (cipher, file_lock, ifexists, user, password), other database settings can be passed in the database URL. Adding <code>setting=value</code> at the end of an URL is the same as executing the statement <code>SET setting value</code> just after connecting. For a list of settings supported by this database please see the SQL grammar documentation.

@features_1296_h2
#Custom File Access Mode

@features_1297_p
#Usually, the database opens log, data and index files with the access mode 'rw', meaning read-write (except for read only databases, where the mode 'r' is used). Also supported are 'rws' and 'rwd'. The access mode used for log files is set via ACCESS_MODE_LOG; for data and index files use ACCESS_MODE_DATA. These settings must be specified in the database URL:

@features_1298_p
#For more information see <a href="advanced.html#durability_problems">Durability Problems</a> . On many operating systems the access mode 'rws' does not guarantee that the data is written to the disk.

@features_1299_h2
#Multiple Connections

@features_1300_h3
#Opening Multiple Databases at the Same Time

@features_1301_p
#An application can open multiple databases at the same time, including multiple connections to the same database. The number of open database is only limited by the memory available.

@features_1302_h3
#Multiple Connections to the Same Database: Client/Server

@features_1303_p
#If you want to access the same database at the same time from different processes or computers, you need to use the client / server mode. In this case, one process acts as the server, and the other processes (that could reside on other computers as well) connect to the server via TCP/IP (or SSL/TLS over TCP/IP for improved security).

@features_1304_h3
#Multithreading Support

@features_1305_p
#This database is multithreading-safe. That means, if an application is multi-threaded, it does not need o worry about synchronizing the access to the database. Internally, most requests to the same database are synchronized. That means an application can use multiple threads all accessing the same database at the same time, however if one thread executes a long running query, the other threads need to wait.

@features_1306_h3
#Locking, Lock-Timeout, Deadlocks

@features_1307_p
#The database uses table level locks to give each connection a consistent state of the data. There are two kinds of locks: read locks (shared locks) and write locks (exclusive locks). If a connection wants to reads from a table, and there is no write lock on the table, then a read lock is added to the table. If there is a write lock, then this connection waits for the other connection to release the lock. If connection cannot get a lock for a specified time, then a lock timeout exception is thrown.

@features_1308_p
#Usually, SELECT statement will generate read locks. This includes subqueries. Statements that modify data use write locks. It is also possible to lock a table exclusively without modifying data, using the statement SELECT ... FOR UPDATE. The statements COMMIT and ROLLBACK releases all open locks. The commands SAVEPOINT and ROLLBACK TO SAVEPOINT don't affect locks. The locks are also released when the autocommit mode changes, and for connections with autocommit set to true (this is the default), locks are released after each statement. Here is an overview on what statements generate what type of lock:

@features_1309_th
#Type of Lock

@features_1310_th
#SQL Statement

@features_1311_td
#Read

@features_1312_td
#SELECT * FROM TEST

@features_1313_td
#CALL SELECT MAX(ID) FROM TEST

@features_1314_td
#SCRIPT

@features_1315_td
#Write

@features_1316_td
#SELECT * FROM TEST WHERE 1=0 FOR UPDATE

@features_1317_td
#Write

@features_1318_td
#INSERT INTO TEST VALUES(1, 'Hello')

@features_1319_td
#INSERT INTO TEST SELECT * FROM TEST

@features_1320_td
#UPDATE TEST SET NAME='Hi'

@features_1321_td
#DELETE FROM TEST

@features_1322_td
#Write

@features_1323_td
#ALTER TABLE TEST ...

@features_1324_td
#CREATE INDEX ... ON TEST ...

@features_1325_td
#DROP INDEX ...

@features_1326_p
#The number of seconds until a lock timeout exception is thrown can be set separately for each connection using the SQL command SET LOCK_TIMEOUT &lt;milliseconds&gt;. The initial lock timeout (that is the timeout used for new connections) can be set using the SQL command SET DEFAULT_LOCK_TIMEOUT &lt;milliseconds&gt;. The default lock timeout is persistent.

@features_1327_h2
#Database File Layout

@features_1328_p
#There are a number of files created for persistent databases. Other than some databases, not every table and/or index is stored in its own file. Instead, usually only the following files are created: A data file, an index file, a log file, and a database lock file (exists only while the database is in use). In addition to that, a file is created for each large object (CLOB/BLOB), a file for each linear index, and temporary files for large result sets. Then the command SCRIPT can create script files. If the database trace option is enabled, trace files are created. The following files can be created by the database:

@features_1329_th
#File Name

@features_1330_th
#Description

@features_1331_th
#Number of Files

@features_1332_td
#test.data.db

@features_1333_td
#Data file

@features_1334_td
#Contains the data for all tables

@features_1335_td
#Format: &lt;database&gt;.data.db

@features_1336_td
#1 per database

@features_1337_td
#test.index.db

@features_1338_td
#Index file

@features_1339_td
#Contains the data for all (btree) indexes

@features_1340_td
#Format: &lt;database&gt;.index.db

@features_1341_td
#1 per database

@features_1342_td
#test.0.log.db

@features_1343_td
#Log file

@features_1344_td
#The log file is used for recovery

@features_1345_td
#Format: &lt;database&gt;.&lt;id&gt;.log.db

@features_1346_td
#0 or more per database

@features_1347_td
#test.lock.db

@features_1348_td
#Database lock file

@features_1349_td
#Exists only if the database is open

@features_1350_td
#Format: &lt;database&gt;.lock.db

@features_1351_td
#1 per database

@features_1352_td
#test.trace.db

@features_1353_td
#Trace file

@features_1354_td
#Contains trace information

@features_1355_td
#Format: &lt;database&gt;.trace.db

@features_1356_td
#If the file is too big, it is renamed to &lt;database&gt;.trace.db.old

@features_1357_td
#1 per database

@features_1358_td
#test.14.15.lob.db

@features_1359_td
#Large object

@features_1360_td
#Contains the data for BLOB or CLOB

@features_1361_td
#Format: &lt;database&gt;.&lt;tableid&gt;.&lt;id&gt;.lob.db

@features_1362_td
#1 per object

@features_1363_td
#test.123.temp.db

@features_1364_td
#Temporary file

@features_1365_td
#Contains a temporary blob or a large result set

@features_1366_td
#Format: &lt;database&gt;.&lt;session id&gt;.&lt;object id&gt;.temp.db

@features_1367_td
#1 per object

@features_1368_td
#test.7.hash.db

@features_1369_td
#Hash index file

@features_1370_td
#Contains the data for a linear hash index

@features_1371_td
#Format: &lt;database&gt;.&lt;object id&gt;.hash.db

@features_1372_td
#1 per linear hash index

@features_1373_h3
#Moving and Renaming Database Files

@features_1374_p
#Database name and location are not stored inside the database names.

@features_1375_p
#While a database is closed, the files can be moved to another directory, and they can be renamed as well (as long as all files start with the same name).

@features_1376_p
#As there is no platform specific data in the files, they can be moved to other operating systems without problems.

@features_1377_h3
#Backup

@features_1378_p
#When the database is closed, it is possible to backup the database files. Please note that index files do not need to be backed up, because they contain redundant data, and will be recreated automatically if they don't exist.

@features_1379_p
#To backup data while the database is running, the SQL command SCRIPT can be used.

@features_1380_h2
#Logging and Recovery

@features_1381_p
#Whenever data is modified in the database and those changes are committed, the changes are logged to disk (except for in-memory objects). The changes to the data file itself are usually written later on, to optimize disk access. If there is a power failure, the data and index files are not up-to-date. But because the changes are in the log file, the next time the database is opened, the changes that are in the log file are re-applied automatically.

@features_1382_p
#Please note that index file updates are not logged by default. If the database is opened and recovery is required, the index file is rebuilt from scratch.

@features_1383_p
#There is usually only one log file per database. This file grows until the database is closed successfully, and is then deleted. Or, if the file gets too big, the database switches to another log file (with a higher id). It is possible to force the log switching by using the CHECKPOINT command.

@features_1384_p
#If the database file is corrupted, because the checksum of a record does not match (for example, if the file was edited with another application), the database can be opened in recovery mode. In this case, errors in the database are logged but not thrown. The database should be backed up to a script and re-built as soon as possible. To open the database in the recovery mode, use a database URL must contain RECOVER=1, as in jdbc:h2:~/test;RECOVER=1. Indexes are rebuilt in this case, and the summary (object allocation table) is not read in this case, so opening the database takes longer.

@features_1385_h2
#Compatibility Modes

@features_1386_p
#All database engines behave a little bit different. For certain features, this database can emulate the behavior of specific databases. Not all features or differences of those databases are implemented. Currently, this feature is mainly used for randomized comparative testing (where random statements are executed against multiple databases and the results are compared). The mode can be changed by specifying the mode in the database URL, or using the SQL statement SET MODE. To use the HSQLDB mode, you can use the database URL <code>jdbc:h2:~/test;MODE=HSQLDB</code> or the SQL statement <code>SET MODE HSQLDB</code> . Here is the list of currently supported modes and the difference to the regular mode:

@features_1387_th
#Mode

@features_1388_th
#Differences

@features_1389_td
#PostgreSQL

@features_1390_td
#Concatenation of a NULL with another value results in NULL. Usually, the NULL is treated as an empty string if only one of the operators is NULL, and NULL is only returned if both values are NULL.

@features_1391_td
#MySQL

@features_1392_td
#When inserting data, if a column is defined to be NOT NULL and NULL is inserted, then a 0 (or empty string, or the current timestamp for timestamp columns) value is used. Usually, this operation is not allowed and an exception is thrown.

@features_1393_td
#HSQLDB

@features_1394_td
#When converting the scale of decimal data, the number is only converted if the new scale is smaller then current scale. Usually, the scale is converted and 0s are added if required.

@features_1395_h2
#Using the Trace Options

@features_1396_p
#To find problems in an application, it is sometimes good to see what database operations where executed. This database offers the following trace features:

@features_1397_li
#Trace to System.out and/or a file

@features_1398_li
#Support for trace levels OFF, ERROR, INFO, and DEBUG

@features_1399_li
#The maximum size of the trace file can be set

@features_1400_li
#The Java code generation is possible

@features_1401_li
#Trace can be enabled at runtime by manually creating a file

@features_1402_h3
#Trace Options

@features_1403_p
#The simplest way to enable the trace option is setting it in the database URL. There are two settings, one for System.out (TRACE_LEVEL_SYSTEM_OUT) tracing, and one for file tracing (TRACE_LEVEL_FILE). The trace levels are 0 for OFF, 1 for ERROR (the default), 2 for INFO and 3 for DEBUG. A database URL with both levels set to DEBUG is:

@features_1404_p
#The trace level can be changed at runtime by executing the SQL command <code>SET TRACE_LEVEL_SYSTEM_OUT level</code> (for System.out tracing) or <code>SET TRACE_LEVEL_FILE level</code> (for file tracing). Example:

@features_1405_h3
#Setting the Maximum Size of the Trace File

@features_1406_p
#When using a high trace level, the trace file can get very big quickly. The size of the file can be limited by executing the SQL statement <code>SET TRACE_MAX_FILE_SIZE maximumFileSizeInMB</code> . If the log file exceeds the limit, the file is renamed to .old and a new file is created. If another .old file exists, it is deleted. The default setting is 16 MB. Example:

@features_1407_h3
#Java Code Generation

@features_1408_p
#When setting the trace level to INFO or DEBUG, Java source code is generated as well, so that problem can be reproduced more easily. The trace file looks like this:

@features_1409_p
#You need to filter out the lines without /**/ to get the Java source code. In Windows, a simple way to do that is:

@features_1410_p
#Afterwards, you need to complete the file Trace.java before it can be compiled, for example with:

@features_1411_p
#Also, the user name and password needs to be set, because they are not listed in the trace file.

@features_1412_h3
#Enabling the Trace Option at Runtime by Manually Creating a File

@features_1413_p
#Sometimes, you can't or don't want to change the application or database URL. There is still a way to enable the trace mode in these cases, even at runtime (while the database connection is open). You only need to create a special file in the directory where the database files are stored. The database engine checks every 4 seconds if this file exists (only while executing a statement). The file name is the database name plus '.trace.db.start'. This feature is disabled if the database is encrypted.

@features_1414_p
#Example: if a database is called 'test', then the file to start tracing is 'test.trace.db.start'. The database engine tries to delete this file when it detects it. If trace is enabled using the start file, the trace level is not persistent to the database, and trace is switched back to the level that was set before when connecting to the database. However, if the start file is read only, the database engine cannot delete the file and will always enable the trace mode when connecting.

@features_1415_h2
#Read Only Databases

@features_1416_p
#If the database files are read-only, then the database is read-only as well. It is not possible to create new tables, add or modify data in this database. Only SELECT statements are allowed. To create a read-only database, close the database so that the log file gets smaller. Do not delete the log file. Then, make the database files read-only using the operating system. When you open the database now, it is read-only. There are two ways an application can find out a database is read-only: By calling Connection.isReadOnly() or by executing the SQL statement CALL READONLY().

@features_1417_h2
#Binary and Text Storage Formats

@features_1418_p
#This database engine supports both binary and text storage formats. The binary format is faster, but the text storage format can be useful as well, for example to debug the database engine. If a database already exists, the storage format is recognized automatically. New databases are created in the binary storage format by default. To create a new database in the text storage format, the database URL must contain the parameter STORAGE=TEXT. Example URL: jdbc:h2:~/test;STORAGE=TEXT

@features_1419_h2
#Graceful Handling of Low Disk Space Situations

@features_1420_p
#The database is able to deal with situations where the disk space available is running low. Whenever the database starts, an 'emergency space' file is created (size is 1 MB), and if there is no more space available, the file will shrink. If the space available is lower than 128 KB, the database will go into a special read only mode, where writing operations are no longer allowed: All writing operations will throw the exception 'No disk space available' from this point on. To go back to the normal operating mode, all connections to the database need to be closed first, and space needs to be freed up.

@features_1421_p
#It is possible to install a database event listener to detect low disk space situations early on (when only 1 MB if space is available). To do this, use the SQL statement SET DATABASE_EVENT_LISTENER. The listener can also be set at connection time, using an URL of the form jdbc:h2:~/test;DATABASE_EVENT_LISTENER='com.acme.DbListener' (the quotes around the class name are required). See also the DatabaseEventListener API.

@features_1422_h3
#Opening a Corrupted Database

@features_1423_p
#If a database can not be opened because the boot info (the SQL script that is run at startup) is corrupted, then the database can be opened by specifying a database event listener. The exceptions are logged, but opening the database will continue.

@features_1424_h2
#Computed Columns / Function Based Index

@features_1425_p
#Function indexes are not directly supported by this database, but they can be easily emulated by using computed columns. For example, if an index on the upper-case version of a column is required, just create a computed column with the upper-case version of the original column, and index this column:

@features_1426_p
#When inserting data, it is not required (better: not allowed) to specify a value for the upper-case version of the column, because the value is generated. But you can use the column when querying the table:

@features_1427_h2
#Multi-Dimensional Indexes

@features_1428_p
#A tool is provided to execute efficient multi-dimension (spatial) range queries. This database does not support a specialized spatial index (R-Tree or similar). Instead, the B-Tree index is used. For each record, the multi-dimensional key is converted (mapped) to a single dimensional (scalar) value. This value specifies the location on a space-filling curve.

@features_1429_p
#Currently, Z-order (also called N-order or Morton-order) is used; Hilbert curve could also be used, but the implementation is more complex. The algorithm to convert the multi-dimensional value is called bit-interleaving. The scalar value is indexed using a B-Tree index (usually using a computed column).

@features_1430_p
#The method can result in a drastic performance improvement over just using an index on the first column. Depending on the data and number of dimensions, the improvement is usually higher than factor 5. The tool generates a SQL query from a specified multi-dimensional range. The method used is not database dependent, and the tool can easily be ported to other databases. For an example how to use the tool, please have a look at the sample code provided in TestMultiDimension.java.

@features_1431_h2
#Using Passwords

@features_1432_h3
#Using Secure Passwords

@features_1433_p
#Remember that weak passwords can be broken no matter of the encryption and security protocol. Don't use passwords that can be found in a dictionary. Also appending numbers does not make them secure. A way to create good passwords that can be remembered is, take the first letters of a sentence, use upper and lower case characters, and creatively include special characters. Example:

@features_1434_p
#i'sE2rtPiUKtT (it's easy to remember this password if you know the trick)

@features_1435_h3
#Passwords: Using Char Arrays instead of Strings

@features_1436_p
#Java Strings are immutable objects and cannot be safely 'destroyed' by the application. After creating a String, it will remain in the main memory of the computer at least until it is garbage collected. The garbage collection cannot be controlled by the application, and even if it is garbage collected the data may still remain in memory. It might also be possible that the part of memory containing the password is swapped to disk (because not enough main memory is available).

@features_1437_p
#An attacker might have access to the swap file of the operating system. It is therefore a good idea to use char arrays instead of Strings to store passwords. Char arrays can be cleared (filled with zeros) after use, and therefore the password will not be stored in the swap file.

@features_1438_p
#This database supports using char arrays instead of String to pass user and file passwords. The following code can be used to do that:

@features_1439_p
#In this example, the password is hard code in the application, which is not secure of course. However, Java Swing supports a way to get passwords using a char array (JPasswordField).

@features_1440_h3
#Passing the User Name and/or Password in the URL

@features_1441_p
#Instead of passing the user name as a separate parameter as in <code>Connection conn = DriverManager. getConnection("jdbc:h2:~/test", "sa", "123");</code> the user name (and/or password) can be supplied in the URL itself: <code>Connection conn = DriverManager. getConnection("jdbc:h2:~/test;USER=sa;PASSWORD=123");</code> The settings in the URL override the settings passed as a separate parameter.

@features_1442_h2
#User Defined Functions and Stored Procedures

@features_1443_p
#In addition to the built-in functions, this database supports user defined Java functions. In this database, Java functions can be used as stored procedures as well. A function must be declared (registered) before it can be used. Only static Java methods are supported; both the class and the method must be public. Example Java method:

@features_1444_p
#The Java function must be registered in the database by calling CREATE ALIAS:

@features_1445_p
#For a complete sample application, see src/test/org/h2/samples/Function.java.

@features_1446_h3
#Function Data Type Mapping

@features_1447_p
#Functions that accept non-nullable parameters such as 'int' will not be called if one of those parameters is NULL. In this case, the value NULL is used as the result. If the function should be called in this case, you need to use 'java.lang.Integer' instead of 'int'.

@features_1448_h3
#Functions that require a Connection

@features_1449_p
#If the first parameter in a Java function is a java.sql.Connection, then the connection to database is provided. This connection does not need to be closed before returning.

@features_1450_h3
#Functions throwing an Exception

@features_1451_p
#If a function throws an Exception, then the current statement is rolled back and the exception is thrown to the application.

@features_1452_h3
#Functions returning a Result Set

@features_1453_p
#Functions may returns a result set. Such a function can be called with the CALL statement:

@features_1454_h3
#Using SimpleResultSet

@features_1455_p
#A function that returns a result set can create this result set from scratch using the SimpleResultSet tool:

@features_1456_h3
#Using a Function as a Table

@features_1457_p
#A function returning a result set can be like a table. However, in this case the function is called at least twice: First while parsing the statement to collect the column names (with parameters set to null where not known at compile time). And then, while executing the statement to get the data (may be repeatedly if this is a join). If the function is called just to get the column list, the URL of the connection passed to the function is jdbc:columnlist:connection. Otherwise, the URL of the connection is jdbc:default:connection.

@features_1458_h2
#Triggers

@features_1459_p
#This database supports Java triggers that are called before or after a row is updated, inserted or deleted. Triggers can be used for complex consistency checks, or to update related data in the database. It is also possible to use triggers to simulate materialized views. For a complete sample application, see src/test/org/h2/samples/TriggerSample.java. A Java trigger must implement the interface org.h2.api.Trigger:

@features_1460_p
#The connection can be used to query or update data in other tables. The trigger then needs to be defined in the database:

@features_1461_p
#The trigger can be used to veto a change, by throwing a SQL Exception.

@features_1462_h2
#Compacting a Database

@features_1463_p
#Empty space in the database file is re-used automatically. To re-build the indexes, the most simple way is to delete the .index.db file while the database is closed. However in some situations (for example after deleting a lot of data in a database), one sometimes wants to shrink the size of the database (compact a database). Here is a sample function to do this:

@features_1464_p
#See also the sample application org.h2.samples.Compact. The commands SCRIPT / RUNSCRIPT can be used as well to create the a backup of a database and re-build the database from the script.

@features_1465_h2
#Cache Settings

@features_1466_p
#The database keeps most frequently used data and index pages in the main memory. The amount of memory used for caching can be changed using the setting CACHE_SIZE. This setting can be set in the database connection URL (jdbc:h2:~/test;CACHE_SIZE=131072), or it can be changed at runtime using SET CACHE_SIZE size.

@features_1467_p
#This database supports two cache page replacement algorithms: LRU (the default) and 2Q. For LRU, the pages that were least frequently used are removed from the cache if it becomes full. The 2Q algorithm is a bit more complicated, basically two queues are used. The 2Q algorithm is more resistant to table scans, however the overhead is a bit higher compared to the LRU. To use the cache algorithm 2Q, use a database URL of the form jdbc:h2:~/test;CACHE_TYPE=TQ. The cache algorithm can not be changed once the database is open.

@features_1468_p
#To get information about page reads and writes, and the current caching algorithm in use, call SELECT * FROM INFORMATION_SCHEMA.SETTINGS. The number of pages read / written is listed for the data and index file.

@features_1469_h2
#Why Java

@features_1470_p
#A few reasons using a Java database are:

@features_1471_li
#Very simple to integrate in Java applications

@features_1472_li
#Support for many different platforms

@features_1473_li
#More secure than native applications (no buffer overflows)

@features_1474_li
#User defined functions (or triggers) run very fast

@features_1475_li
#Unicode support

@features_1476_p
#Some people think that Java is still too slow for low level operations, but this is not the case (not any more). In general, the code can be written a lot faster than using C or C++. Like that, it is possible to concentrate on improving the algorithms (that make the application faster) rather than porting the code and dealing with low level stuff (such as memory management or dealing with threads). Garbage collection is now probably faster than manual memory management.

@features_1477_p
#A lot of features are already built in (for example Unicode, network libraries). It is very easy to write secure code because buffer overflows and such problems can be detected very easily. Some features such as the reflection mechanism can be used for randomized testing.

@features_1478_p
#Java is also future proof: A lot of companies support Java, and it is now open source.

@features_1479_p
#This software does not rely on many Java libraries or other software, to increase the portability and ease of use, and for performance reasons. For example, the encryption algorithms and many library functions are implemented in the database instead of using the existing libraries. Libraries that are not available in open source Java implementations (such as Swing) are not used or only used for specific features.

@frame_1000_p
H2 (for 'Hypersonic 2') is free a Java SQL DBMS. Clustering, embedded and server mode, transactions, referential integrity, views, subqueries, triggers, encryption, and disk based or in-memory operation are supported. A browser based console application is included. If you see this page your browser does not support frames. Please click here to view the<a href="search_ja.html">index</a>.

@history_1000_h1
歴�?��?�ロードマップ

@history_1001_a
#History of this Database Engine

@history_1002_a
#Change Log

@history_1003_a
#Roadmap

@history_1004_a
#Supporters

@history_1005_h2
#History of this Database Engine

@history_1006_p
#The development of H2 was started in May 2004, but it was first published on December 14th 2005. The author of H2, Thomas Mueller, is also the original developer of Hypersonic SQL. In 2001, he joined PointBase Inc. where he created PointBase Micro. At that point, he had to discontinue Hypersonic SQL, but then the HSQLDB Group was formed to continued to work on the Hypersonic SQL codebase. The name H2 stands for Hypersonic 2; however H2 does not share any code with Hypersonic SQL or HSQLDB. H2 is built from scratch.

@history_1007_h2
#Change Log

@history_1008_h3
#Version 1.0 (Current)

@history_1009_h3
#Version 1.0.59 (2007-09-TODO)

@history_1010_li
#A PreparedStatement that was cancelled could not be reused. Fixed.

@history_1011_li
#H2 Console: Progress information when logging into a H2 embedded database (useful when opening a database is slow).

@history_1012_li
#When the database was closed while logging was disabled (LOG 0), re-opening the database was slow. Fixed.

@history_1013_li
#Fulltext search is now documented (in the Tutorial).

@history_1014_li
#The Console did not refresh the table list if the CREATE TABLE statement started with a comment. Fixed.

@history_1015_li
#When creating a table using CREATE TABLE .. AS SELECT, the precision for some data types (for example VARCHAR)  was set to the default precision. Fixed.

@history_1016_li
#When using the (undocumented) in-memory file system (jdbc:h2:memFS:x or jdbc:h2:memLZF:x), and using  multiple connections, a ConcurrentModificationException could occur. Fixed.

@history_1017_li
#REGEXP compatibility: So far String.matches was used, but for compatibility with MySQL, now Matcher.find is used.

@history_1018_li
#SCRIPT: the SQL statements in the result set now include the terminating semicolon as well. Simplifies copy and paste.

@history_1019_li
#When using a subquery with group by as a table, some columns could not be used in the where condition  in the outer query. Example: SELECT * FROM (SELECT ID, COUNT(*) C FROM TEST) WHERE C > 100. Fixed.

@history_1020_li
#Views with subqueries as tables and queries with nested subqueries as tables did not always work. Fixed.

@history_1021_li
#Compatibility: comparing columns with constants that are out of range does not throw an exception.

@history_1022_h3
#Version 1.0.58 (2007-09-15)

@history_1023_li
#System.exit is no longer called by the WebServer, the Console and the Server tool  (except to set the exit code if required). This is important when using OSGi.

@history_1024_li
#Optimization for independent subqueries. For example, this query can now an index:  SELECT * FROM TEST WHERE ID = (SELECT MAX(ID) FROM TEST)  This can be disabled by setting the system property h2.optimizeSubqueryCache to false.

@history_1025_li
#The explain plan now says: /* direct lookup query */ if the query can be processed directly without reading rows,  for example when using MIN(indexed column), MAX(indexed column), or COUNT(*).

@history_1026_li
#When using IFNULL, NULLIF, COALESCE, LEAST, or GREATEST,  and the first parameter was ?, an exception was thrown.  Now the highest data type of all parameters is used.

@history_1027_li
#When comparing TINYINT or SMALLINT columns against constants, the index was not used. Fixed.

@history_1028_li
#Maven 2: new version are now automatically synced with the central repositories.

@history_1029_li
#The default value for MAX_MEMORY_UNDO is now 100000.

@history_1030_li
#The documentation indexer does no longer index Japanese pages.  If somebody knows how to split Japanese into words please post it.

@history_1031_li
#Oracle compatibility: SYSDATE now returns a timestamp. CHR(..) is now an alias for CHAR(..).

@history_1032_li
#After deleting data, empty space in the database files was not efficiently reused  (but it was reused when opening the database). This has been fixed.

@history_1033_li
#About 230 bytes per database was leaked. This is a problem for applications  opening and closing many thousand databases. The main problem: a shutdown hook  was added but never removed. Fixed. In JDK 1.4, there is an additionally problem,  see http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4197876.  A workaround has been implemented.

@history_1034_li
#Optimization for COLUMN IN(.., NULL) if the column does not allow NULL values.

@history_1035_li
#Using spaces in column and table aliases was not supported when used inside a view or temporary view.

@history_1036_li
#The version (build) number is now included in the manifest file.

@history_1037_li
#In some systems, SecureRandom.generateSeed is very slow (taking one minute or more).  For those cases, an alternative method is used that takes less than one second.

@history_1038_li
#The database file sizes are now increased at most 32 MB at any time.

@history_1039_li
#New method DatabaseEventListener.opened that is called just after opening a database.

@history_1040_li
#When using the Console with Internet Explorer 6.0 or 7.0, a Javascript error was thrown after clearing the query.

@history_1041_li
#A database can now be opened even if class of a user defined function is not in the classpath.  Trying to call the function will throws an exception.

@history_1042_li
#User defined functions and constants may not overload built-in functions and constants.  This didn't work before, but now trying to create such an object will fail.

@history_1043_li
#Improved MultiDimension tool (for spatial queries): in the last few releases the tool was actually  slower than using a regular query (because index lookup got faster, and because the tool didn't  support prepared statements) Now the tool generates prepared statements,  and the performance is better again (about 5 times faster for a reasonable amount of data).

@history_1044_li
#Adding a foreign key or when re-enabling referential integrity for a table failed when checking  was enabled and the reference contained NULL.

@history_1045_li
#For PgServer, character encoding other than UTF-8 did not work correctly. Fixed.

@history_1046_li
#Using a function in a GROUP BY expression that is used in a view as a condition did not always work.

@history_1047_h3
#Version 1.0.57 (2007-08-25)

@history_1048_li
#New experimental feature MVCC (multi version concurrency control).  Can be set as a option when opening the database (jdbc:h2:test;MVCC=TRUE)  or as a system property (-Dh2.mvcc=true). This is work-in-progress, use it at your own risk. Feedback is welcome.

@history_1049_li
#The version number is now major.minor.micro where micro is the build number.  Not all version are public, so there may be gaps in the micro. The minor changes when there is a file format change.

@history_1050_li
#The backup tool (org.h2.tools.Backup) did not work. The restore tool did not work when the -db parameter was used. Fixed.  The documentation of the backup tool has been changed: only one database may be backed up at any time.

@history_1051_li
#Opening large read-only databases was very slow. Fixed.

@history_1052_li
#New Japanese translation of the error messages thanks to Ikemoto Masahiro. Thanks a lot!

@history_1053_li
#Disabling / enabling referential integrity for a table can now be used inside a transaction.

@history_1054_li
#Rights checking for dynamic tables (SELECT * FROM (SELECT ...)) did not work. Fixed.

@history_1055_li
#Creating more than 10 views that depend on each other was very slow. Reconnecting was slow as well. Fixed.

@history_1056_li
#When used as as Servlet, the H2 Console did not work with SSL (using Tomcat). Fixed.

@history_1057_li
#When altering a table with foreign key constraint, if there was no manual index created  for the referenced columns, the automatically created index was dropped while still being used. Fixed.

@history_1058_li
#Check and foreign key constraints now checks if the existing data is consistent (this can be disabled by appending NOCHECK).  It is also possible to check existing data when re-enabling referential integrity for a table.

@history_1059_li
#Some unit tests failed on Linux because the file system works differently. The unit tests are fixed and should work now.

@history_1060_li
#Can now incrementally translate the documentation. See also FAQ.

@history_1061_li
#Improved error messages: some tools can't show the root cause of an exception.  Adding the message of the root cause to the message of the thrown exception now where it makes sense.

@history_1062_li
#The H2 Console can now connect to databases using JNDI. The driver class name must be a javax.naming.Context,  (for example javax.naming.InitialContext), and the URL the resource name (for example java:comp/env/jdbc/Test).  This should also work for linked tables.

@history_1063_li
#Google translate did not work for the H2 homepage. It should be fixed now.

@history_1064_li
#The CONVERT function did not work with views when using UNION.

@history_1065_li
#The build now issues a warning if the source code is switched to the wrong version.

@history_1066_li
#The default lock mode is now read committed instead of serialized.

@history_1067_li
#PG server: data was truncated when reading large VARCHAR columns and decimal columns.

@history_1068_li
#PG server: when the same database was accessed multiple times using the PostgreSQL ODBC driver,  the pg_catalog schema update failed, and connecting to the database was not possible. Fixed.

@history_1069_li
#Some file operations didn't work for files in the root directory. Fixed.

@history_1070_li
#In the Restore tool, the parameter -file did not work. Fixed.

@history_1071_li
#Two-phase commit: commit with transaction name was only supported in the recovery scan.  Now it is always supported.

@history_1072_li
#The column name C_CURRENT_TIMESTAMP did not work in the last release.

@history_1073_li
#OpenOffice compatibility: support database name in column names.

@history_1074_h3
#Version 1.0.56 (2007-08-02)

@history_1075_li
#A new tool to help translation has been implemented: src/tools/org/h2/tools/i18n/PrepareTranslation.  This tool can detect delta changes in the original (English) and prepends '#' in translation if the original  text was changed. It can also extract text from the user documentation (however, it is incomplete).

@history_1076_li
#The error messages (src/main/org/h2/res/_*.*) can now be translated.

@history_1077_li
#Part of the documentation has been translated to Japanese by Yusuke Fukushima.

@history_1078_li
#Some Unicode characters where not supported as identifier name.  Thanks Yusuke Fukushima for reporting this problem.

@history_1079_li
#The default value DEFAULT_MAX_LENGTH_INPLACE_LOB has been changed from 128 to 1024.

@history_1080_li
#A server that implements the PostgreSQL protocol is now included and documented.  That means, the PostgreSQL ODBC driver can be used to access a H2 database.  See in the documentation for details.

@history_1081_li
#The experimental H2 ODBC driver has been removed.

@history_1082_li
#The default value for h2.defaultMaxMemoryUndo is now 50000.  This avoids out of memory problems when using large transactions,  however large transactions are slower because they are buffered to disk.  To disable, use -Dh2.defaultMaxMemoryUndo=2000000000.

@history_1083_li
#Support for regular expression function REGEXP_REPLACE(expression, regex, replacement)  and regular expression LIKE: expression REGEXP matchExpression. However, indexes are not yet used.

@history_1084_li
#The old view implementation has been removed.

@history_1085_li
#The SysTray tool has been removed, because JDK 1.6 has native support for system tray icons.  Use the Console tool (org.h2.tools.Console) automatically installs a system tray icon if JDK 1.6 is used.

@history_1086_li
#H2 Console: In the last release, the shutdown button did not work. Fixed.

@history_1087_li
#Referential integrity can now be disabled using  SET REFERENTIAL_INTEGRITY FALSE. It can also be disable only  for one table using ALTER TABLE SET REFERENTIAL_INTEGRITY FALSE.

@history_1088_li
#The Backup and Restore tools, and the BACKUP command did not back up LOBs when  h2.lobFilesInDirectories was enabled. Fixed.

@history_1089_li
#Calculation of cache memory usage has been improved.

@history_1090_li
#In some situations record were released too late from the cache. Fixed.

@history_1091_li
#The cache size is now measured in KB instead of blocks of 128 byte.

@history_1092_li
#CREATE TABLE ... AS SELECT now needs less memory. While inserting the rows, the undo  log is temporarily disabled. This avoid out of memory problems when creating large tables.

@history_1093_li
#The per session undo log can now be disabled. This setting is useful for bulk operations  that don't need to be atomic, like bulk delete or update.

@history_1094_li
#The database file could get corrupted when there was an OutOfMemoryException in the middle of inserting a row.

@history_1095_li
#Optimization for WHERE NOT(...) and WHERE [NOT] booleanFlagColumn.  This can be disabled using the system property h2.optimizeNot.

@history_1096_li
#Optimization for conditions like WHERE A=B AND B=X (A=X is added). This often appears in joins.  This can be disabled using the system property h2.optimizeTwoEquals.

@history_1097_li
#Documentation: the source code in 'Compacting a Database' was incorrect. Fixed.

@history_1098_li
#In the H2 Console, result sets could not be modified because the default result set type is now forward only.  For H2, now uses scrollable result sets. Also for other databases, but only when the query starts with @EDIT.

@history_1099_li
#Views using UNION did not work correctly. Fixed.

@history_1100_li
#Function tables did not work with views and EXPLAIN. Fixed.

@history_1101_h3
#Version 1.0.55 (2007-07-12)

@history_1102_li
#Support for the system property baseDir. This works for embedded databases as well. The setting is supported  by the H2 Console using -Dh2.baseDir or -baseDir

@history_1103_li
#LIKE ESCAPE did not work correctly if the pattern was % or _, followed by an escape character, followed by %. Fixed.

@history_1104_li
#PostgreSQL compatibility: SET SEARCH_PATH, SERIAL, CURRENT_USER, E'text', $1.

@history_1105_li
#In some situations, when many tables with LOB columns were modified (ALTER TABLE), large objects were deleted. Fixed.

@history_1106_li
#CREATE TABLE AS SELECT .. UNION .. did not work. Fixed.

@history_1107_li
#New column ID for INFORMATION_SCHEMA.INDEXES, SEQUENCES, USERS, ROLES, RIGHTS,  FUNCTION_ALIASES, SCHEMATA, VIEWS, CONSTRAINTS, CONSTANTS, DOMAINS, TRIGGERS.

@history_1108_li
#If large result sets (backed by a temporary file) where not closed, the file was not deleted.  Now, the default result set type is FETCH_FORWARD. This means temp files are deleted  automatically (without having to close the result set explicitly). But it also means  ResultSet.beforeFirst can only be called for scrollable result sets. To create a scrollable result set,  use Statement stat = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY).

@history_1109_li
#PreparedStatement.getMetaData is now implemented.

@history_1110_li
#Now PreparedStatement.setBigDecimal(..) can be called with an object of a derived class  if the system property h2.allowBigDecimalExtensions is set to true.

@history_1111_li
#The default database name in the documentation is now jdbc:h2:~/test. Like this, the database  is stored in the user home directory (system property user.home). Of course storing the database  in the current working directory (as in jdbc:h2:test) still works. Using the user directory avoids  the problem that the database is not found if the application runs in another directory than  the console.

@history_1112_li
#The SQL statement SET ASSERT has been deprecated, because Constants.CHECK is now final.  To disable assertions (and improve performance), the system property h2.check can be used.  Executing SET ASSERT still works, but has no effect.

@history_1113_li
#In the READ_COMMITTED mode, when the multi-threaded kernel is enabled,  read locks are now acquired but released immediately after a query.

@history_1114_li
#The default trace level for JdbcDataSourceFactory was DEBUG, so when using data sources a trace file  was always created. Now the default trace level is ERROR, and the file is only created if necessary.

@history_1115_li
#PooledConnection.getConnection took a long time if only one connection was open at any time. Fixed.

@history_1116_li
#Referential integrity violation: Two different SQL states are now used for missing parent / existing child.

@history_1117_li
#DatabaseEventListener.exceptionThrown has a new parameter: SQL

@history_1118_li
#For compatibility reasons, the catalog name can now be used in queries: SELECT * FROM TESTDB.PUBLIC.TEST

@history_1119_li
#If SHUTDOWN IMMEDIATELY was called, then the connection was not closed and the database  opened from somebody else at the same time, in some cases this could result in errors with LOB files. Fixed.

@history_1120_li
#The new view implementation is now enabled by default.  To use the old implementation, set the system property 'h2.indexOld' to true  (java -Dh2.indexOld=true ..., or in source code Constants.INDEX_OLD = true).  If no problems are found, the old implementation will be removed in the next release.  The old implementation does not work with multi-level nested temporary views  (select * from (select * from (select * from test))).

@history_1121_li
#The new view implementation did not work with &lt; and &lt;= comparison,  and did not allow conditions on aggregates or grouped columns (HAVING). Fixed.. Fixed.

@history_1122_li
#Both view implementations did not work with multiple levels of nested temporary views (FROM (SELECT...)). Fixed.

@history_1123_li
#The H2 Console can now be run as a standalone web application,  or it can be embedded as a servlet into any existing web application. To build the  'H2 Console' web application, execute 'ant warConsole'.  See src/tools/org/h2/server/web and src/tools/WEB-INF for details.  This web application has been tested with Tomcat and Jetty.

@history_1124_li
#Deleting database files didn't work for Windows if the database was on the root directory of a drive.

@history_1125_li
#The Polish translation is available. Thanks a lot to Tomek!

@history_1126_li
#Windows service: the CLASSPATH was not included when starting the service. Fixed.

@history_1127_h3
#Version 1.0.50 (2007-06-17)

@history_1128_li
#File names starting with ~ are now in the user directory (Java system property user.home)

@history_1129_li
#New Console starter application uses the JDK 1.6 system tray functionality if available,  or a simple AWT frame for other platforms. To try it out, execute  java org.h2.tools.Console. Feedback is welcome.  This console starter application is not the default yet,  but the plan is to remove the SysTray tool in the future.

@history_1130_li
#New method Csv.write(Writer writer, ResultSet rs)

@history_1131_li
#If a Reader or InputStream of a LOB is not closed, the LOB can not be deleted (embedded mode only).  The exception is typically 'Error while renaming file'). As a workaround, set the system property  'h2.lobCloseBetweenReads' to true to close the LOB files between read operations.  However this slows down reading.

@history_1132_li
#Server mode: the server stack trace was included in SQLException messages. Fixed.

@history_1133_li
#Views support has been partially re-implemented. Views are up to 6 times faster.  Compared to regular queries, only 20% overhead. Because this is a bigger change,  it is not enabled by default. To enable it, set the system property 'h2.indexNew' to true  (java -Dh2.indexNew=true ..., or in source code Constants.INDEX_NEW = true).  If no problems are found, this will be enabled by default in the next release.

@history_1134_li
#In INSERT and MERGE statements, each column may only be specified once now.

@history_1135_li
#For most IOExceptions now the file name is included in the error message.

@history_1136_li
#A java.util.Date object is now converted to a TIMESTAMP in the JDBC API. Previously it was converted to a DATE.

@history_1137_li
#After calling SHUTDOWN and closing the connection and a superfluous error message appeared in the trace file. Fixed.

@history_1138_li
#In many situations, views did not use an index if they could have. Fixed. Also the explain plan for views works now.

@history_1139_li
#The table id (important for LOB files) is now included in INFORMATION_SCHEMA.TABLES.

@history_1140_li
#When using DISTINCT, ORDER BY a function works now as long as it is in the column list.

@history_1141_li
#Support for the data type CHAR. The difference to VARCHAR is: trailing spaces are ignored. This  data type is supported for compatibility with other databases and older applications.

@history_1142_li
#The aggregate function COUNT(...) now returns a long instead of an int.

@history_1143_li
#The 'ordering' of data types was not always correct, for example an operation involving REAL and DOUBLE produced a result of type REAL. Fixed.

@history_1144_li
#CSV tool: If the same instance was used for reading and writing, the tool wrote the column names twice. Fixed.

@history_1145_li
#Compatibility: Support for the data type notation CHARACTER VARYING.

@history_1146_li
#Can now ORDER BY -1 (meaning order by first column, descending), and ORDER BY ? (parameterized column number).

@history_1147_li
#Databases with invalid linked tables (for example, because the target database is not accessible) can now be opened.  Old table links don't work however.

@history_1148_li
#There was a small memory leak in the trace module. One object per opened connection was kept in a hash map.

@history_1149_li
#Linked tables can now emit UPDATE statements if 'EMIT UPDATES' is specified in the CREATE LINKED  TABLE statement. So far, updating a row always deleted the old row and then inserted the new row.

@history_1150_li
#In the last release, the H2 Console opened two connection when logging into a database,  and only closed one connection when logging out. Fixed.

@history_1151_li
#New functions LEAST and GREATEST to get the smallest or largest value from a list.

@history_1152_h3
#Version 1.0.46 (2007-04-29)

@history_1153_li
#Unnamed private in-memory database (jdbc:h2:mem:) were not 'private' as documented. Fixed.

@history_1154_li
#Autocomplete in the Console application: now the result frame scrolls to the top when the list is updated.

@history_1155_li
#GROUP BY expressions did not work correctly in subqueries. Fixed.

@history_1156_li
#New function TABLE to define ad-hoc (temporary) tables in a query.  This also solves problems with variable-size IN(...) queries:  instead of SELECT * FROM TEST WHERE ID IN(?, ?, ...) you can now write:  SELECT * FROM TABLE(ID INT=?) X, TEST WHERE X.ID=TEST.ID  In this case, the index is used.

@history_1157_li
#New data type ARRAY. Actually it was there before, but is now documented  and better tested (however it must still be considered experimental).  The java.sql.Array implementation is incomplete, but setObject(1, new Object[]{...})  and getObject(..) can be used. New functions ARRAY_GET and ARRAY_LENGTH.

@history_1158_li
#SimpleResultSet now has some basic data type conversion features.

@history_1159_li
#When using JDK 1.5 or later, and switching on h2.lobFilesInDirectories,  the performance for creating LOBs was bad. This has been fixed, however  creating lots of LOBs it is still faster when the setting is switched off.

@history_1160_li
#A problem with multiple unnamed dynamic tables (FROM (SELECT...)) has been fixed.

@history_1161_li
#Appending 'Z' to a timestamp did not have an effect. Now it is interpreted as +00:00 (GMT).

@history_1162_li
#The BACKUP command is better tested and documented.  This means hot backup (online backup) is now possible.

@history_1163_li
#The old 'Backup' tool is now called 'Script' (as the SQL statement).

@history_1164_li
#There are new 'Backup' and 'Restore' tools that work with database files directly.

@history_1165_li
#The complete syntax for referential and check constraints is now supported  when written as part of the column definition, behind PRIMARY KEY.

@history_1166_li
#CASE WHEN ... returned the wrong result when the condition evaluated to NULL.

@history_1167_li
#The new function LINK_SCHEMA simplifies linking all tables of a schema.

@history_1168_li
#SCRIPT DROP now also drops aliases (Java functions) if they exist.

@history_1169_li
#For encrypted databases, the trace option can no longer be enabled manually by creating a file.

@history_1170_li
#For linked tables, NULL in the unique key is now supported.

@history_1171_li
#For read-only databases, temp files are now created in the default temp directory instead  of the database directory.

@history_1172_li
#Sending CLOB data was slow in some systems when using the server version. Fixed.

@history_1173_li
#CSVWRITE now returns the number of rows written.

@history_1174_li
#The data type of NULLIF was NULL if the first expression was a column. Now the data type is set correctly.

@history_1175_li
#Indexes (and other related objects) for local temporary tables where not dropped  when the session was closed. Fixed.

@history_1176_li
#ALTER TABLE did not work for tables with computed columns.

@history_1177_li
#SQLException.getCause of the now works for JDK 1.4 and higher.

@history_1178_li
#If the index file was deleted, an error was logged in the .trace.db file. This is no longer done.

@history_1179_li
#The Portuguese (Europe) translation is available. Thanks a lot to Antonio Casqueiro!

@history_1180_li
#The error message for invalid views has been improved (the root cause is included in the message now).

@history_1181_li
#IN(SELECT ...) was not working correctly if the subquery returned a NULL value. Fixed.

@history_1182_li
#DROP ALL OBJECTS did not drop constants.

@history_1183_li
#DROP ALL OBJECTS dropped the role PUBLIC, which was wrong. Fixed.

@history_1184_li
#CASE was parsed as a function if the expression was in (). Fixed.

@history_1185_li
#When ORDER BY was used together with DISTINCT, it was required to type the column  name exactly in the select list and the order list exactly in the same way.  This is not required any longer.

@history_1186_h3
#Version 1.0.44 (2007-03-04)

@history_1187_li
#System sequences (automatically created sequences for IDENTITY or AUTO_INCREMENT columns) are now  random (UUIDs) to avoid clashes when merging databases using RUNSCRIPT.

@history_1188_li
#The precision for linked tables was not correct for some data types, for example VARCHAR. Fixed.

@history_1189_li
#Many problems and bugs in the XA support (package javax.sql) have been fixed.

@history_1190_li
#Now the server tool (org.h2.tools.Server) terminates with an exit code if a problem occured.

@history_1191_li
#The JDBC driver is now loaded if the JdbcDataSource class is loaded.

@history_1192_li
#After renaming a user the password becomes invalid. This is now documented.

@history_1193_li
#XAResource.recover didn't work. Fixed.

@history_1194_li
#XAResource.recover did throw an exception with the code XAER_OUTSIDE if there  was no connection. Now the code is XAER_RMERR.

@history_1195_li
#SCRIPT did not work correctly with BLOB or CLOB data. Fixed.

@history_1196_li
#BACKUP TO 'test.zip' now works with encrypted databases and CLOB and BLOB data.

@history_1197_li
#The function CASE WHEN ... didn't convert the returned value to the same data type,  resulting in unexpected behavior in many cases. Fixed.

@history_1198_li
#Truncating a table is now allowed if the table references another table  (but still not allowed if the table is references by another table).

@history_1199_li
#ORDER BY picked the wrong column if the same column name (but with a different table name)  was used twice in the select list.

@history_1200_li
#When a subquery was used in the select list of a query, and GROUP BY was used at the same time,  a NullPointerException could occur. Fixed.

@history_1201_li
#ORDER BY did not work when DISTINCT was used at the same time in some situations. Fixed.

@history_1202_li
#When using IN(...) on a case insensitive column (VARCHAR_IGNORECASE),  an incorrect optimization was made and the result was wrong sometimes.

@history_1203_h3
#Version 1.0.41 (2007-01-30)

@history_1204_li
#Experimental online backup feature using the SQL statement BACKUP TO 'fileName'.  This creates a backup in the form of a zip file. Unlike the SCRIPT TO command, the data tables are not locked.

@history_1205_li
#When using the server mode, temporary files for large LOB values are now deleted when the result set is closed.  This also means that LOBs become unavailable after closing the result, however this is according to the specs.

@history_1206_li
#It was possible that SUM throws a class cast exception if the parameter was a conditional expression.

@history_1207_li
#Benchmark: Added a multi-client test case, BenchB (similar to TPC-B).

@history_1208_li
#Compatibility: SCHEMA_NAME.SEQUENCE_NAME.NEXTVAL now works as expected.

@history_1209_li
#The Console is now translated to Hungarian thanks to Andras Hideg,  and to Indonesian thanks to Joko Yuliantoro

@history_1210_li
#XAConnection: A NullPointerException was thrown if addConnectionEventListener was called before opening the connection.

@history_1211_li
#In case the result set of a subquery was re-used, an exception was throws if the subquery result did not fit in memory.  Now the result is not re-used in this case. Generally, large subqueries should be avoided for performance reasons.

@history_1212_li
#The command "drop all objects delete files" did not work on linux if the database name was lower case.

@history_1213_li
#When setting the URL to an empty string the DataSource now throws an better exception.

@history_1214_li
#Parsing of LIKE .. ESCAPE did not stop at the expected point. Fixed.

@history_1215_li
#Can now use UUID columns as generated key values. However, the UUID column must be the primary key.

@history_1216_li
#Improved the Javadoc documentation. Now unsupported features are marked with [Not supported],  and partially supported features are [Partially supported].

@history_1217_li
#The forum subscriptions (the emails sent from the forum) now works.

@history_1218_h3
#Version 1.0.40 (2007-01-17)

@history_1219_li
#Setting the collation (SET COLLATOR) was very slow on some systems (up to 24 seconds).  Thanks a lot to Martina Nissler for finding this problem!

@history_1220_li
#The Console is now translated to Japanese thanks to IKEMOTO, Masahiro (ikeyan (at) arizona (dot) ne (dot) jp)

@history_1221_li
#The database engine can now be compiled with JDK 1.3 using ant codeswitch.  There are still some limitations, and the ant script to build the jar does not work yet.

@history_1222_li
#Fixed a problem where data in the log file was not written to the data file (recovery failure) after a crash,  if an index was deleted previously.

@history_1223_li
#SCRIPT NODATA now writes the row count for each table (this simplifies comparing databases).

@history_1224_li
#Selecting a column using the syntax schemaName.tableName.columnName did not work in all cases.

@history_1225_li
#Can now parse timestamps with timezone information (Z or +/-hh:mm) and dates before year 1.  However dates before year 1 are not formatted correctly (this is a Java problem).

@history_1226_li
#When stopping the TCP server from an application and immediately afterwards staring it again  using a different TCP password, an exception was thrown sometimes.

@history_1227_li
#Now PreparedStatement.setBigDecimal(..) can only be called with an object  of type java.math.BigDecimal. Derived classes are not allowed any more. Many thanks to  Maciej Wegorkiewicz for finding this problem.

@history_1228_li
#It was possible to manipulate values in the byte array after calling PreparedStatement.setBytes, and this  could lead to problems if the same byte array was used again. Now the byte array is copied if required.

@history_1229_li
#Date, time and timestamp objects were cloned in cases where it was not required. Fixed.

@history_1230_h3
#Version 1.0.36 (2007-01-02)

@history_1231_li
#It was possible to drop the sequence of a temporary tables with DROP ALL OBJECTS, resulting in a null pointer exception afterwards.

@history_1232_li
#Prepared statements with non-constant functions such as CURRENT_TIMESTAMP() did not get re-evaluated if the result of the function changed. Fixed.

@history_1233_li
#The (relative or absolute) directory where the script files are stored or read can now be changed using the system property h2.scriptDirectory

@history_1234_li
#Client trace files now created in the directory 'trace.db' and no longer the application directory.  This can be changed using the system property h2.clientTraceDirectory.

@history_1235_li
#In some situations the log file got corrupt if the process was terminated while the database was opening.

@history_1236_li
#Using ;RECOVER=1 in the database URL threw a syntax exception. Fixed.

@history_1237_li
#If a CLOB or BLOB was deleted in a transaction and the database crashed before the transaction was committed or rolled back,  the object was lost if it was large. Fixed.

@history_1238_li
#Now using ant-build.properties. The jdk is automatically updated when using ant codeswitch...

@history_1239_li
#Cluster: Now the server can detect if a query is read-only, and in this case the result is only read from the first cluster node.  However, there is currently no load balancing made to avoid problems with transactions / locking.

@history_1240_li
#Many settings are now initialized from system properties and can be changed on the command line without having  recompile the database. See Advances / Settings Read from System Properties.

@history_1241_li
#H2 is now available in Maven. The groupId is com.h2database, the artifactId h2 and the version 1.0.20061217.  To create the maven artifacts yourself, use 'ant mavenUploadLocal' and 'ant mavenBuildCentral'.

@history_1242_h3
#Version 1.0.25 (2006-08-31)

@history_1243_li
#In some situations, wide b-tree indexes (with large VARCHAR columns for example) could get corrupted. Fixed.

@history_1244_li
#ORDER BY was broken in the last release when using table aliases. Fixed.

@history_1245_h3
#Version 0.9 (2005-12-13)

@history_1246_li
#First public release.

@history_1247_h2
#Roadmap

@history_1248_h3
#Highest Priority

@history_1249_li
#Improve test code coverage

@history_1250_li
#More fuzz tests

@history_1251_li
#Test very large databases and LOBs (up to 256 GB)

@history_1252_li
#Test multi-threaded in-memory db access

@history_1253_h3
#In Version 1.1

@history_1254_li
#Add version number. Install directory: h2-1.0, jar file: h2-1.0.jar. Micro version: use build number, staring with 1.1.100

@history_1255_li
#Automatic upgrade if there is a file format change

@history_1256_li
#ALTER TABLE on a table with a LOB could result in 'Cannot delete file' on some systems. Fixed.

@history_1257_li
#Change Constants.DEFAULT_MAX_MEMORY_UNDO to 10000 (and change the docs). Test.

@history_1258_li
#Enable and document optimizations, LOB files in directories

@history_1259_li
#Special methods for DataPage.writeByte / writeShort and so on

@history_1260_li
#Index organized tables CREATE TABLE...(...) ORGANIZATION INDEX (store in data file) (probably file format changes are required for rowId)

@history_1261_li
#Change the default for NULL || 'x' to NULL

@history_1262_h3
#Priority 1

@history_1263_li
#MVCC (Multi Version Concurrency Control)

@history_1264_li
#Read-only databases inside a jar (splitting large files to speed up random access)

@history_1265_li
#RECOVER=1 should automatically recover, =2 should run the recovery tool if required

@history_1266_li
#More tests with MULTI_THREADED=1

@history_1267_li
#Improve performance for create table (if this is possible)

@history_1268_li
#Test with Spatial DB in a box / JTS (http://docs.codehaus.org/display/GEOS/SpatialDBBox)

@history_1269_li
#Document how to use H2 with PHP (generic database API)

@history_1270_li
#Optimization: result set caching (like MySQL)

@history_1271_li
#Server side cursors

@history_1272_li
#Row level locking

@history_1273_li
#System table: open sessions and locks of a database

@history_1274_li
#Function in management db: list open connections and databases of a (TCP) server

@history_1275_li
#Fix right outer joins

@history_1276_li
#Full outer joins

@history_1277_li
#Long running queries / errors / trace system table

@history_1278_li
#Migrate database tool (also from other database engines)

@history_1279_li
#Shutdown compact

@history_1280_li
#Optimization of distinct with index: select distinct name from test

@history_1281_li
#Document server mode, embedded mode, web app mode, dual mode (server+embedded)

@history_1282_li
#Stop the server: close all open databases first

@history_1283_li
#SET variable { TO | = } { value | 'value' | DEFAULT }

@history_1284_li
#Running totals: select @running:=if(@previous=t.ID,@running,0)+t.NUM as TOTAL, @previous:=t.ID

@history_1285_li
#Better support large transactions, large updates / deletes: use less memory

@history_1286_li
#Better support large transactions, large updates / deletes: allow tables without primary key

@history_1287_li
#Support Oracle RPAD and LPAD(string, n[, pad]) (truncate the end if longer)

@history_1288_li
#Allow editing NULL values in the Console

@history_1289_li
#Updatable result sets: DatabaseMetaData.ownUpdatesAreVisible = true (for insert, delete, update)  Simple solution: automatically calls 'refresh' when the result was changed.  Compare with other databases.

@history_1290_h3
#Priority 2

@history_1291_li
#Support OSGi: http://oscar-osgi.sourceforge.net, http://incubator.apache.org/felix/index.html

@history_1292_li
#Procedural language / script language (Javascript)

@history_1293_li
#Change LOB mechanism (less files, keep index of lob files, point to files and row, delete unused files earlier, maybe bundle files into a tar file)

@history_1294_li
#Set the database in an 'exclusive' mode (restrict to one user at a time)

@history_1295_li
#Clustering: recovery needs to becomes fully automatic. Global write lock feature.

@history_1296_li
#Deferred integrity checking (DEFERRABLE INITIALLY DEFERRED)

@history_1297_li
#Groovy Stored Procedures (http://groovy.codehaus.org/Groovy+SQL)

@history_1298_li
#System table / function: cache usage

@history_1299_li
#User defined aggregate functions

@history_1300_li
#Add a migration guide (list differences between databases)

@history_1301_li
#Optimization: automatic index creation suggestion using the trace file?

@history_1302_li
#Compression performance: don't allocate buffers, compress / expand in to out buffer

@history_1303_li
#Connection pool manager

@history_1304_li
#Implement Statement.cancel for server connections

@history_1305_li
#Start / stop server with database URL

@history_1306_li
#Rebuild index functionality (other than delete the index file)

@history_1307_li
#Don't use deleteOnExit (bug 4513817: File.deleteOnExit consumes memory)

@history_1308_li
#Console: add accesskey to most important commands (A, AREA, BUTTON, INPUT, LABEL, LEGEND, TEXTAREA)

@history_1309_li
#Feature: a setting to delete the the log or not (for backup)

@history_1310_li
#Test with Sun ASPE1_4; JEE Sun AS PE1.4

@history_1311_li
#Test performance again with SQL Server, Oracle, DB2

@history_1312_li
#Test with dbmonster (http://dbmonster.kernelpanic.pl/)

@history_1313_li
#Test with dbcopy (http://dbcopyplugin.sourceforge.net)

@history_1314_li
#Find a tool to view a text file >100 MB, with find, page up and down (like less)

@history_1315_li
#Implement, test, document XAConnection and so on

@history_1316_li
#Web site: meta keywords, description, get rid of frame set

@history_1317_li
#Pluggable data type (for compression, validation, conversion, encryption)

@history_1318_li
#CHECK: find out what makes CHECK=TRUE slow, move to CHECK2

@history_1319_li
#Improve recovery: improve code for log recovery problems (less try/catch)

@history_1320_li
#Log linear hash index changes, fast open / close

@history_1321_li
#Index usage for (ID, NAME)=(1, 'Hi'); document

@history_1322_li
#Suggestion: include jetty as Servlet Container (like LAMP)

@history_1323_li
#Trace shipping to server

@history_1324_li
#Performance / server mode: use UDP optionally?

@history_1325_li
#Version check: docs / web console (using javascript), and maybe in the library (using TCP/IP)

@history_1326_li
#Aggregates: support MEDIAN

@history_1327_li
#Web server classloader: override findResource / getResourceFrom

@history_1328_li
#Cost for embedded temporary view is calculated wrong, if result is constant

@history_1329_li
#Comparison: pluggable sort order: natural sort

@history_1330_li
#Count index range query (count(*) where id between 10 and 20)

@history_1331_li
#Eclipse plugin

@history_1332_li
#iReport to support H2

@history_1333_li
#Implement missing JDBC API (CallableStatement,...)

@history_1334_li
#Compression of the cache

@history_1335_li
#Run H2 Console inside servlet (pass-through servlet of fix the JSP / app)

@history_1336_li
#Include SMPT (mail) server (at least client) (alert on cluster failure, low disk space,...)

@history_1337_li
#Make the jar more modular

@history_1338_li
#Drop with restrict (currently cascade is the default)

@history_1339_li
#JSON parser and functions

@history_1340_li
#Option for Java functions: constant/isDeterministic to allow early evaluation when all parameters are constant

@history_1341_li
#Automatic collection of statistics (auto ANALYZE)

@history_1342_li
#Server: client ping from time to time (to avoid timeout - is timeout a problem?)

@history_1343_li
#Copy database: Tool with config GUI and batch mode, extensible (example: compare)

@history_1344_li
#Document, implement tool for long running transactions using user defined compensation statements

@history_1345_li
#Support SET TABLE DUAL READONLY

@history_1346_li
#Linked schema using CSV files: one schema for a directory of files; support indexes for CSV files

@history_1347_li
#Don't write stack traces for common exceptions like duplicate key to the log by default

@history_1348_li
#Setting for MAX_QUERY_TIME (default no limit?)

@history_1349_li
#GCJ: what is the state now?

@history_1350_li
#Convert large byte[]/Strings to streams in the JDBC API (asap).

@history_1351_li
#Use Janino to convert Java to C++

@history_1352_li
#Reduce disk space usage (Derby uses less disk space?)

@history_1353_li
#Events for: Database Startup, Connections, Login attempts, Disconnections, Prepare (after parsing), Web Server (see  http://docs.openlinksw.com/virtuoso/fn_dbev_startup.html)

@history_1354_li
#Optimization: Log compression

@history_1355_li
#Compatibility: in MySQL, HSQLDB, /0.0 is NULL; in PostgreSQL, Derby: Division by zero

@history_1356_li
#Functional tables should accept parameters from other tables (see FunctionMultiReturn)  SELECT * FROM TEST T, P2C(T.A, T.R)

@history_1357_li
#Custom class loader to reload functions on demand

@history_1358_li
#Test http://mysql-je.sourceforge.net/

@history_1359_li
#Close all files when closing the database (including LOB files that are open on the client side)

@history_1360_li
#Test Connection Pool http://jakarta.apache.org/commons/dbcp

@history_1361_li
#Profiler option or profiling tool to find long running and often repeated queries (using DatabaseEventListener API)

@history_1362_li
#Function to read/write a file from/to LOB

@history_1363_li
#Allow custom settings (@PATH for RUNSCRIPT for example)

@history_1364_li
#Performance test: read the data (getString) and use column names to get the data

@history_1365_li
#EXE file: maybe use http://jsmooth.sourceforge.net

@history_1366_li
#SELECT ... FOR READ WAIT [maxMillisToWait]

@history_1367_li
#Automatically delete the index file if opening it fails

@history_1368_li
#Performance: Automatically build in-memory indexes if the whole table is in memory

@history_1369_li
#H2 Console: The webclient could support more features like phpMyAdmin.

@history_1370_li
#The HELP information schema can be directly exposed in the Console

@history_1371_li
#Maybe use the 0x1234 notation for binary fields, see MS SQL Server

@history_1372_li
#KEY_COLUMN_USAGE (http://dev.mysql.com/doc/refman/5.0/en/information-schema.html, http://www.xcdsql.org/Misc/INFORMATION_SCHEMA%20With%20Rolenames.gif)

@history_1373_li
#Support Oracle CONNECT BY in some way: http://www.adp-gmbh.ch/ora/sql/connect_by.html, http://philip.greenspun.com/sql/trees.html

@history_1374_li
#SQL 2003 (http://www.wiscorp.com/sql_2003_standard.zip)

@history_1375_li
#http://www.jpackage.org

@history_1376_li
#Version column (number/sequence and timestamp based)

@history_1377_li
#Optimize getGeneratedKey: send last identity after each execute (server).

@history_1378_li
#Date: default date is '1970-01-01' (is it 1900-01-01 in the standard / other databases?)

@history_1379_li
#Test and document UPDATE TEST SET (ID, NAME) = (SELECT ID*10, NAME || '!' FROM TEST T WHERE T.ID=TEST.ID);

@history_1380_li
#Better space re-use in the files after deleting data (shrink the files)

@history_1381_li
#Max memory rows / max undo log size: use block count / row size not row count

@history_1382_li
#Index summary is only written if log=2; maybe write it also when log=1 and everything is fine (and no in doubt transactions)

@history_1383_li
#Support 123L syntax as in Java; example: SELECT (2000000000*2)

@history_1384_li
#Implement point-in-time recovery

@history_1385_li
#Memory database: add a feature to keep named database open until 'shutdown'

@history_1386_li
#Use the directory of the first script as the default directory for any scripts run inside that script

@history_1387_li
#Include the version name in the jar file name

@history_1388_li
#Optimize IN(...), IN(select), ID=? OR ID=?: create temp table and use join

@history_1389_li
#LIKE: improved version for larger texts (currently using naive search)

@history_1390_li
#Auto-reconnect on lost connection to server (even if the server was re-started) except if autocommit was off and there was pending transaction

@history_1391_li
#The Script tool should work with other databases as well

@history_1392_li
#Automatically convert to the next 'higher' data type whenever there is an overflow.

@history_1393_li
#Throw an exception when the application calls getInt on a Long (optional)

@history_1394_li
#Default date format for input and output (local date constants)

@history_1395_li
#Cache collation keys for performance

@history_1396_li
#Convert OR condition to UNION or IN if possible

@history_1397_li
#ValueInt.convertToString and so on (remove Value.convertTo)

@history_1398_li
#Support custom Collators

@history_1399_li
#Document ROWNUM usage for reports: SELECT ROWNUM, * FROM (subquery)

@history_1400_li
#Clustering: Reads should be randomly distributed or to a designated database on RAM

@history_1401_li
#Clustering: When a database is back alive, automatically synchronize with the master

@history_1402_li
#Standalone tool to get relevant system properties and add it to the trace output.

@history_1403_li
#Support mixed clustering mode (one embedded, the other server mode)

@history_1404_li
#Support 'call proc($1=value)' (PostgreSQL, Oracle)

@history_1405_li
#HSQLDB compatibility: "INSERT INTO TEST(name) VALUES(?); SELECT IDENTITY()"

@history_1406_li
#Shutdown lock (shutdown can only start if there are no logins pending, and logins are delayed until shutdown ends)

@history_1407_li
#Automatically delete the index file if opening it fails

@history_1408_li
#DbAdapters http://incubator.apache.org/cayenne/

@history_1409_li
#JAMon (proxy jdbc driver)

@history_1410_li
#Console: Allow setting Null value; Alternative display format two column (for copy and paste as well)

@history_1411_li
#Console: Improve editing data (Tab, Shift-Tab, Enter, Up, Down, Shift+Del?)

@history_1412_li
#Console: Autocomplete Ctrl+Space inserts template

@history_1413_li
#Google Code http://code.google.com/p/h2database/issues/list#

@history_1414_li
#Simplify translation ('Donate a translation')

@history_1415_li
#Option to encrypt .trace.db file

@history_1416_li
#Write Behind Cache on SATA leads to data corruption  See also http://sr5tech.com/write_back_cache_experiments.htm  and http://www.jasonbrome.com/blog/archives/2004/04/03/writecache_enabled.html

@history_1417_li
#Functions with unknown return or parameter data types: serialize / deserialize

@history_1418_li
#Test if idle TCP connections are closed, and how to disable that

@history_1419_li
#Try using a factory for Row, Value[] (faster?), http://javolution.org/, alternative ObjectArray / IntArray

@history_1420_li
#Auto-Update feature for database, .jar file

@history_1421_li
#ResultSet  SimpleResultSet.readFromURL(String url): id varchar, state varchar, released timestamp

@history_1422_li
#RANK() and DENSE_RANK(), Partition using OVER()

@history_1423_li
#ROW_NUMBER (not the same as ROWNUM)

@history_1424_li
#Partial indexing (see PostgreSQL)

@history_1425_li
#BUILD should fail if ant test fails

@history_1426_li
#http://rubyforge.org/projects/hypersonic/

@history_1427_li
#DbVisualizer profile for H2

@history_1428_li
#Add comparator (x === y) : (x = y or (x is null and y is null))

@history_1429_li
#Try to create trace file even for read only databases

@history_1430_li
#Add a sample application that runs the H2 unit test and writes the result to a file (so it can be included in the user app)

@history_1431_li
#Count on a column that can not be null would be optimized to COUNT(*)

@history_1432_li
#Table order: ALTER TABLE TEST ORDER BY NAME DESC (MySQL compatibility)

@history_1433_li
#Backup tool should work with other databases as well

@history_1434_li
#Console: -ifExists doesn't work for the console. Add a flag to disable other dbs

@history_1435_li
#Maybe use Fowler Noll Vo hash function

@history_1436_li
#Improved full text search (supports LOBs, reader / tokenizer / filter).

@history_1437_li
#Performance: Update in-place

@history_1438_li
#Check if 'FSUTIL behavior set disablelastaccess 1' improves the performance (fsutil behavior query disablelastaccess)

@history_1439_li
#Java static code analysis: http://pmd.sourceforge.net/

@history_1440_li
#Java static code analysis: http://www.eclipse.org/tptp/

@history_1441_li
#Compatibility for CREATE SCHEMA AUTHORIZATION

@history_1442_li
#Implement Clob / Blob truncate and the remaining functionality

@history_1443_li
#Maybe close LOBs after closing connection

@history_1444_li
#Tree join functionality

@history_1445_li
#Support alter table add column if table has views defined

@history_1446_li
#Add multiple columns at the same time with ALTER TABLE .. ADD .. ADD ..

@history_1447_li
#Support trigger on the tables information_schema.tables and ...columns

@history_1448_li
#Add H2 to Gem (Ruby install system)

@history_1449_li
#API for functions / user tables

@history_1450_li
#Order conditions inside AND / OR to optimize the performance

@history_1451_li
#Support linked JCR tables

@history_1452_li
#Make sure H2 is supported by Execute Query: http://executequery.org/

@history_1453_li
#Read InputStream when executing, as late as possible (maybe only embedded mode). Problem with re-execute.

@history_1454_li
#Full text search: min word length; store word positions

@history_1455_li
#FTP Server: Implement a client to send / receive files to server (dir, get, put)

@history_1456_li
#FTP Server: Implement SFTP / FTPS

@history_1457_li
#Add an option to the SCRIPT command to generate only portable / standard SQL

@history_1458_li
#Test Dezign for Databases (http://www.datanamic.com)

@history_1459_li
#Fast library for parsing / formatting: http://javolution.org/

@history_1460_li
#Updatable Views (simple cases first)

@history_1461_li
#Improve create index performance

@history_1462_li
#Support ARRAY data type

@history_1463_li
#Implement more JDBC 4.0 features

@history_1464_li
#H2 Console: implement a servlet to allow simple web app integration

@history_1465_li
#Support TRANSFORM / PIVOT as in MS Access

@history_1466_li
#Sequence: PostgreSQL compatibility (rename, create) (http://www.postgresql.org/docs/8.2/static/sql-altersequence.html)

@history_1467_li
#SELECT * FROM (VALUES (...), (...), ....) AS alias(f1, ...)

@history_1468_li
#Support updatable views with join on primary keys (to extend a table)

@history_1469_li
#File_Read / File_Store funktionen: FILE_STORE('test.sql', ?), FILE_READ('test.sql')

@history_1470_li
#Public interface for functions (not public static)

@history_1471_li
#Autocomplete: if I type the name of a table that does not exist (should say: syntax not supported)

@history_1472_li
#Autocomplete: schema support: "Other Grammar","Table Expression","{[schemaName.]tableName | (select)} [[AS] newTableAlias]

@history_1473_li
#Functions: options readonly, deterministic (pure, always return the same value)

@history_1474_li
#Document FTP server, including -ftpTask option to execute / kill remote processes

@history_1475_li
#Add jdbcx to the javadocs

@history_1476_li
#Shrink the data file without closing the database (if the end of the file is empty)

@history_1477_li
#Delay reading the row if data is not required

@history_1478_li
#Eliminate undo log records if stored on disk (just one pointer per block, not per record)

@history_1479_li
#Feature matrix like here: http://www.inetsoftware.de/products/jdbc/mssql/features/default.asp.

@history_1480_li
#Updatable result set on table without primary key or unique index

@history_1481_li
#Use LinkedList instead of ArrayList where applicable

@history_1482_li
#Optimization: (A=B AND B=C) > (A=B AND B=C AND A=C)

@history_1483_li
#Support % operator (modulo)

@history_1484_li
#Large subqueries: close them when the main query is closed, not earlier (so result can be reused)

@history_1485_li
#Support 1+'2'=3, '1'+'2'='12' (MS SQL Server compatibility)

@history_1486_li
#Support nested transactions

@history_1487_li
#Add a benchmark for big databases, and one for many users

@history_1488_li
#Compression in the result set (repeating values in the same column)

@history_1489_li
#Improve command line consistency (+/- options, or true false options)

@history_1490_li
#Allow to use the catalog name in statements: [[catalog.]schema.]object

@history_1491_li
#Support curtimestamp (like curtime, curdate)

@history_1492_li
#Support ANALYZE {TABLE|INDEX} tableName COMPUTE|ESTIMATE|DELETE STATISTICS ptnOption options

@history_1493_li
#Support Sequoia (Continuent.org)

@history_1494_li
#Dynamic length numbers / special methods for DataPage.writeByte / writeShort / Ronni Nielsen

@history_1495_li
#Pluggable tracing system, ThreadPool,  (AvalonDB / deebee / Paul Hammant)

@history_1496_li
#Recursive Queries (see details)

@history_1497_li
#Use index on boolean flag (see details)

@history_1498_li
#Add build for embedded database only

@history_1499_li
#Release locks (shared or exclusive) on demand

@history_1500_li
#Support catalog names

@history_1501_li
#Add object id to metadata tables

@history_1502_li
#Support OUTER UNION

@history_1503_li
#Support Parameterized Views (similar to CSVREAD, but using just SQL for the definition)

@history_1504_li
#Implement a command line SQL utility similar to HenPlus: http://henplus.sourceforge.net

@history_1505_li
#A way (JDBC driver) to map an URL (jdbc:h2map:c1) to a connection object

@history_1506_li
#Build script for the embedded functionality only (h2embedded.jar)

@history_1507_li
#Option for SCRIPT to only process one or a set of tables, and append to a file

@history_1508_li
#Support using a unique index for IS NULL (including linked tables)

@history_1509_li
#Support linked tables to the current database

@history_1510_li
#Support dynamic linked schema (automatically adding/updating/removing tables)

@history_1511_li
#Compatibility with Derby: VALUES(1), (2); SELECT * FROM (VALUES (1), (2)) AS myTable(c1)

@history_1512_li
#Compatibility: # is the start of a single line comment (MySQL) but date quote (Access). Mode specific

@history_1513_li
#Run benchmarks with JDK 1.5, JDK 1.6, java -server

@history_1514_li
#Optimizations: Faster hash function for strings, byte arrays, big decimal

@history_1515_li
#Improve trace feature: add replay functionality

@history_1516_li
#DatabaseEventListener: callback for all operations (including expected time, RUNSCRIPT) and cancel functionality

@history_1517_li
#H2 Console / large result sets: use 'streaming' instead of building the page in-memory

@history_1518_li
#Benchmark: add a graph to show how databases scale (performance/database size)

@history_1519_li
#Implement a SQLData interface to map your data over to a custom object

@history_1520_li
#Extend H2 Console to run tools (show command line as well)

@history_1521_li
#Make DDL (Data Definition) operations transactional

@history_1522_li
#Sequence: add features [NO] MINVALUE, MAXVALUE, CACHE, CYCLE

@history_1523_li
#Allow execution time prepare for SELECT * FROM CSVREAD(?, 'columnNameString')

@history_1524_li
#Support multiple directories (on different hard drives) for the same database

@history_1525_li
#Server protocol: use challenge response authentication, but client sends hash(user+password) encrypted with response

@history_1526_li
#Support EXEC[UTE] (doesn't return a result set, compatible to MS SQL Server)

@history_1527_li
#GROUP BY and DISTINCT: support large groups (buffer to disk), do not keep large sets in memory

@history_1528_li
#Support native XML data type

@history_1529_li
#Support triggers with a string property or option: SpringTrigger, OSGITrigger

@history_1530_li
#Clustering: adding a node should be very fast and without interrupting clients (very short lock)

@history_1531_li
#Support materialized views (using triggers)

@history_1532_li
#Store dates in local timezone (portability of database files)

@history_1533_li
#Ability to resize the cache array when resizing the cache

@history_1534_li
#Automatic conversion from WHERE X>10 AND X>20 to X>20

@history_1535_li
#Time based cache writing (one second after writing the log)

@history_1536_li
#Write a H2 driver for http://db.apache.org/ddlutils/

@history_1537_li
#Index usage for REGEXP LIKE.

@history_1538_li
#Add a role DBA (like ADMIN).

@history_1539_li
#Automatic mode: jdbc:h2:auto: (embedded mode if possible, if not use server mode).  Problem: what to do when server stops while others are connected to it.

@history_1540_li
#Access rights: remember the owner of an object. COMMENT: allow owner of object to change it.

@history_1541_li
#Implement INSTEAD OF trigger.

@history_1542_li
#Access rights: Finer grained access control (grant access for specific functions)

@history_1543_li
#Support N'text'

@history_1544_li
#Support SCOPE_IDENTITY() to avoid problems when inserting rows in a trigger

@history_1545_li
#Support DESCRIBE like MySQL or Oracle (DESC|DESCRIBE {[schema.]object[@connect_identifier]})

@history_1546_li
#Set a connection read only (Connection.setReadOnly)

@history_1547_li
#In MySQL mode, for AUTO_INCREMENT columns, don't set the primary key

@history_1548_li
#Use JDK 1.4 file locking to create the lock file (but not yet by default); writing a system property to detect concurrent access from the same VM (different classloaders).

@history_1549_li
#Read-only sessions (Connection.setReadOnly)

@history_1550_li
#Support compatibility for jdbc:hsqldb:res:

@history_1551_li
#In the MySQL and PostgreSQL, use lower case identifiers by default (DatabaseMetaData.storesLowerCaseIdentifiers = true)

@history_1552_li
#Provide a simple, lightweight O/R mapping tool

@history_1553_li
#Provide an Java SQL builder with standard and H2 syntax

@history_1554_li
#Data compression for in-memory database

@history_1555_li
#Trace: write os, file system, vm,... when opening the database

@history_1556_li
#Trace: write dangerous operations (set log 0,...) in every case (including when opening the database)

@history_1557_li
#ParameterMetaData should return correct data type where possible (INSERT for example)

@history_1558_li
#Support indexes for views (probably requires materialized views)

@history_1559_li
#Linked tables that point to the same database should share the connection

@history_1560_li
#Use log for rollback

@history_1561_li
#Document SET SEARCH_PATH, BEGIN, EXECUTE, $ parameters

@history_1562_li
#Complete Javadocs for ErrorCode messages and add to docs

@history_1563_li
#Browser: use Desktop.isDesktopSupported and browse when using JDK 1.6

@history_1564_li
#Document org.h2.samples.MixedMode

@history_1565_li
#Server: use one listener (detect if the request comes from an PG or TCP client)

@history_1566_li
#Store dates as 'local'. Existing files use GMT. Use escape syntax for compatibility)

@history_1567_li
#Support data type INTERVAL

@history_1568_li
#NATURAL JOIN: MySQL and PostgreSQL don't repeat columns when using SELECT * ...

@history_1569_li
#Optimize SELECT MIN(ID), MAX(ID), COUNT(*) FROM TEST WHERE ID BETWEEN 100 AND 200

@history_1570_li
#Support Oracle functions: TRUNC, NVL2, TO_CHAR, TO_DATE, TO_NUMBER

@history_1571_h3
#Not Planned

@history_1572_li
#HSQLDB (did) support this: select id i from test where i>0 (other databases don't)

@history_1573_li
#String.intern (so that Strings can be compared with ==) will not be used because some VMs have problems when used extensively

@history_1574_h2
#Supporters

@history_1575_p
#Many thanks for those who helped by finding and reporting bugs, gave valuable feedback, spread the word and have translated this project. Also many thanks to the donors who contributed via PayPal:

@history_1576_li
#Florent Ramiere, France

@history_1577_li
#Pete Haidinyak, USA

@history_1578_li
#Jun Iyama, Japan

@history_1579_li
#Antonio Casqueiro, Portugal

@history_1580_li
#lumber-mill.co.jp, Japan

@installation_1000_h1
インストール

@installation_1001_a
必要条件

@installation_1002_a
サポートされているプラットフォーム

@installation_1003_a
ソフトウェアのインストール

@installation_1004_a
ディレクトリ構成

@installation_1005_h2
必要条件

@installation_1006_p
データベースを実行するために、以下のソフトウェアが動作することを確認します。 互換性のあるソフトウェアでも動作しますが、テストはされていません。

@installation_1007_li
Windows XP, MacOS, or Linux

@installation_1008_li
Recommended Windows file system: NTFS (FAT32 supports files up to 4 GB)

@installation_1009_li
Sun JDK 1.4 or newer

@installation_1010_li
Mozilla Firefox 1.5 or newer

@installation_1011_h2
サポートされているプラットフォーム

@installation_1012_p
このデータベースはJavaで書かれているため、多くの異なったプラットフォームで実行することができます。 Java 1.4 と 1.5でテストされましたが、GCJを使用することでネイティブコードにコンパイルすることもできます。 ソースコードはJava 1.5の特徴は使われていません。現在、データベースはWindows XPでSun JDKを使用して開発、テストされていますが、 おそらく、他の多くのOSと他のJava Runtime Environmentを使用しても動作するでしょう。

@installation_1013_h2
ソフトウェアのインストール

@installation_1014_p
ソフトウェアをインストールするために、インストーラーを実行するか 選択したディレクトリにソフトウェアを解凍します。

@installation_1015_h2
ディレクトリ構成

@installation_1016_p
インストール後、下記のディレクトリ構成が作られます:

@installation_1017_th
ディレクトリ

@installation_1018_th
コンテンツ

@installation_1019_td
bin

@installation_1020_td
JAR and batch files

@installation_1021_td
docs

@installation_1022_td
Documentation

@installation_1023_td
docs/html

@installation_1024_td
HTML pages

@installation_1025_td
docs/javadoc

@installation_1026_td
Javadoc files

@installation_1027_td
odbc

@installation_1028_td
ODBC drivers and tools

@installation_1029_td
service

@installation_1030_td
Tools to run the database as a Windows Service

@installation_1031_td
src

@installation_1032_td
Source files

@license_1000_h1
ライセンス

@license_1001_h2
#Summary and License FAQ

@license_1002_p
#This license is a modified version of the MPL 1.1 available at <a href="http://www.mozilla.org/MPL">www.mozilla.org/MPL</a> , the changes are

@license_1003_em
#underlined</em> . There is a License FAQ section at the Mozilla web site, most of that is applicable to the H2 License as well.

@license_1004_li
#You can use H2 for free. You can integrate it into your application (including commercial applications),  and you can distribute it.

@license_1005_li
#Files containing only your code are not covered by this license (it is 'commercial friendly').

@license_1006_li
#Modifications to the H2 source code must be published.

@license_1007_li
#You don't need to provide the source code of H2 if you did not modify anything.

@license_1008_p
#However, nobody is allowed to rename H2, modify it a little, and sell it as a database engine without telling the customers it is in fact H2. This happened to HSQLDB, when a company called 'bungisoft' copied HSQLDB, renamed it to 'RedBase', and tried to sell it, hiding the fact that it was, in fact, just HSQLDB. At this time, it seems 'bungisoft' does not exist any more, but you can use the Wayback Machine of http://www.archive.org and look for old web pages of http://www.bungisoft.com.

@license_1009_p
#About porting the source code to another language (for example C# or C++): Converted source code (even if done manually) stays under the same copyright and license as the original code. The copyright of the ported source code does not (automatically) go to the person who ported the code.

@license_1010_h2
#H2 License, Version 1.0

@license_1011_h3
#1. Definitions

@license_1012_b
#1.0.1. "Commercial Use"

@license_1013_p
#means distribution or otherwise making the Covered Code available to a third party.

@license_1014_b
#1.1. "Contributor"

@license_1015_p
#means each entity that creates or contributes to the creation of Modifications.

@license_1016_b
#1.2. "Contributor Version"

@license_1017_p
#means the combination of the Original Code, prior Modifications used by a Contributor,  and the Modifications made by that particular Contributor.

@license_1018_b
#1.3. "Covered Code"

@license_1019_p
#means the Original Code or Modifications or the combination of the Original Code and  Modifications, in each case including portions thereof.

@license_1020_b
#1.4. "Electronic Distribution Mechanism"

@license_1021_p
#means a mechanism generally accepted in the software development community for the  electronic transfer of data.

@license_1022_b
#1.5. "Executable"

@license_1023_p
#means Covered Code in any form other than Source Code.

@license_1024_b
#1.6. "Initial Developer"

@license_1025_p
#means the individual or entity identified as the Initial Developer in the Source Code  notice required by <a href="#exhibit-a">Exhibit A</a> .

@license_1026_b
#1.7. "Larger Work"

@license_1027_p
#means a work which combines Covered Code or portions thereof with code not governed  by the terms of this License.

@license_1028_b
#1.8. "License"

@license_1029_p
#means this document.

@license_1030_b
#1.8.1. "Licensable"

@license_1031_p
#means having the right to grant, to the maximum extent possible, whether at the  time of the initial grant or subsequently acquired, any and all of the rights  conveyed herein.

@license_1032_b
#1.9. "Modifications"

@license_1033_p
#means any addition to or deletion from the substance or structure of either the  Original Code or any previous Modifications. When Covered Code is released as a  series of files, a Modification is:

@license_1034_p
#1.9.a. Any addition to or deletion from the contents of a file  containing Original Code or previous Modifications.

@license_1035_p
#1.9.b. Any new file that contains any part of the Original Code or  previous Modifications.

@license_1036_b
#1.10. "Original Code"

@license_1037_p
#means Source Code of computer software code which is described in the Source Code  notice required by <a href="#exhibit-a">Exhibit A</a> as Original Code, and which,  at the time of its release under this License is not already Covered Code governed  by this License.

@license_1038_b
#1.10.1. "Patent Claims"

@license_1039_p
#means any patent claim(s), now owned or hereafter acquired, including without  limitation, method, process, and apparatus claims, in any patent Licensable by  grantor.

@license_1040_b
#1.11. "Source Code"

@license_1041_p
#means the preferred form of the Covered Code for making modifications to it,  including all modules it contains, plus any associated interface definition files,  scripts used to control compilation and installation of an Executable, or source  code differential comparisons against either the Original Code or another well known,  available Covered Code of the Contributor's choice. The Source Code can be in a  compressed or archival form, provided the appropriate decompression or de-archiving  software is widely available for no charge.

@license_1042_b
#1.12. "You" (or "Your")

@license_1043_p
#means an individual or a legal entity exercising rights under, and complying with  all of the terms of, this License or a future version of this License issued under <a href="#section-6.1">Section 6.1.</a> For legal entities, "You" includes any entity  which controls, is controlled by, or is under common control with You. For purposes of  this definition, "control" means (a) the power, direct or indirect, to cause the  direction or management of such entity, whether by contract or otherwise, or (b)  ownership of more than fifty percent (50%) of the outstanding shares or beneficial  ownership of such entity.

@license_1044_h3
#2. Source Code License

@license_1045_h4
#2.1. The Initial Developer Grant

@license_1046_p
#The Initial Developer hereby grants You a world-wide, royalty-free, non-exclusive license, subject to third party intellectual property claims:

@license_1047_p
#2.1.a. under intellectual property rights (other than patent or  trademark) Licensable by Initial Developer to use, reproduce, modify, display, perform,  sublicense and distribute the Original Code (or portions thereof) with or without  Modifications, and/or as part of a Larger Work; and

@license_1048_p
#2.1.b. under Patents Claims infringed by the making, using or selling  of Original Code, to make, have made, use, practice, sell, and offer for sale, and/or  otherwise dispose of the Original Code (or portions thereof).

@license_1049_p
#2.1.c. the licenses granted in this Section 2.1  ( <a href="#section-2.1-a">a</a> ) and ( <a href="#section-2.1-b">b</a> ) are effective on  the date Initial Developer first distributes Original Code under the terms of this  License.

@license_1050_p
#2.1.d. Notwithstanding Section 2.1 ( <a href="#section-2.1-b">b</a> )  above, no patent license is granted: 1) for code that You delete from the Original Code;  2) separate from the Original Code; or 3) for infringements caused by: i) the  modification of the Original Code or ii) the combination of the Original Code with other  software or devices.

@license_1051_h4
#2.2. Contributor Grant

@license_1052_p
#Subject to third party intellectual property claims, each Contributor hereby grants You a world-wide, royalty-free, non-exclusive license

@license_1053_p
#2.2.a. under intellectual property rights (other than patent or trademark)  Licensable by Contributor, to use, reproduce, modify, display, perform, sublicense and  distribute the Modifications created by such Contributor (or portions thereof) either on  an unmodified basis, with other Modifications, as Covered Code and/or as part of a Larger  Work; and

@license_1054_p
#2.2.b. under Patent Claims infringed by the making, using, or selling of  Modifications made by that Contributor either alone and/or in combination with its  Contributor Version (or portions of such combination), to make, use, sell, offer for  sale, have made, and/or otherwise dispose of: 1) Modifications made by that Contributor  (or portions thereof); and 2) the combination of Modifications made by that Contributor  with its Contributor Version (or portions of such combination).

@license_1055_p
#2.2.c. the licenses granted in Sections 2.2  ( <a href="#section-2.2-a">a</a> ) and 2.2 ( <a href="#section-2.2-b">b</a> ) are effective  on the date Contributor first makes Commercial Use of the Covered Code.

@license_1056_p
#2.2.c. Notwithstanding Section 2.2 ( <a href="#section-2.2-b">b</a> )  above, no patent license is granted: 1) for any code that Contributor has deleted from  the Contributor Version; 2) separate from the Contributor Version; 3) for infringements  caused by: i) third party modifications of Contributor Version or ii) the combination of  Modifications made by that Contributor with other software (except as part of the  Contributor Version) or other devices; or 4) under Patent Claims infringed by Covered Code  in the absence of Modifications made by that Contributor.

@license_1057_h3
#3. Distribution Obligations

@license_1058_h4
#3.1. Application of License

@license_1059_p
#The Modifications which You create or to which You contribute are governed by the terms of this License, including without limitation Section <a href="#section-2.2">2.2</a> . The Source Code version of Covered Code may be distributed only under the terms of this License or a future version of this License released under Section <a href="#section-6.1">6.1</a> , and You must include a copy of this License with every copy of the Source Code You distribute. You may not offer or impose any terms on any Source Code version that alters or restricts the applicable version of this License or the recipients' rights hereunder. However, You may include an additional document offering the additional rights described in Section <a href="#section-3.5">3.5</a> .

@license_1060_h4
#3.2. Availability of Source Code

@license_1061_p
#Any Modification which You create or to which You contribute must be made available in Source Code form under the terms of this License either on the same media as an Executable version or via an accepted Electronic Distribution Mechanism to anyone to whom you made an Executable version available; and if made available via Electronic Distribution Mechanism, must remain available for at least twelve (12) months after the date it initially became available, or at least six (6) months after a subsequent version of that particular Modification has been made available to such recipients. You are responsible for ensuring that the Source Code version remains available even if the Electronic Distribution Mechanism is maintained by a third party.

@license_1062_h4
#3.3. Description of Modifications

@license_1063_p
#You must cause all Covered Code to which You contribute to contain a file documenting the changes You made to create that Covered Code and the date of any change. You must include a prominent statement that the Modification is derived, directly or indirectly, from Original Code provided by the Initial Developer and including the name of the Initial Developer in (a) the Source Code, and (b) in any notice in an Executable version or related documentation in which You describe the origin or ownership of the Covered Code.

@license_1064_h4
#3.4. Intellectual Property Matters

@license_1065_b
#3.4.a. Third Party Claims:

@license_1066_p
#If Contributor has knowledge that a license under a third party's intellectual property rights is required to exercise the rights granted by such Contributor under Sections <a href="#section-2.1">2.1</a> or <a href="#section-2.2">2.2</a> , Contributor must include a text file with the Source Code distribution titled "LEGAL" which describes the claim and the party making the claim in sufficient detail that a recipient will know whom to contact. If Contributor obtains such knowledge after the Modification is made available as described in Section <a href="#section-3.2">3.2</a> , Contributor shall promptly modify the LEGAL file in all copies Contributor makes available thereafter and shall take other steps (such as notifying appropriate mailing lists or newsgroups) reasonably calculated to inform those who received the Covered Code that new knowledge has been obtained.

@license_1067_b
#3.4.b. Contributor APIs:

@license_1068_p
#If Contributor's Modifications include an application programming interface and Contributor has knowledge of patent licenses which are reasonably necessary to implement that API, Contributor must also include this information in the legal file.

@license_1069_b
#3.4.c. Representations:

@license_1070_p
#Contributor represents that, except as disclosed pursuant to Section 3.4 ( <a href="#section-3.4-a">a</a> ) above, Contributor believes that Contributor's Modifications are Contributor's original creation(s) and/or Contributor has sufficient rights to grant the rights conveyed by this License.

@license_1071_h4
#3.5. Required Notices

@license_1072_p
#You must duplicate the notice in <a href="#exhibit-a">Exhibit A</a> in each file of the Source Code. If it is not possible to put such notice in a particular Source Code file due to its structure, then You must include such notice in a location (such as a relevant directory) where a user would be likely to look for such a notice. If You created one or more Modification(s) You may add your name as a Contributor to the notice described in <a href="#exhibit-a">Exhibit A</a> . You must also duplicate this License in any documentation for the Source Code where You describe recipients' rights or ownership rights relating to Covered Code. You may choose to offer, and to charge a fee for, warranty, support, indemnity or liability obligations to one or more recipients of Covered Code. However, You may do so only on Your own behalf, and not on behalf of the Initial Developer or any Contributor. You must make it absolutely clear than any such warranty, support, indemnity or liability obligation is offered by You alone, and You hereby agree to indemnify the Initial Developer and every Contributor for any liability incurred by the Initial Developer or such Contributor as a result of warranty, support, indemnity or liability terms You offer.

@license_1073_h4
#3.6. Distribution of Executable Versions

@license_1074_p
#You may distribute Covered Code in Executable form only if the requirements of Sections <a href="#section-3.1">3.1</a> , <a href="#section-3.2">3.2</a> , <a href="#section-3.3">3.3</a> , <a href="#section-3.4">3.4</a> and <a href="#section-3.5">3.5</a> have been met for that Covered Code, and if You include a notice stating that the Source Code version of the Covered Code is available under the terms of this License, including a description of how and where You have fulfilled the obligations of Section <a href="#section-3.2">3.2</a> . The notice must be conspicuously included in any notice in an Executable version, related documentation or collateral in which You describe recipients' rights relating to the Covered Code. You may distribute the Executable version of Covered Code or ownership rights under a license of Your choice, which may contain terms different from this License, provided that You are in compliance with the terms of this License and that the license for the Executable version does not attempt to limit or alter the recipient's rights in the Source Code version from the rights set forth in this License. If You distribute the Executable version under a different license You must make it absolutely clear that any terms which differ from this License are offered by You alone, not by the Initial Developer or any Contributor. You hereby agree to indemnify the Initial Developer and every Contributor for any liability incurred by the Initial Developer or such Contributor as a result of any such terms You offer.

@license_1075_h4
#3.7. Larger Works

@license_1076_p
#You may create a Larger Work by combining Covered Code with other code not governed by the terms of this License and distribute the Larger Work as a single product. In such a case, You must make sure the requirements of this License are fulfilled for the Covered Code.

@license_1077_h3
#4. Inability to Comply Due to Statute or Regulation.

@license_1078_p
#If it is impossible for You to comply with any of the terms of this License with respect to some or all of the Covered Code due to statute, judicial order, or regulation then You must: (a) comply with the terms of this License to the maximum extent possible; and (b) describe the limitations and the code they affect. Such description must be included in the <b>legal</b> file described in Section <a href="#section-3.4">3.4</a> and must be included with all distributions of the Source Code. Except to the extent prohibited by statute or regulation, such description must be sufficiently detailed for a recipient of ordinary skill to be able to understand it.

@license_1079_h3
#5. Application of this License.

@license_1080_p
#This License applies to code to which the Initial Developer has attached the notice in <a href="#exhibit-a">Exhibit A</a> and to related Covered Code.

@license_1081_h3
#6. Versions of the License.

@license_1082_h4
#6.1. New Versions

@license_1083_p
#The

@license_1084_em
#H2 Group</em> may publish revised and/or new versions of the License from time to time. Each version will be given a distinguishing version number.

@license_1085_h4
#6.2. Effect of New Versions

@license_1086_p
#Once Covered Code has been published under a particular version of the License, You may always continue to use it under the terms of that version. You may also choose to use such Covered Code under the terms of any subsequent version of the License published by the

@license_1087_em
#H2 Group</em> . No one other than the

@license_1088_em
#H2 Group</em> has the right to modify the terms applicable to Covered Code created under this License.

@license_1089_h4
#6.3. Derivative Works

@license_1090_p
#If You create or use a modified version of this License (which you may only do in order to apply it to code which is not already Covered Code governed by this License), You must (a) rename Your license so that the phrases

@license_1091_em
#"H2 Group", "H2"</em> or any confusingly similar phrase do not appear in your license (except to note that your license differs from this License) and (b) otherwise make it clear that Your version of the license contains terms which differ from the

@license_1092_em
#H2 License</em> . (Filling in the name of the Initial Developer, Original Code or Contributor in the notice described in <a href="#exhibit-a">Exhibit A</a> shall not of themselves be deemed to be modifications of this License.)

@license_1093_h3
#7. Disclaimer of Warranty

@license_1094_p
#Covered code is provided under this license on an "as is" basis, without warranty of any kind, either expressed or implied, including, without limitation, warranties that the covered code is free of defects, merchantable, fit for a particular purpose or non-infringing. The entire risk as to the quality and performance of the covered code is with you. Should any covered code prove defective in any respect, you (not the initial developer or any other contributor) assume the cost of any necessary servicing, repair or correction. This disclaimer of warranty constitutes an essential part of this license. No use of any covered code is authorized hereunder except under this disclaimer.

@license_1095_h3
#8. Termination

@license_1096_p
#8.1. This License and the rights granted hereunder will terminate automatically if You fail to comply with terms herein and fail to cure such breach within 30 days of becoming aware of the breach. All sublicenses to the Covered Code which are properly granted shall survive any termination of this License. Provisions which, by their nature, must remain in effect beyond the termination of this License shall survive.

@license_1097_p
#8.2. If You initiate litigation by asserting a patent infringement claim (excluding declaratory judgment actions) against Initial Developer or a Contributor (the Initial Developer or Contributor against whom You file such action is referred to as "Participant") alleging that:

@license_1098_p
#8.2.a. such Participant's Contributor Version directly or indirectly  infringes any patent, then any and all rights granted by such Participant to You under  Sections <a href="#section-2.1">2.1</a> and/or <a href="#section-2.2">2.2</a> of this  License shall, upon 60 days notice from Participant terminate prospectively, unless if  within 60 days after receipt of notice You either: (i) agree in writing to pay  Participant a mutually agreeable reasonable royalty for Your past and future use of  Modifications made by such Participant, or (ii) withdraw Your litigation claim with  respect to the Contributor Version against such Participant. If within 60 days of  notice, a reasonable royalty and payment arrangement are not mutually agreed upon in  writing by the parties or the litigation claim is not withdrawn, the rights granted by  Participant to You under Sections <a href="#section-2.1">2.1</a> and/or <a href="#section-2.2">2.2</a> automatically terminate at the expiration of the 60 day  notice period specified above.

@license_1099_p
#8.2.b. any software, hardware, or device, other than such Participant's  Contributor Version, directly or indirectly infringes any patent, then any rights  granted to You by such Participant under Sections 2.1( <a href="#section-2.1-b">b</a> )  and 2.2( <a href="#section-2.2-b">b</a> ) are revoked effective as of the date You first  made, used, sold, distributed, or had made, Modifications made by that Participant.

@license_1100_p
#8.3. If You assert a patent infringement claim against Participant alleging that such Participant's Contributor Version directly or indirectly infringes any patent where such claim is resolved (such as by license or settlement) prior to the initiation of patent infringement litigation, then the reasonable value of the licenses granted by such Participant under Sections <a href="#section-2.1">2.1</a> or <a href="#section-2.2">2.2</a> shall be taken into account in determining the amount or value of any payment or license.

@license_1101_p
#8.4. In the event of termination under Sections <a href="#section-8.1">8.1</a> or <a href="#section-8.2">8.2</a> above, all end user license agreements (excluding distributors and resellers) which have been validly granted by You or any distributor hereunder prior to termination shall survive termination.

@license_1102_h3
#9. Limitation of Liability

@license_1103_p
#Under no circumstances and under no legal theory, whether tort (including negligence), contract, or otherwise, shall you, the initial developer, any other contributor, or any distributor of covered code, or any supplier of any of such parties, be liable to any person for any indirect, special, incidental, or consequential damages of any character including, without limitation, damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses, even if such party shall have been informed of the possibility of such damages. This limitation of liability shall not apply to liability for death or personal injury resulting from such party's negligence to the extent applicable law prohibits such limitation. Some jurisdictions do not allow the exclusion or limitation of incidental or consequential damages, so this exclusion and limitation may not apply to you.

@license_1104_h3
#10. United States Government End Users

@license_1105_p
#The Covered Code is a "commercial item", as that term is defined in 48 C.F.R. 2.101 (October 1995), consisting of "commercial computer software" and "commercial computer software documentation", as such terms are used in 48 C.F.R. 12.212 (September 1995). Consistent with 48 C.F.R. 12.212 and 48 C.F.R. 227.7202-1 through 227.7202-4 (June 1995), all U.S. Government End Users acquire Covered Code with only those rights set forth herein.

@license_1106_h3
#11. Miscellaneous

@license_1107_p
#This License represents the complete agreement concerning subject matter hereof. If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable. This License shall be governed by

@license_1108_em
#Swiss</em> law provisions (except to the extent applicable law, if any, provides otherwise), excluding its conflict-of-law provisions. With respect to disputes in which at least one party is a citizen of, or an entity chartered or registered to do business in

@license_1109_em
#Switzerland</em> , any litigation relating to this License shall be subject to the jurisdiction of

@license_1110_em
#Switzerland</em> ,  with the losing party responsible for costs, including without limitation, court costs and reasonable attorneys' fees and expenses. The application of the United Nations Convention on Contracts for the International Sale of Goods is expressly excluded. Any law or regulation which provides that the language of a contract shall be construed against the drafter shall not apply to this License.

@license_1111_h3
#12. Responsibility for Claims

@license_1112_p
#As between Initial Developer and the Contributors, each party is responsible for claims and damages arising, directly or indirectly, out of its utilization of rights under this License and You agree to work with Initial Developer and Contributors to distribute such responsibility on an equitable basis. Nothing herein is intended or shall be deemed to constitute any admission of liability.

@license_1113_h3
#13. Multiple-Licensed Code

@license_1114_p
#Initial Developer may designate portions of the Covered Code as "Multiple-Licensed". "Multiple-Licensed" means that the Initial Developer permits you to utilize portions of the Covered Code under Your choice of this or the alternative licenses, if any, specified by the Initial Developer in the file described in <a href="#exhibit-a">Exhibit A</a> .

@license_1115_h3
#Exhibit A

@mainWeb_1000_h1
H2 データベース エンジン

@mainWeb_1001_p
ようこそ、無料のSQLデータベース、H2へ。H2の主な特徴は:

@mainWeb_1002_li
速度がとても速く、全ての方が無料で使用でき、ソースコードが含まれています

@mainWeb_1003_li
Javaで書かれています; GCJ (Linux) でコンパイル可能

@mainWeb_1004_li
エンベッド、サーバー、クラスターモードに対応

@mainWeb_1005_li
JDBC、 (部分的な) ODBC API; Web クライアントアプリケーション

@mainWeb_1006_h3
ダウンロード

@mainWeb_1007_td
#Version 1.0.58 (2007-09-15):

@mainWeb_1008_a
Windows Installer (2.7 MB)

@mainWeb_1009_a
All platforms (zip, 3.7 MB)

@mainWeb_1010_a
全てダウンロード

@mainWeb_1011_td
&nbsp;&nbsp;&nbsp;

@mainWeb_1012_h3
サポート

@mainWeb_1013_a
Google グループ (English)

@mainWeb_1014_a
Google グループ (Japanese)

@mainWeb_1015_p
e-mail はこちらから:

@mainWeb_1016_td
&nbsp;

@mainWeb_1017_h3
パフォーマンス

@mainWeb_1018_td
操作/秒 (高い方がより良い) - <a href="performance.html">このテストについての詳しい情報</a>

@mainWeb_1019_td
&nbsp;

@mainWeb_1020_h3
ニュース

@mainWeb_1021_b
ニュースフィード:

@mainWeb_1022_p
二種類から選べます: <a href="http://www.h2database.com/html/newsfeed-atom.xml" target="_blank">フルテキスト (Atom)</a>
または <a href="http://www.h2database.com/html/newsfeed-rss.xml" target="_blank">ヘッダーのみ (RSS)</a>.

@mainWeb_1023_b
Email ニュースレター:

@mainWeb_1024_p
<a href="http://groups.google.com/group/h2database-news/subscribe">
H2 データベース ニュース</a> (Googleアカウントが必要です)
に署名し、ニューリリースについての情報を入手して下さい。
あなたのemailアドレスはこのコンテンツでのみ使用されます。

@mainWeb_1025_td
&nbsp;

@mainWeb_1026_h3
寄稿する

@mainWeb_1027_p
H2の発展のため、フィードバックやバグ報告を送ったり、H2コンソールアプリケーション (ファイル h2/src/main/org/h2/server/web/res/_text_*.properties)を訳すなど、 投稿することができます。また、下にある PayPal ボタンをクリックすることで 寄付することもできます。 支援者として、あなたの名前が載ります:

@mainWeb_1028_td
&nbsp;

@mainWeb_1029_h3
フィードバック

@mainWeb_1030_td
質問や要望、その他あらゆるフィードバックはこちらから送信して下さい:

@mainWeb_1031_p
Email (任意):

@mainWeb_1032_form
メッセージ:

@main_1000_h1
H2 データベース エンジン

@main_1001_p
ようこそ、無料のSQLデータベース、H2へ

@main_1002_a
クイックスタート

@main_1003_p
Click here to get a fast overview.

@main_1004_a
チュートリアル

@main_1005_p
Go through the samples.

@main_1006_a
特徴

@main_1007_p
See what this database can do and how to use these features.

@performance_1000_h1
パフォーマンス

@performance_1001_a
#Performance Comparison

@performance_1002_a
#Application Profiling

@performance_1003_a
#Performance Tuning

@performance_1004_h2
#Performance Comparison

@performance_1005_p
#In most cases H2 is a lot faster than all other (open source and not open source) database engines. Please note this is mostly a single connection benchmark run on one computer.

@performance_1006_h3
#Embedded

@performance_1007_th
#Test Case

@performance_1008_th
#Unit

@performance_1009_th
#H2

@performance_1010_th
#HSQLDB

@performance_1011_th
#Derby

@performance_1012_td
#Simple: Init

@performance_1013_td
#ms

@performance_1014_td
#375

@performance_1015_td
#578

@performance_1016_td
#2797

@performance_1017_td
#Simple: Query (random)

@performance_1018_td
#ms

@performance_1019_td
#250

@performance_1020_td
#344

@performance_1021_td
#1563

@performance_1022_td
#Simple: Query (sequential)

@performance_1023_td
#ms

@performance_1024_td
#171

@performance_1025_td
#250

@performance_1026_td
#1469

@performance_1027_td
#Simple: Update (random)

@performance_1028_td
#ms

@performance_1029_td
#641

@performance_1030_td
#1609

@performance_1031_td
#19265

@performance_1032_td
#Simple: Delete (sequential)

@performance_1033_td
#ms

@performance_1034_td
#172

@performance_1035_td
#516

@performance_1036_td
#6797

@performance_1037_td
#Simple: Memory Usage

@performance_1038_td
#MB

@performance_1039_td
#14

@performance_1040_td
#12

@performance_1041_td
#12

@performance_1042_td
#BenchA: Init

@performance_1043_td
#ms

@performance_1044_td
#391

@performance_1045_td
#500

@performance_1046_td
#3750

@performance_1047_td
#BenchA: Transactions

@performance_1048_td
#ms

@performance_1049_td
#5468

@performance_1050_td
#2468

@performance_1051_td
#16250

@performance_1052_td
#BenchA: Memory Usage

@performance_1053_td
#MB

@performance_1054_td
#14

@performance_1055_td
#15

@performance_1056_td
#9

@performance_1057_td
#BenchB: Init

@performance_1058_td
#ms

@performance_1059_td
#1281

@performance_1060_td
#2391

@performance_1061_td
#14938

@performance_1062_td
#BenchB: Transactions

@performance_1063_td
#ms

@performance_1064_td
#2094

@performance_1065_td
#1140

@performance_1066_td
#3828

@performance_1067_td
#BenchB: Memory Usage

@performance_1068_td
#MB

@performance_1069_td
#16

@performance_1070_td
#11

@performance_1071_td
#9

@performance_1072_td
#BenchC: Init

@performance_1073_td
#ms

@performance_1074_td
#984

@performance_1075_td
#547

@performance_1076_td
#5250

@performance_1077_td
#BenchC: Transactions

@performance_1078_td
#ms

@performance_1079_td
#2860

@performance_1080_td
#58219

@performance_1081_td
#11204

@performance_1082_td
#BenchC: Memory Usage

@performance_1083_td
#MB

@performance_1084_td
#19

@performance_1085_td
#19

@performance_1086_td
#9

@performance_1087_td
#Executed Statements

@performance_1088_td
##

@performance_1089_td
#594255

@performance_1090_td
#594255

@performance_1091_td
#594255

@performance_1092_td
#Total Time

@performance_1093_td
#ms

@performance_1094_td
#14687

@performance_1095_td
#68562

@performance_1096_td
#87111

@performance_1097_td
#Statement per Second

@performance_1098_td
##

@performance_1099_td
#40461

@performance_1100_td
#8667

@performance_1101_td
#6821

@performance_1102_h3
#Client-Server

@performance_1103_th
#Test Case

@performance_1104_th
#Unit

@performance_1105_th
#H2

@performance_1106_th
#HSQLDB

@performance_1107_th
#Derby

@performance_1108_th
#PostgreSQL

@performance_1109_th
#MySQL

@performance_1110_td
#Simple: Init

@performance_1111_td
#ms

@performance_1112_td
#3047

@performance_1113_td
#2547

@performance_1114_td
#6907

@performance_1115_td
#4234

@performance_1116_td
#3594

@performance_1117_td
#Simple: Query (random)

@performance_1118_td
#ms

@performance_1119_td
#3547

@performance_1120_td
#2641

@performance_1121_td
#8781

@performance_1122_td
#5375

@performance_1123_td
#3140

@performance_1124_td
#Simple: Query (sequential)

@performance_1125_td
#ms

@performance_1126_td
#3390

@performance_1127_td
#2531

@performance_1128_td
#8859

@performance_1129_td
#4906

@performance_1130_td
#3016

@performance_1131_td
#Simple: Update (random)

@performance_1132_td
#ms

@performance_1133_td
#3235

@performance_1134_td
#3531

@performance_1135_td
#22344

@performance_1136_td
#5828

@performance_1137_td
#5187

@performance_1138_td
#Simple: Delete (sequential)

@performance_1139_td
#ms

@performance_1140_td
#1421

@performance_1141_td
#1235

@performance_1142_td
#8219

@performance_1143_td
#2484

@performance_1144_td
#1829

@performance_1145_td
#Simple: Memory Usage

@performance_1146_td
#MB

@performance_1147_td
#15

@performance_1148_td
#10

@performance_1149_td
#15

@performance_1150_td
#0

@performance_1151_td
#0

@performance_1152_td
#BenchA: Init

@performance_1153_td
#ms

@performance_1154_td
#2687

@performance_1155_td
#2343

@performance_1156_td
#6000

@performance_1157_td
#4000

@performance_1158_td
#4000

@performance_1159_td
#BenchA: Transactions

@performance_1160_td
#ms

@performance_1161_td
#12938

@performance_1162_td
#9579

@performance_1163_td
#26610

@performance_1164_td
#16250

@performance_1165_td
#10782

@performance_1166_td
#BenchA: Memory Usage

@performance_1167_td
#MB

@performance_1168_td
#15

@performance_1169_td
#16

@performance_1170_td
#10

@performance_1171_td
#0

@performance_1172_td
#0

@performance_1173_td
#BenchB: Init

@performance_1174_td
#ms

@performance_1175_td
#9641

@performance_1176_td
#10094

@performance_1177_td
#28282

@performance_1178_td
#17468

@performance_1179_td
#11344

@performance_1180_td
#BenchB: Transactions

@performance_1181_td
#ms

@performance_1182_td
#3984

@performance_1183_td
#3312

@performance_1184_td
#6671

@performance_1185_td
#7797

@performance_1186_td
#3375

@performance_1187_td
#BenchB: Memory Usage

@performance_1188_td
#MB

@performance_1189_td
#16

@performance_1190_td
#13

@performance_1191_td
#8

@performance_1192_td
#0

@performance_1193_td
#0

@performance_1194_td
#BenchC: Init

@performance_1195_td
#ms

@performance_1196_td
#2031

@performance_1197_td
#1516

@performance_1198_td
#7391

@performance_1199_td
#2297

@performance_1200_td
#3406

@performance_1201_td
#BenchC: Transactions

@performance_1202_td
#ms

@performance_1203_td
#9750

@performance_1204_td
#58734

@performance_1205_td
#20937

@performance_1206_td
#11172

@performance_1207_td
#7469

@performance_1208_td
#BenchC: Memory Usage

@performance_1209_td
#MB

@performance_1210_td
#20

@performance_1211_td
#15

@performance_1212_td
#14

@performance_1213_td
#0

@performance_1214_td
#0

@performance_1215_td
#Executed Statements

@performance_1216_td
##

@performance_1217_td
#594255

@performance_1218_td
#594255

@performance_1219_td
#594255

@performance_1220_td
#594255

@performance_1221_td
#594255

@performance_1222_td
#Total Time

@performance_1223_td
#ms

@performance_1224_td
#55671

@performance_1225_td
#98063

@performance_1226_td
#151001

@performance_1227_td
#81811

@performance_1228_td
#57142

@performance_1229_td
#Statement per Second

@performance_1230_td
##

@performance_1231_td
#10674

@performance_1232_td
#6059

@performance_1233_td
#3935

@performance_1234_td
#7263

@performance_1235_td
#10399

@performance_1236_h3
#Benchmark Results and Comments

@performance_1237_h4
#H2

@performance_1238_p
#Version 1.0 (2007-09-15) was used for the test. For simpler operations, the performance of H2 is about the same as for HSQLDB. For more complex queries, the query optimizer is very important. However H2 is not very fast in every case, certain kind of queries may still be slow. One situation where is H2 is slow is large result sets, because they are buffered to disk if more than a certain number of records are returned. The advantage of buffering is, there is no limit on the result set size. The open/close time is almost fixed, because of the file locking protocol: The engine waits 20 ms after opening a database to ensure the database files are not opened by another process.

@performance_1239_h4
#HSQLDB

@performance_1240_p
#Version 1.8.0.8 was used for the test. Cached tables are used in this test (hsqldb.default_table_type=cached), and the write delay is 1 second (SET WRITE_DELAY 1). HSQLDB is fast when using simple operations. HSQLDB is very slow in the last test (BenchC: Transactions), probably because is has a bad query optimizer. One query where HSQLDB is slow is a two-table join:

@performance_1241_p
#The PolePosition benchmark also shows that the query optimizer does not do a very good job for some queries. A disadvantage in HSQLDB is the slow startup / shutdown time (currently not listed) when using bigger databases. The reason is, a backup of the database is created whenever the database is opened or closed.

@performance_1242_h4
#Derby

@performance_1243_p
#Version 10.3.1.4 was used for the test. Derby is clearly the slowest embedded database in this test. This seems to be a structural problem, because all operations are really slow. It will not be easy for the developers of Derby to improve the performance to a reasonable level.

@performance_1244_h4
#PostgreSQL

@performance_1245_p
#Version 8.1.4 was used for the test. The following options where changed in postgresql.conf: fsync = off, commit_delay = 1000. PostgreSQL is run in server mode. It looks like the base performance is slower than MySQL, the reason could be the network layer. The memory usage number is incorrect, because only the memory usage of the JDBC driver is measured.

@performance_1246_h4
#MySQL

@performance_1247_p
#Version 5.0.22 was used for the test. MySQL was run with the InnoDB backend. The setting innodb_flush_log_at_trx_commit (found in the my.ini file) was set to 0. Otherwise (and by default), MySQL is really slow (around 140 statements per second in this test) because it tries to flush the data to disk for each commit. For small transactions (when autocommit is on) this is really slow. But many use cases use small or relatively small transactions. Too bad this setting is not listed in the configuration wizard, and it always overwritten when using the wizard. You need to change this setting manually in the file my.ini, and then restart the service. The memory usage number is incorrect, because only the memory usage of the JDBC driver is measured.

@performance_1248_h4
#Firebird

@performance_1249_p
#Firebird 1.5 (default installation) was tested, but the results are not published currently. It is possible to run the performance test with the Firebird database, and any information on how to configure Firebird for higher performance are welcome.

@performance_1250_h4
#Why Oracle / MS SQL Server / DB2 are Not Listed

@performance_1251_p
#The license of these databases does not allow to publish benchmark results. This doesn't mean that they are fast. They are in fact quite slow, and need a lot of memory. But you will need to test this yourself. SQLite was not tested because the JDBC driver doesn't support transactions.

@performance_1252_h3
#About this Benchmark

@performance_1253_h4
#Number of Connections

@performance_1254_p
#This is mostly a single-connection benchmark. BenchB uses multiple connections, the other tests one connection.

@performance_1255_h4
#Real-World Tests

@performance_1256_p
#Good benchmarks emulate real-world use cases. This benchmark includes 3 test cases: A simple test case with one table and many small updates / deletes. BenchA is similar to the TPC-A test, but single connection / single threaded (see also: www.tpc.org). BenchB is similar to the TPC-B test, using multiple connections (one thread per connection). BenchC is similar to the TPC-C test, but single connection / single threaded.

@performance_1257_h4
#Comparing Embedded with Server Databases

@performance_1258_p
#This is mainly a benchmark for embedded databases (where the application runs in the same virtual machine than the database engine). However MySQL and PostgreSQL are not Java databases and cannot be embedded into a Java application. For the Java databases, both embedded and server modes are tested.

@performance_1259_h4
#Test Platform

@performance_1260_p
#This test is run on Windows XP with the virus scanner switched off. The VM used is Sun JDK 1.5.

@performance_1261_h4
#Multiple Runs

@performance_1262_p
#When a Java benchmark is run first, the code is not fully compiled and therefore runs slower than when running multiple times. A benchmark should always run the same test multiple times and ignore the first run(s). This benchmark runs three times, the last run counts.

@performance_1263_h4
#Memory Usage

@performance_1264_p
#It is not enough to measure the time taken, the memory usage is important as well. Performance can be improved in databases by using a bigger in-memory cache, but there is only a limited amount of memory available on the system. HSQLDB tables are kept fully in memory by default, this benchmark uses 'disk based' tables for all databases. Unfortunately, it is not so easy to calculate the memory usage of PostgreSQL and MySQL, because they run in a different process than the test. This benchmark currently does not print memory usage of those databases.

@performance_1265_h4
#Delayed Operations

@performance_1266_p
#Some databases delay some operations (for example flushing the buffers) until after the benchmark is run. This benchmark waits between each database tested, and each database runs in a different process (sequentially).

@performance_1267_h4
#Transaction Commit / Durability

@performance_1268_p
#Durability means transaction committed to the database will not be lost. Some databases (for example MySQL) try to enforce this by default by calling fsync() to flush the buffers, but most hard drives don't actually flush all data. Calling fsync() slows down transaction commit a lot, but doesn't always make data durable. When comparing the results, it is important to think about the effect. Many database suggest to 'batch' operations when possible. This benchmark switches off autocommit when loading the data, and calls commit after each 1000 inserts. However many applications need 'short' transactions at runtime (a commit after each update). This benchmark commits after each update / delete in the simple benchmark, and after each business transaction in the other benchmarks. For databases that support delayed commits, a delay of one second is used.

@performance_1269_h4
#Using Prepared Statements

@performance_1270_p
#Wherever possible, the test cases use prepared statements.

@performance_1271_h4
#Currently Not Tested: Startup Time

@performance_1272_p
#The startup time of a database engine is important as well for embedded use. This time is not measured currently. Also, not tested is the time used to create a database and open an existing database. Here, one (wrapper) connection is opened at the start, and for each step a new connection is opened and then closed. That means the Open/Close time listed is for opening a connection if the database is already in use.

@performance_1273_h3
#PolePosition Benchmark

@performance_1274_p
#The PolePosition is an open source benchmark. The algorithms are all quite simple. It was developed / sponsored by db4o.

@performance_1275_th
#Test Case

@performance_1276_th
#Unit

@performance_1277_th
#H2

@performance_1278_th
#HSQLDB

@performance_1279_th
#MySQL

@performance_1280_td
#Melbourne write

@performance_1281_td
#ms

@performance_1282_td
#369

@performance_1283_td
#249

@performance_1284_td
#2022

@performance_1285_td
#Melbourne read

@performance_1286_td
#ms

@performance_1287_td
#47

@performance_1288_td
#49

@performance_1289_td
#93

@performance_1290_td
#Melbourne read_hot

@performance_1291_td
#ms

@performance_1292_td
#24

@performance_1293_td
#43

@performance_1294_td
#95

@performance_1295_td
#Melbourne delete

@performance_1296_td
#ms

@performance_1297_td
#147

@performance_1298_td
#133

@performance_1299_td
#176

@performance_1300_td
#Sepang write

@performance_1301_td
#ms

@performance_1302_td
#965

@performance_1303_td
#1201

@performance_1304_td
#3213

@performance_1305_td
#Sepang read

@performance_1306_td
#ms

@performance_1307_td
#765

@performance_1308_td
#948

@performance_1309_td
#3455

@performance_1310_td
#Sepang read_hot

@performance_1311_td
#ms

@performance_1312_td
#789

@performance_1313_td
#859

@performance_1314_td
#3563

@performance_1315_td
#Sepang delete

@performance_1316_td
#ms

@performance_1317_td
#1384

@performance_1318_td
#1596

@performance_1319_td
#6214

@performance_1320_td
#Bahrain write

@performance_1321_td
#ms

@performance_1322_td
#1186

@performance_1323_td
#1387

@performance_1324_td
#6904

@performance_1325_td
#Bahrain query_indexed_string

@performance_1326_td
#ms

@performance_1327_td
#336

@performance_1328_td
#170

@performance_1329_td
#693

@performance_1330_td
#Bahrain query_string

@performance_1331_td
#ms

@performance_1332_td
#18064

@performance_1333_td
#39703

@performance_1334_td
#41243

@performance_1335_td
#Bahrain query_indexed_int

@performance_1336_td
#ms

@performance_1337_td
#104

@performance_1338_td
#134

@performance_1339_td
#678

@performance_1340_td
#Bahrain update

@performance_1341_td
#ms

@performance_1342_td
#191

@performance_1343_td
#87

@performance_1344_td
#159

@performance_1345_td
#Bahrain delete

@performance_1346_td
#ms

@performance_1347_td
#1215

@performance_1348_td
#729

@performance_1349_td
#6812

@performance_1350_td
#Imola retrieve

@performance_1351_td
#ms

@performance_1352_td
#198

@performance_1353_td
#194

@performance_1354_td
#4036

@performance_1355_td
#Barcelona write

@performance_1356_td
#ms

@performance_1357_td
#413

@performance_1358_td
#832

@performance_1359_td
#3191

@performance_1360_td
#Barcelona read

@performance_1361_td
#ms

@performance_1362_td
#119

@performance_1363_td
#160

@performance_1364_td
#1177

@performance_1365_td
#Barcelona query

@performance_1366_td
#ms

@performance_1367_td
#20

@performance_1368_td
#5169

@performance_1369_td
#101

@performance_1370_td
#Barcelona delete

@performance_1371_td
#ms

@performance_1372_td
#388

@performance_1373_td
#319

@performance_1374_td
#3287

@performance_1375_td
#Total

@performance_1376_td
#ms

@performance_1377_td
#26724

@performance_1378_td
#53962

@performance_1379_td
#87112

@performance_1380_h2
#Application Profiling

@performance_1381_h3
#Analyze First

@performance_1382_p
#Before trying to optimize the performance, it is important to know where the time is actually spent. The same is true for memory problems. Premature or 'blind' optimization should be avoided, as it is not an efficient way to solve the problem. There are various ways to analyze the application. In some situations it is possible to compare two implementations and use System.currentTimeMillis() to find out which one is faster. But this does not work for complex applications with many modules, and for memory problems. A very good tool to measure both the memory and the CPU is the <a href="http://www.yourkit.com">YourKit Java Profiler</a> . This tool is also used to optimize the performance and memory footprint of this database engine.

@performance_1383_h2
#Database Performance Tuning

@performance_1384_h3
#Virus Scanners

@performance_1385_p
#Some virus scanners scan files every time they are accessed. It is very important for performance that database files are not scanned for viruses. The database engine does never interprets the data stored in the files as programs, that means even if somebody would store a virus in a database file, this would be harmless (when the virus does not run, it cannot spread). Some virus scanners allow excluding file endings. Make sure files ending with .db are not scanned.

@performance_1386_h3
#Using the Trace Options

@performance_1387_p
#If the main performance hot spots are in the database engine, in many cases the performance can be optimized by creating additional indexes, or changing the schema. Sometimes the application does not directly generate the SQL statements, for example if an O/R mapping tool is used. To view the SQL statements and JDBC API calls, you can use the trace options. For more information, see <a href="features.html#trace_options">Using the Trace Options</a> .

@performance_1388_h3
#Index Usage

@performance_1389_p
#This database uses indexes to improve the performance of SELECT, UPDATE and DELETE statements. If a column is used in the WHERE clause of a query, and if an index exists on this column, then the index can be used. Multi-column indexes are used if all or the first columns of the index are used. Both equality lookup and range scans are supported. Indexes are not used to order result sets: The results are sorted in memory if required. Indexes are created automatically for primary key and unique constraints. Indexes are also created for foreign key constraints, if required. For other columns, indexes need to be created manually using the CREATE INDEX statement.

@performance_1390_h3
#Optimizer

@performance_1391_p
#This database uses a cost based optimizer. For simple and queries and queries with medium complexity (less than 7 tables in the join), the expected cost (running time) of all possible plans is calculated, and the plan with the lowest cost is used. For more complex queries, the algorithm first tries all possible combinations for the first few tables, and the remaining tables added using a greedy algorithm (this works well for most joins). Afterwards a genetic algorithm is used to test at most 2000 distinct plans. Only left-deep plans are evaluated.

@performance_1392_h3
#Expression Optimization

@performance_1393_p
#After the statement is parsed, all expressions are simplified automatically if possible. Operations are evaluated only once if all parameters are constant. Functions are also optimized, but only if the function is constant (always returns the same result for the same parameter values). If the WHERE clause is always false, then the table is not accessed at all.

@performance_1394_h3
#COUNT(*) Optimization

@performance_1395_p
#If the query only counts all rows of a table, then the data is not accessed. However, this is only possible if no WHERE clause is used, that means it only works for queries of the form SELECT COUNT(*) FROM table.

@performance_1396_h3
#Updating Optimizer Statistics / Column Selectivity

@performance_1397_p
#When executing a query, at most one index per joined table can be used. If the same table is joined multiple times, for each join only one index is used. Example: for the query SELECT * FROM TEST T1, TEST T2 WHERE T1.NAME='A' AND T2.ID=T1.ID, two index can be used, in this case the index on NAME for T1 and the index on ID for T2.

@performance_1398_p
#If a table has multiple indexes, sometimes more than one index could be used. Example: if there is a table TEST(ID, NAME, FIRSTNAME) and an index on each column, then two indexes could be used for the query SELECT * FROM TEST WHERE NAME='A' AND FIRSTNAME='B', the index on NAME or the index on FIRSTNAME. It is not possible to use both indexes at the same time. Which index is used depends on the selectivity of the column. The selectivity describes the 'uniqueness' of values in a column. A selectivity of 100 means each value appears only once, and a selectivity of 1 means the same value appears in many or most rows. For the query above, the index on NAME should be used if the table contains more distinct names than first names.

@performance_1399_p
#The SQL statement ANALYZE can be used to automatically estimate the selectivity of the columns in the tables. This command should be run from time to time to improve the query plans generated by the optimizer.

@quickstartText_1000_h1
クイックスタート

@quickstartText_1001_a
Embedding H2 in an Application

@quickstartText_1002_a
H2 コンソール アプリケーション

@quickstartText_1003_h2
Embedding H2 in an Application

@quickstartText_1004_p
This database can be used in embedded mode, or in server mode. To use it in embedded mode, you need to:

@quickstartText_1005_li
Add<code>h2.jar</code>to the classpath

@quickstartText_1006_li
Use the JDBC driver class:<code>org.h2.Driver</code>

@quickstartText_1007_li
The database URL<code>jdbc:h2:~/test</code>opens the database 'test' in your user home directory

@quickstartText_1008_h2
H2 コンソール アプリケーション

@quickstartText_1009_p
このコンソールはブラウザインターフェースを使ってSQL データベースにアクセスします。

@quickstartText_1010_p
Windows XPをご使用でなかったり、 期待通りに機能しない場合は、<a href="tutorial.html">チュートリアル</a>内の 詳細説明をご覧下さい。

@quickstartText_1011_h3
手順

@quickstartText_1012_h4
インストール

@quickstartText_1013_p
Windows インストーラーを使用してソフトウェアをインストールしましょう (まだインストールされていない場合)。

@quickstartText_1014_h4
コンソールを起動する

@quickstartText_1015_p
<span class="button">スタート</span>、
<span class="button">すべてのプログラム</span>、
<span class="button">H2</span>、
<span class="button">H2 Console (Command Line)</span>をクリックします:

@quickstartText_1016_p
コンソールウィンドウが 開きます:

@quickstartText_1017_p
新しいブラウザで URL http://localhost:8082/ にアクセスして下さい。 ファイアーウォールによるセキュリティ警告を設定することができます。外部ネットワークから あなたのマシンのデータベースにアクセスされたくないのであれば、ファイアーウォールが他の接続を遮断します。 ローカル接続のみ必要です。

@quickstartText_1018_h4
ログイン

@quickstartText_1019_p
<span class="button">Generic H2</span>を選び、<span class="button">Connect</span>をクリックします:

@quickstartText_1020_p
ログインされました。

@quickstartText_1021_h4
サンプル

@quickstartText_1022_p
<span class="button">Sample SQL Script</span>をクリックします。:

@quickstartText_1023_p
SQLコマンドがコマンドエリアに表示されます。

@quickstartText_1024_h4
実行する

@quickstartText_1025_p
<span class="button">Run</span>をクリックします:

@quickstartText_1026_p
左側のデータベースアイコンの下に、 新しいテーブル TEST が追加されます。動作とステートメントの結果は、スクリプトの下に表示されます。

@quickstartText_1027_h4
切断

@quickstartText_1028_p
<span class="button">Disconnect</span>をクリックします:

@quickstartText_1029_p
データベースを閉じます

@quickstartText_1030_h4
終了

@quickstartText_1031_p
コンソールウィンドウを閉じます。詳細は<a href="tutorial.html">チュートリアル</a>をご覧下さい。

@search_1000_b
検索:

@search_1001_td
Highlight keyword(s)

@search_1002_a
ホーム

@search_1003_a
クイックスタート

@search_1004_a
インストール

@search_1005_a
チュートリアル

@search_1006_a
特徴

@search_1007_a
パフォーマンス

@search_1008_a
Advanced Topics

@search_1009_b
参照

@search_1010_a
SQL文

@search_1011_a
関数

@search_1012_a
データ型

@search_1013_a
Javadoc JDBC API

@search_1014_a
PDFドキュメント

@search_1015_b
付録

@search_1016_a
構築

@search_1017_a
歴史とロードマップ

@search_1018_a
Q&A

@search_1019_a
ライセンス

@tutorial_1000_h1
チュートリアル

@tutorial_1001_a
起動とH2コンソールの使用

@tutorial_1002_a
JDBCを使用してデータベースに接続

@tutorial_1003_a
新しいデータベースを作成する

@tutorial_1004_a
サーバーを使用する

@tutorial_1005_a
Hibernateを使用する

@tutorial_1006_a
Webアプリケーションで データベースを使用する

@tutorial_1007_a
CSV (Comma Separated Values) サポート

@tutorial_1008_a
アップグレード、 バックアップ、修復

@tutorial_1009_a
OpenOffice Baseを使用する

@tutorial_1010_a
Java Web Start / JNLP

@tutorial_1011_a
#Fulltext Search

@tutorial_1012_h2
起動とH2コンソールの使用

@tutorial_1013_p
このアプリケーションはブラウザインターフェースを使ってSQLデータベースにアクセスします。 これは、H2データベース、またはJDBC APIをサポートする別のデータベースであるかもしれません。

@tutorial_1014_p
これはクライアント / サーバーアプリケーションで、サーバーとクライアントの両方実行されることが必要です。

@tutorial_1015_p
プラットフォームと環境によって、アプリケーションの起動方法が多数あります:

@tutorial_1016_th
OS

@tutorial_1017_th
起動

@tutorial_1018_td
Windows

@tutorial_1019_td
[スタート]、 [すべてのプログラム]、 [H2]、 [H2 Console]をクリックします

@tutorial_1020_td
正しく動作したら、 システムトレイにアイコンが追加されます:

@tutorial_1021_td
システムトレイアイコンが表示されなかったら、 Javaが正しくインストールされていないのかもしれません。  (この場合は、 他のアプリケーション起動方法を試して下さい) ブラウザウィンドウが開き、ログインページが表示されます。 (URL: http://localhost:8082/)

@tutorial_1022_td
Windows

@tutorial_1023_td
ファイルブラウザを開き、h2/binフォルダまで進み、h2.batをダブルクリックします。

@tutorial_1024_td
正しく動作したら、システムトレイにアイコンが追加されます。 問題があれば、コンソールウィンドウにエラーメッセージが表示されます。 ブラウザウィンドウが開き、ログインページが表示されます。 (URL: http://localhost:8082/)

@tutorial_1025_td
Any

@tutorial_1026_td
コンソールウィンドウを開き、'h2/lib'ディレクトリまで進み、下記を実行します:

@tutorial_1027_h3
ファイアウォール

@tutorial_1028_p
サーバーを起動させたら、ファイアウォールによるセキュリティ警告を受けるでしょう (1度インストールした場合)。外部ネットワークからあなたのマシンのデータベースにアクセスされたくないのであれば、ファイアーウォールが他の接続を遮断します。ローカルマシンからの接続はまだつながっています。他のコンピュータから、このコンピューターのデータベースにアクセスしたい場合のみ、 ファイアウォールでリモート接続を許可する必要があります。

@tutorial_1029_p
小さなファイアーウォールはすでにサーバーに組み込まれています。 デフォルトによるこの構造は、他のコンピューターがサーバーにアクセスすることを許可していません。 これは、好きなように変更することができます (他のコンピューターからの接続を許可します)。

@tutorial_1030_h3
ネイティブ バージョン

@tutorial_1031_p
ネイティブ バージョンはJavaを必要としていません。なぜなら、これはGCJを使用してコンパイルされるからです。しかし、H2は現在、Windows上のGCJプロジェクトでは実行されません。異なったプラットフォームでソフトウェアをコンパイルすることが可能です。

@tutorial_1032_h3
Javaをテストする

@tutorial_1033_p
インストールしたJavaのバージョンを調べるためには、 コマンドプロンプトを開き、 下記を入力します:

@tutorial_1034_p
もしエラーメッセージが表示されたら、Javaのバイナリディレクトリを環境変数のPathに追加します。

@tutorial_1035_h3
エラーメッセージ 'Port is in use'

@tutorial_1036_p
ひとつのH2コンソールのみ起動することができます。 そうでなければ、次のようなエラーメッセージが表示されます:
<code>Port is in use, maybe another ... server already running on...</code>
複数のコンソールアプリケーションを同じコンピューターで起動することは可能です (異なったポートを使用します)、しかし、コンソールが複数の同時接続を維持するということは、普通は必要とされていません。

@tutorial_1037_h3
他のポートを使用する

@tutorial_1038_p
もしポートが他のアプリケーションによって使用されている場合は、H2コンソールを異なったポートで起動したいはずです。これは、.h2.server.properties.ファイル内のポートを変更することにより実行できます。このファイルはユーザディレクトリ内に格納されています (Windowsでは通常、"Documents and Settings/&lt;ユーザ名>")。関連する項目はwebPortです。

@tutorial_1039_h3
起動成功

@tutorial_1040_p
コンソールウィンドウからのサーバー起動が成功したら、新しいウィンドウが開き、 下記のように表示されます:

@tutorial_1041_p
ウィンドウ内をクリックしないで下さい; アプリケーションが遮断されてしまいます (Fast-Edit モードが有効の場合)。

@tutorial_1042_h3
ブラウザを使用してサーバーに接続

@tutorial_1043_p
サーバーの接続に成功したら、webブラウザを使用してサーバーに接続することができます。ブラウザにはJavaScript、フレーム、カスケードスタイルシート (css)のサポートが必要です。もし同じコンピューターのブラウザでサーバーを起動したら、 http://localhost:8082 へアクセスしてください。他のコンピューターからアプリケーションに接続したい場合は、 サーバーのIPアドレスを用意することが必要です。 例: http://192.168.0.2:8082 サーバー側でSSLを使用したい場合は、URLをHTTPSから始めます。

@tutorial_1044_h3
複数の同時セッション

@tutorial_1045_p
複数の同時ブラウザセッションがサポートされています。 データベースオブジェクトはサーバーに属しているため、同時接続の数はサーバーアプリケーションの利用可能メモリによって制限されています。

@tutorial_1046_h3
アプリケーションプロパティ

@tutorial_1047_p
サーバーを起動するとローカルのホームディレクトリに .h2.server.properties と呼ばれるファイル構成が作成されます。Windowsのインストールでは、このファイルは will be in the directory C:\Documents and Settings\[ユーザ名]のディレクトリ内にあります。このファイルはアプリケーションのセッティングに含まれています。

@tutorial_1048_h3
ログイン

@tutorial_1049_p
ログインページでは、データベースに接続するための接続情報を設定する必要があります。 JDBCドライバをデータベースのクラスに設定し、JDBCのURL、ユーザ名とパスワードを入力します。 完了したら [Connect] をクリックします。

@tutorial_1050_p
保存された設定をあらかじめ保存し、再び使用することができます。設定はアプリケーションプロパティファイルに記憶されます。

@tutorial_1051_h3
エラーメッセージ

@tutorial_1052_p
エラーメッセージは赤で表示されます。 メッセージをクリックすることによって、例外の記録の表示、非表示を切り替えることができます。

@tutorial_1053_h3
データベースドライバの追加

@tutorial_1054_p
H2DRIVERSかCLASSPATHの環境変数に、ドライバのJarファイルの位置を追加することにより、データベースドライバの追加を行うことができます。 例 (Windowsの場合): データベースドライバのライブラリに C:\Programs\hsqldb\lib\hsqldb.jar を追加し、H2DRIVERSの環境変数に C:\Programs\hsqldb\lib\hsqldb.jar を設定します。

@tutorial_1055_p
複数のドライバを設定することも可能です; それぞれのパスは ';' (Windows) や ':' (他のOS) で区切ります。 パス名内のスペースは有効です。設定は引用されません。

@tutorial_1056_p
ドライバの追加はJavaバージョンのみでサポートされています (この特徴はネイティブバージョンではサポートされていません)。

@tutorial_1057_h3
アプリケーションを使用する

@tutorial_1058_p
アプリケーションは3つのメインパネルを保持しています。上部のツールバー、左側のツリーとクエリ、右側の結果表示パネルです。データベースオブジェクト (例; テーブル) は左側のパネルに一覧表示されます。クエリパネルにSQLコマンドを打ち、 'Run' をクリックします。 コマンドの結果は、コマンドのすぐ下に表示されます。

@tutorial_1059_h3
テーブル名、またはカラム名をインサートする

@tutorial_1060_p
テーブル名やカラム名は、ツリー内のテーブル名、カラム名をクリックすることによってスクリプトにインサートすることができます。クエリが空の時にテーブルをクリックすると、 'SELECT * FROM ...' も同様に追加されます。 クエリを入力している間、使用されているテーブルはツリー内で自動的に拡張されます。例えば、 'SELECT * FROM TEST T WHERE T.' と入力すると、ツリー内のTESTテーブルは自動的に拡張されます。

@tutorial_1061_h3
切断とアプリケーションの終了

@tutorial_1062_p
ブラウザでは、ツールバーパネルの 'Disconnect' をクリックします。データベースからログアウトします。しかし、サーバーはまだ接続されていて、 新しいセッションを受け入れる準備をしています。

@tutorial_1063_p
サーバーを止めるためには、システムトレイアイコンを右クリックし、 [Exit] を選択します。もしアイコンが表示されていないのであれば、 (別の方法で実行した場合) サーバーが実行されたコンソール上で [Ctrl]+[C] を押すか (Windowsの場合)、コンソールウィンドウを閉じます。

@tutorial_1064_h2
JDBCを使用してデータベースに接続

@tutorial_1065_p
データベースに接続するためにJavaアプリケーションに最初に必要なことは、 データベースドライバをロードし、接続することです。簡単な方法は、次のコードを使用します:

@tutorial_1066_p
このコードは最初にドライバをロードして (Class.forName())、 接続を開始します (DriverManager.getConnection())。 このドライバの名前は全てのケースにおいて "org.h2.Driver" です。 データベースに認識されるため、データベースのURLは常に jdbc:h2: から始まります。 getConnection() 内の2番目のパラメーターはユーザ名を指しています ('sa' はこの場合、システム管理者を表しています)。3番目のパラメーターはパスワードです。このデータベースでは、ユーザ名は大文字と小文字を区別していませんが、パスワードは大文字と小文字を区別しています。

@tutorial_1067_h2
新しいデータベースを作成する

@tutorial_1068_p
初期設定では、データベースの指定されたURLがまだ存在しない場合、自動的に新しい (空の) データベースが作られます。

@tutorial_1069_h2
サーバーを使用する

@tutorial_1070_p
H2は現在、3つのサーバーをサポートしています: Webサーバー、TCPサーバー、ODBCサーバーです。 これらのサーバーは異なった方法で起動します。

@tutorial_1071_h3
コマンドラインから起動する

@tutorial_1072_p
初期設定でコマンドラインからサーバーを起動させるには、次のように実行します。

@tutorial_1073_p
サーバーはデフォルトオプションで起動します。オプションの一覧を取得するには、次のように実行します。

@tutorial_1074_p
異なったポートの使用が可能なオプションや、サーバーの一部を起動、終了させるオプションなどがあります。 詳細はサーバーツールのAPIドキュメントをご覧下さい。

@tutorial_1075_h3
#Connecting to the TCP Server

@tutorial_1076_p
#To remotly connect to a database using the TCP server, use the following driver and database URL:

@tutorial_1077_li
Database URL: jdbc:h2:tcp://localhost/~/test

@tutorial_1078_li
#Database URL: jdbc:h2:tcp://localhost/~/test

@tutorial_1079_p
#For details about the database URL, see also in Features.

@tutorial_1080_h3
アプリケーション内で起動する

@tutorial_1081_p
アプリケーション内からサーバーを起動、終了することも可能です。 以下はサンプルコードです:

@tutorial_1082_h3
他の過程からTCPサーバーを終了する

@tutorial_1083_p
TCPサーバーは他の過程から終了することができます。 コマンドラインからサーバーを終了するには、次のように実行します:

@tutorial_1084_p
ユーザアプリケーションからサーバーを終了するには、次のコードを使用します:

@tutorial_1085_p
この機能はサーバー上の System.exit を呼んでいます。この機能は、データベースが次回起動された時のリカバリーを回避するため、データベースへの全ての接続が切断された後に呼ばれます。リモートサーバーを終了するには、サーバー上でリモート接続が可能である必要があります。

@tutorial_1086_h3
サーバーの制限

@tutorial_1087_p
現在、サーバーやクラスターモードを使用する時にいくつかの制限があります:

@tutorial_1088_li
Statement.cancel() はエンベッドモードのみサポートされています。接続はサーバー、またはクラスターモードで1度にひとつのオペレーションで実行され、 このオペレーションが終了するまで接続は遮断されます。

@tutorial_1089_h2
Hibernateを使用する

@tutorial_1090_p
このデータベースはHibernate version 3.1 と以降の新しいバージョンをサポートしています。 HSQLDB Dialect、または H2 Dialectは src/tools/org/h2/tools/hibernate/H2Dialect.txt ファイル内で使用可能です。 H2 dialectは Hibernateのより新しいバージョンに含まれています。H2 dialectが含まれていないバージョンでは、 src\org\hibernate\dialect (Hibernate 3.1の場合) フォルダ内のファイルをコピーし、 H2Dialect.java にファイル名を変更し、 Hibernateを再びコンパイルします。

@tutorial_1091_h2
Webアプリケーションでデータベースを使用する

@tutorial_1092_p
Webアプリケーション内からデータベースに接続するには様々な方法があります。 以下はTomcatかJBossを使用の場合のいくつかの例です。

@tutorial_1093_h3
エンベッドモード

@tutorial_1094_p
(現在)最も簡単なソリューションはエンベッドモードでデータベースを使用することです。 それは、アプリケーションが起動する時や (良いソリューションは Servletリスナーを使用します。下記参照)、セッションが起動する時、アプリケーションにおける接続が開始するということを意味します。データベースは、セッションやアプリケーションが同じ過程で実行している限り、多様なセッションやアプリケーションから同時に接続されることが可能です。 多くのServletコンテナは (例； Tomcat) ただひとつのプロセスで利用されるので、問題はありません。 (Tomcatをクラスターモードで起動している場合を除いて)。 Tomcatはマルチスレッドとマルチクラスローダーを使用しています。もし複数のアプリケーションが同じデータベースに同時にアクセスする場合、データベースjarをshared/lib、またはserver/libディレクトリに置く必要があります。 webアプリケーションが起動した時にデータベースを開き、webアプリケーションが終了した時にデータベースを閉じるのが良い方法です。もし複数のアプリケーションを使用する場合、そのうちひとつのアプリケーションをこのように動作することが必要です。アプリケーションでは、セッションごとにひとつの接続を使うか、リクエスト(アクション)ごとにひとつの接続を使うという概念があります。これらの接続はできる限り、使用後に終了させます(しかし、終了させなくても悪くはありません)。

@tutorial_1095_h3
サーバーモード

@tutorial_1096_p
サーバーモードは類似していますが、他のプロセスでサーバーを起動させることを許可しています。

@tutorial_1097_h3
データベースの起動と終了にServletリスナーを使用する

@tutorial_1098_p
以下を web.xmlファイルに追記して下さい。 (context-paramとfilterの間):

@tutorial_1099_p
#For details on how to access the database, see the code DbStarter.java

@tutorial_1100_h2
CSV (Comma Separated Values) サポート

@tutorial_1101_p
データベースにCSVREADとCSVWRITEの関数を使用することで、 CSVファイルサポートを使用することができ、スタンドアロンツールとしてデータベースの外でCSVライブラリを使用することができます。

@tutorial_1102_h3
データベース内からCSVファイルに書き込む

@tutorial_1103_p
クエリからCSVファイルを作成するのに、組込み関数 CSVWRITEを使用することができます。例:

@tutorial_1104_h3
データベース内からCSVファイルを読み込む

@tutorial_1105_p
CSVREAD関数を使用してCSVファイルを読み込むことができます。 例:

@tutorial_1106_h3
JavaアプリケーションからCSVファイルに書き込む

@tutorial_1107_p
データベースを全く使用しなくても、JavaアプリケーションでCSVツールを使用することができます。 例:

@tutorial_1108_h3
JavaアプリケーションからCSVファイルを読み込む

@tutorial_1109_p
データベースを開かなくてもCSVファイルを読み込むことができます。 例:

@tutorial_1110_h2
アップグレード、 バックアップ、修復

@tutorial_1111_h3
データベースのアップグレー

@tutorial_1112_p
あるバージョンのデータベースエンジンを次のバージョンにアップグレードする際の推奨する方法は、 古いエンジンを使って(SQLスクリプトのフォームでの)データベースのバックアップを作成し、新しいエンジンを使ってSQLスクリプトを実行します。

@tutorial_1113_h3
バックアップ

@tutorial_1114_p
異なった方法のデータベースのバックアップがあります。例えば、データベースファイルをコピーすることが可能です。しかしながら、この方法はデータベースが使用されている間は推奨しません。データベースは人が判読しやすく、極めて大きいというわけではありません。データベースバックアップの推奨する方法は、圧縮したSQLスクリプトを作成することです。この方法は、バックアップツールを使用することで可能です:

@tutorial_1115_p
オプションについての情報は、SQLコマンドスクリプトをご覧下さい。バックアップは遠隔で行えますが、ファイルはサーバー側に作られます。サーバーからファイルを取るのに、ビルトインFTPサーバーを使用することができます。データベースのバックアップを作るのに、SQLコマンドスクリプトを 使用することもできます。

@tutorial_1116_h3
修復

@tutorial_1117_p
SQLスクリプトファイルからデータベースを修復するには、RunScriptツールを使用する必要があります:

@tutorial_1118_p
オプションについての情報は、SQLコマンド RUNSCRIPTをご覧下さい。修復は遠隔で行えますが、サーバー側にファイルが存在する必要があります。サーバーからファイルをコピーするのに、ビルトインFTPサーバーを使用することができます。SQLスクリプトを実行するために、 SQLコマンド RUNSCRIPTを使用することができます。SQLスクリプトファイルには、RUNSCRIPTコマンドのフォーム内に他のスクリプトファイルのリファレンスが含まれています。しかしながら、サーバーモードを使用している時、リファレンススクリプトファイルはサーバー側で利用可能であることが必要です。

@tutorial_1119_h3
#Online Backup

@tutorial_1120_p
#The BACKUP SQL statement and the Backup tool both create a zip file with all database files. However, the contents of this file are not human readable. Other than the SCRIPT statement, the BACKUP statement does not lock the database objects, and therefore does not block other users. The resulting backup is transactionally consistent:

@tutorial_1121_p
#The Backup tool (org.h2.tools.Backup) can not be used to create a online backup; the database must not be in use while running this program.

@tutorial_1122_h2
OpenOffice Baseを使用する

@tutorial_1123_p
OpenOffice.org Base はJDBC API上のデータベースアクセスをサポートしています。 OpenOffice Baseを使ってH2データベースに接続するためには、最初にOpenOfficeにJDBCドライバを追加する必要があります。H2データベースに接続する手順:

@tutorial_1124_li
オートスタートを含め、OpenOfficeを終了する

@tutorial_1125_li
h2.jar ファイルを &lt;OpenOffice>\program\classes ディレクトリ内にコピーする

@tutorial_1126_li
OpenOffice Base を起動する

@tutorial_1127_li
存在するデータベースに接続し、JDBCを選択し、[Next] をクリックする

@tutorial_1128_li
データソースURLの例: jdbc:h2:c:/temp/test

@tutorial_1129_li
Database URL: jdbc:h2:tcp://localhost/~/test

@tutorial_1130_p
これで、C:/temp ディレクトリ内に格納されているデータベースにアクセス可能です。

@tutorial_1131_h2
Java Web Start / JNLP

@tutorial_1132_p
#When using Java Web Start / JNLP (Java Network Launch Protocol), permissions tags must be set in the .jnlp file, and the application .jar file must be signed. Otherwise, when trying to write to the file system, the following exception will occur: java.security.AccessControlException: access denied (java.io.FilePermission ... read). Example permission tags:

@tutorial_1133_h2
#Fulltext Search

@tutorial_1134_p
#H2 supports Lucene full text search and native full text search implementation.

@tutorial_1135_h3
#Using the Native Full Text Search

@tutorial_1136_p
#To initialize, call:

@tutorial_1137_p
#Afterwards, you can create a full text index for a table using:

@tutorial_1138_p
#PUBLIC is the schema, TEST is the table name. The list of column names (column separated) is optional, in this case all columns are indexed. The index is updated in read time. To search the index, use the following query:

@tutorial_1139_p
#You can also call the index from within a Java application:

@tutorial_1140_h3
#Using the Lucene Fulltext Search

@tutorial_1141_p
#To use the Lucene full text search, you first need to rename the file FullTextLucene.java.txt to FullTestLucene.java and compile it. Also, you need the Lucene library in the classpath. To initialize, call:

@tutorial_1142_p
#Afterwards, you can create a full text index for a table using:

@tutorial_1143_p
#PUBLIC is the schema, TEST is the table name. The list of column names (column separated) is optional, in this case all columns are indexed. The index is updated in read time. To search the index, use the following query:

@tutorial_1144_p
#You can also call the index from within a Java application:

@~history_1021_h3
#Version 1.0.58 (2007-09-15)

@~history_1021_li
#Optimization for COLUMN IN(.., NULL) if the column does not allow NULL values.

@~history_1022_li
#System.exit is no longer called by the WebServer, the Console and the Server tool  (except to set the exit code if required). This is important when using OSGi.

@~history_1034_h3
#Version 1.0.57 (2007-08-25)

@~history_1046_h3
#Version 1.0.57 (2007-08-25)

@~history_1046_li
#Some unit tests failed on Linux because the file system works differently. The unit tests are fixed and should work now.

@~history_1047_li
#New experimental feature MVCC (multi version concurrency control).  Can be set as a option when opening the database (jdbc:h2:test;MVCC=TRUE)  or as a system property (-Dh2.mvcc=true). This is work-in-progress, use it at your own risk. Feedback is welcome.

@~history_1061_h3
#Version 1.0.56 (2007-08-02)

@~history_1073_h3
#Version 1.0.56 (2007-08-02)

@~history_1073_li
#H2 Console: In the last release, the shutdown button did not work. Fixed.

@~history_1074_li
#A new tool to help translation has been implemented: src/tools/org/h2/tools/i18n/PrepareTranslation.  This tool can detect delta changes in the original (English) and prepends '#' in translation if the original  text was changed. It can also extract text from the user documentation (however, it is incomplete).

@~history_1088_h3
#Version 1.0.55 (2007-07-12)

@~history_1100_h3
#Version 1.0.55 (2007-07-12)

@~history_1100_li
#In the READ_COMMITTED mode, when the multi-threaded kernel is enabled,  read locks are now acquired but released immediately after a query.

@~history_1101_li
#Support for the system property baseDir. This works for embedded databases as well. The setting is supported  by the H2 Console using -Dh2.baseDir or -baseDir

@~history_1114_h3
#Version 1.0.50 (2007-06-17)

@~history_1126_h3
#Version 1.0.50 (2007-06-17)

@~history_1126_li
#The table id (important for LOB files) is now included in INFORMATION_SCHEMA.TABLES.

@~history_1127_li
#File names starting with ~ are now in the user directory (Java system property user.home)

@~history_1139_h3
#Version 1.0.46 (2007-04-29)

@~history_1151_h3
#Version 1.0.46 (2007-04-29)

@~history_1151_li
#There are new 'Backup' and 'Restore' tools that work with database files directly.

@~history_1152_li
#Unnamed private in-memory database (jdbc:h2:mem:) were not 'private' as documented. Fixed.

@~history_1173_h3
#Version 1.0.44 (2007-03-04)

@~history_1185_h3
#Version 1.0.44 (2007-03-04)

@~history_1185_li
#Truncating a table is now allowed if the table references another table  (but still not allowed if the table is references by another table).

@~history_1186_li
#System sequences (automatically created sequences for IDENTITY or AUTO_INCREMENT columns) are now  random (UUIDs) to avoid clashes when merging databases using RUNSCRIPT.

@~history_1190_h3
#Version 1.0.41 (2007-01-30)

@~history_1202_h3
#Version 1.0.41 (2007-01-30)

@~history_1202_li
#Can now use UUID columns as generated key values. However, the UUID column must be the primary key.

@~history_1203_li
#Experimental online backup feature using the SQL statement BACKUP TO 'fileName'.  This creates a backup in the form of a zip file. Unlike the SCRIPT TO command, the data tables are not locked.

@~history_1205_h3
#Version 1.0.40 (2007-01-17)

@~history_1217_h3
#Version 1.0.40 (2007-01-17)

@~history_1218_li
#Setting the collation (SET COLLATOR) was very slow on some systems (up to 24 seconds).  Thanks a lot to Martina Nissler for finding this problem!

@~history_1229_h3
#Version 1.0.36 (2007-01-02)

@~history_1230_li
#It was possible to drop the sequence of a temporary tables with DROP ALL OBJECTS, resulting in a null pointer exception afterwards.

@~history_1232_h3
#Version 0.9 (2005-12-13)

@~history_1234_h2
#Roadmap

@~history_1235_h3
#Highest Priority

@~history_1240_h3
#In Version 1.1

@~history_1241_h3
#Version 1.0.25 (2006-08-31)

@~history_1241_li
#Add version number. Install directory: h2-1.0, jar file: h2-1.0.jar. Micro version: use build number, staring with 1.1.100

@~history_1242_li
#In some situations, wide b-tree indexes (with large VARCHAR columns for example) could get corrupted. Fixed.

@~history_1244_h3
#Version 0.9 (2005-12-13)

@~history_1244_li
#Change Constants.DEFAULT_MAX_MEMORY_UNDO to 10000 (and change the docs). Test.

@~history_1245_li
#First public release.

@~history_1246_h2
#Roadmap

@~history_1246_li
#Special methods for DataPage.writeByte / writeShort and so on

@~history_1247_h3
#Highest Priority

@~history_1247_li
#Index organized tables CREATE TABLE...(...) ORGANIZATION INDEX (store in data file) (probably file format changes are required for rowId)

@~history_1248_li
#Improve test code coverage

@~history_1249_h3
#Priority 1

@~history_1252_h3
#In Version 1.1

@~history_1252_li
#RECOVER=1 should automatically recover, =2 should run the recovery tool if required

@~history_1253_li
#Add version number. Install directory: h2-1.0, jar file: h2-1.0.jar. Micro version: use build number, staring with 1.1.100

@~history_1261_h3
#Priority 1

@~history_1261_li
#Function in management db: list open connections and databases of a (TCP) server

@~history_1262_li
#MVCC (Multi Version Concurrency Control)

@~history_1277_h3
#Priority 2

@~history_1289_h3
#Priority 2

@~history_1289_li
#Compression performance: don't allocate buffers, compress / expand in to out buffer

@~history_1290_li
#Support OSGi: http://oscar-osgi.sourceforge.net, http://incubator.apache.org/felix/index.html

@~history_1555_h3
#Not Planned

@~history_1558_h2
#Supporters

@~history_1559_p
#Many thanks for those who helped by finding and reporting bugs, gave valuable feedback, spread the word and have translated this project. Also many thanks to the donors who contributed via PayPal:

@~history_1568_h3
#Not Planned

@~history_1571_h2
#Supporters

@~history_1572_p
#Many thanks for those who helped by finding and reporting bugs, gave valuable feedback, spread the word and have translated this project. Also many thanks to the donors who contributed via PayPal:

@~history_1574_li
#Pete Haidinyak, USA

@~history_1575_li
#Jun Iyama, Japan

@~tutorial_1011_h2
起動とH2コンソールの使用

@~tutorial_1012_p
このアプリケーションはブラウザインターフェースを使ってSQLデータベースにアクセスします。 これは、H2データベース、またはJDBC APIをサポートする別のデータベースであるかもしれません。

@~tutorial_1015_th
OS

@~tutorial_1017_td
Windows

@~tutorial_1026_h3
ファイアウォール

@~tutorial_1027_p
サーバーを起動させたら、ファイアウォールによるセキュリティ警告を受けるでしょう (1度インストールした場合)。外部ネットワークからあなたのマシンのデータベースにアクセスされたくないのであれば、ファイアーウォールが他の接続を遮断します。ローカルマシンからの接続はまだつながっています。他のコンピュータから、このコンピューターのデータベースにアクセスしたい場合のみ、 ファイアウォールでリモート接続を許可する必要があります。

@~tutorial_1029_h3
ネイティブ バージョン

@~tutorial_1030_p
ネイティブ バージョンはJavaを必要としていません。なぜなら、これはGCJを使用してコンパイルされるからです。しかし、H2は現在、Windows上のGCJプロジェクトでは実行されません。異なったプラットフォームでソフトウェアをコンパイルすることが可能です。

@~tutorial_1031_h3
Javaをテストする

@~tutorial_1032_p
インストールしたJavaのバージョンを調べるためには、 コマンドプロンプトを開き、 下記を入力します:

@~tutorial_1034_h3
エラーメッセージ 'Port is in use'

@~tutorial_1035_p
ひとつのH2コンソールのみ起動することができます。 そうでなければ、次のようなエラーメッセージが表示されます:
<code>Port is in use, maybe another ... server already running on...</code>
複数のコンソールアプリケーションを同じコンピューターで起動することは可能です (異なったポートを使用します)、しかし、コンソールが複数の同時接続を維持するということは、普通は必要とされていません。

@~tutorial_1036_h3
他のポートを使用する

@~tutorial_1037_p
もしポートが他のアプリケーションによって使用されている場合は、H2コンソールを異なったポートで起動したいはずです。これは、.h2.server.properties.ファイル内のポートを変更することにより実行できます。このファイルはユーザディレクトリ内に格納されています (Windowsでは通常、"Documents and Settings/&lt;ユーザ名>")。関連する項目はwebPortです。

@~tutorial_1038_h3
起動成功

@~tutorial_1039_p
コンソールウィンドウからのサーバー起動が成功したら、新しいウィンドウが開き、 下記のように表示されます:

@~tutorial_1041_h3
ブラウザを使用してサーバーに接続

@~tutorial_1042_p
サーバーの接続に成功したら、webブラウザを使用してサーバーに接続することができます。ブラウザにはJavaScript、フレーム、カスケードスタイルシート (css)のサポートが必要です。もし同じコンピューターのブラウザでサーバーを起動したら、 http://localhost:8082 へアクセスしてください。他のコンピューターからアプリケーションに接続したい場合は、 サーバーのIPアドレスを用意することが必要です。 例: http://192.168.0.2:8082 サーバー側でSSLを使用したい場合は、URLをHTTPSから始めます。

@~tutorial_1043_h3
複数の同時セッション

@~tutorial_1044_p
複数の同時ブラウザセッションがサポートされています。 データベースオブジェクトはサーバーに属しているため、同時接続の数はサーバーアプリケーションの利用可能メモリによって制限されています。

@~tutorial_1045_h3
アプリケーションプロパティ

@~tutorial_1046_p
サーバーを起動するとローカルのホームディレクトリに .h2.server.properties と呼ばれるファイル構成が作成されます。Windowsのインストールでは、このファイルは will be in the directory C:\Documents and Settings\[ユーザ名]のディレクトリ内にあります。このファイルはアプリケーションのセッティングに含まれています。

@~tutorial_1047_h3
ログイン

@~tutorial_1048_p
ログインページでは、データベースに接続するための接続情報を設定する必要があります。 JDBCドライバをデータベースのクラスに設定し、JDBCのURL、ユーザ名とパスワードを入力します。 完了したら [Connect] をクリックします。

@~tutorial_1050_h3
エラーメッセージ

@~tutorial_1051_p
エラーメッセージは赤で表示されます。 メッセージをクリックすることによって、例外の記録の表示、非表示を切り替えることができます。

@~tutorial_1052_h3
データベースドライバの追加

@~tutorial_1053_p
H2DRIVERSかCLASSPATHの環境変数に、ドライバのJarファイルの位置を追加することにより、データベースドライバの追加を行うことができます。 例 (Windowsの場合): データベースドライバのライブラリに C:\Programs\hsqldb\lib\hsqldb.jar を追加し、H2DRIVERSの環境変数に C:\Programs\hsqldb\lib\hsqldb.jar を設定します。

@~tutorial_1056_h3
アプリケーションを使用する

@~tutorial_1057_p
アプリケーションは3つのメインパネルを保持しています。上部のツールバー、左側のツリーとクエリ、右側の結果表示パネルです。データベースオブジェクト (例; テーブル) は左側のパネルに一覧表示されます。クエリパネルにSQLコマンドを打ち、 'Run' をクリックします。 コマンドの結果は、コマンドのすぐ下に表示されます。

@~tutorial_1058_h3
テーブル名、またはカラム名をインサートする

@~tutorial_1059_p
テーブル名やカラム名は、ツリー内のテーブル名、カラム名をクリックすることによってスクリプトにインサートすることができます。クエリが空の時にテーブルをクリックすると、 'SELECT * FROM ...' も同様に追加されます。 クエリを入力している間、使用されているテーブルはツリー内で自動的に拡張されます。例えば、 'SELECT * FROM TEST T WHERE T.' と入力すると、ツリー内のTESTテーブルは自動的に拡張されます。

@~tutorial_1060_h3
切断とアプリケーションの終了

@~tutorial_1061_p
ブラウザでは、ツールバーパネルの 'Disconnect' をクリックします。データベースからログアウトします。しかし、サーバーはまだ接続されていて、 新しいセッションを受け入れる準備をしています。

@~tutorial_1063_h2
JDBCを使用してデータベースに接続

@~tutorial_1064_p
データベースに接続するためにJavaアプリケーションに最初に必要なことは、 データベースドライバをロードし、接続することです。簡単な方法は、次のコードを使用します:

@~tutorial_1066_h2
新しいデータベースを作成する

@~tutorial_1067_p
初期設定では、データベースの指定されたURLがまだ存在しない場合、自動的に新しい (空の) データベースが作られます。

@~tutorial_1068_h2
サーバーを使用する

@~tutorial_1069_p
H2は現在、3つのサーバーをサポートしています: Webサーバー、TCPサーバー、ODBCサーバーです。 これらのサーバーは異なった方法で起動します。

@~tutorial_1070_h3
コマンドラインから起動する

@~tutorial_1071_p
初期設定でコマンドラインからサーバーを起動させるには、次のように実行します。

@~tutorial_1074_h3
#Connecting to the TCP Server

@~tutorial_1075_p
#To remotly connect to a database using the TCP server, use the following driver and database URL:

@~tutorial_1076_li
Database URL: jdbc:h2:tcp://localhost/~/test

@~tutorial_1078_p
#For details about the database URL, see also in Features.

@~tutorial_1079_h3
アプリケーション内で起動する

@~tutorial_1080_p
アプリケーション内からサーバーを起動、終了することも可能です。 以下はサンプルコードです:

@~tutorial_1081_h3
他の過程からTCPサーバーを終了する

@~tutorial_1082_p
TCPサーバーは他の過程から終了することができます。 コマンドラインからサーバーを終了するには、次のように実行します:

@~tutorial_1085_h3
サーバーの制限

@~tutorial_1086_p
現在、サーバーやクラスターモードを使用する時にいくつかの制限があります:

@~tutorial_1087_li
Statement.cancel() はエンベッドモードのみサポートされています。接続はサーバー、またはクラスターモードで1度にひとつのオペレーションで実行され、 このオペレーションが終了するまで接続は遮断されます。

@~tutorial_1088_h2
Hibernateを使用する

@~tutorial_1089_p
このデータベースはHibernate version 3.1 と以降の新しいバージョンをサポートしています。 HSQLDB Dialect、または H2 Dialectは src/tools/org/h2/tools/hibernate/H2Dialect.txt ファイル内で使用可能です。 H2 dialectは Hibernateのより新しいバージョンに含まれています。H2 dialectが含まれていないバージョンでは、 src\org\hibernate\dialect (Hibernate 3.1の場合) フォルダ内のファイルをコピーし、 H2Dialect.java にファイル名を変更し、 Hibernateを再びコンパイルします。

@~tutorial_1090_h2
Webアプリケーションでデータベースを使用する

@~tutorial_1091_p
Webアプリケーション内からデータベースに接続するには様々な方法があります。 以下はTomcatかJBossを使用の場合のいくつかの例です。

@~tutorial_1092_h3
エンベッドモード

@~tutorial_1093_p
(現在)最も簡単なソリューションはエンベッドモードでデータベースを使用することです。 それは、アプリケーションが起動する時や (良いソリューションは Servletリスナーを使用します。下記参照)、セッションが起動する時、アプリケーションにおける接続が開始するということを意味します。データベースは、セッションやアプリケーションが同じ過程で実行している限り、多様なセッションやアプリケーションから同時に接続されることが可能です。 多くのServletコンテナは (例； Tomcat) ただひとつのプロセスで利用されるので、問題はありません。 (Tomcatをクラスターモードで起動している場合を除いて)。 Tomcatはマルチスレッドとマルチクラスローダーを使用しています。もし複数のアプリケーションが同じデータベースに同時にアクセスする場合、データベースjarをshared/lib、またはserver/libディレクトリに置く必要があります。 webアプリケーションが起動した時にデータベースを開き、webアプリケーションが終了した時にデータベースを閉じるのが良い方法です。もし複数のアプリケーションを使用する場合、そのうちひとつのアプリケーションをこのように動作することが必要です。アプリケーションでは、セッションごとにひとつの接続を使うか、リクエスト(アクション)ごとにひとつの接続を使うという概念があります。これらの接続はできる限り、使用後に終了させます(しかし、終了させなくても悪くはありません)。

@~tutorial_1094_h3
サーバーモード

@~tutorial_1095_p
サーバーモードは類似していますが、他のプロセスでサーバーを起動させることを許可しています。

@~tutorial_1096_h3
データベースの起動と終了にServletリスナーを使用する

@~tutorial_1097_p
以下を web.xmlファイルに追記して下さい。 (context-paramとfilterの間):

@~tutorial_1099_h2
CSV (Comma Separated Values) サポート

@~tutorial_1100_p
データベースにCSVREADとCSVWRITEの関数を使用することで、 CSVファイルサポートを使用することができ、スタンドアロンツールとしてデータベースの外でCSVライブラリを使用することができます。

@~tutorial_1101_h3
データベース内からCSVファイルに書き込む

@~tutorial_1102_p
クエリからCSVファイルを作成するのに、組込み関数 CSVWRITEを使用することができます。例:

@~tutorial_1103_h3
データベース内からCSVファイルを読み込む

@~tutorial_1104_p
CSVREAD関数を使用してCSVファイルを読み込むことができます。 例:

@~tutorial_1105_h3
JavaアプリケーションからCSVファイルに書き込む

@~tutorial_1106_p
データベースを全く使用しなくても、JavaアプリケーションでCSVツールを使用することができます。 例:

@~tutorial_1107_h3
JavaアプリケーションからCSVファイルを読み込む

@~tutorial_1108_p
データベースを開かなくてもCSVファイルを読み込むことができます。 例:

@~tutorial_1109_h2
アップグレード、バックアップ、修復

@~tutorial_1110_h3
データベースのアップグレー

@~tutorial_1111_p
あるバージョンのデータベースエンジンを次のバージョンにアップグレードする際の推奨する方法は、 古いエンジンを使って(SQLスクリプトのフォームでの)データベースのバックアップを作成し、新しいエンジンを使ってSQLスクリプトを実行します。

@~tutorial_1112_h3
バックアップ

@~tutorial_1113_p
異なった方法のデータベースのバックアップがあります。例えば、データベースファイルをコピーすることが可能です。しかしながら、この方法はデータベースが使用されている間は推奨しません。データベースは人が判読しやすく、極めて大きいというわけではありません。データベースバックアップの推奨する方法は、圧縮したSQLスクリプトを作成することです。この方法は、バックアップツールを使用することで可能です:

@~tutorial_1115_h3
修復

@~tutorial_1116_p
SQLスクリプトファイルからデータベースを修復するには、RunScriptツールを使用する必要があります:

@~tutorial_1118_h3
#Online Backup

@~tutorial_1119_p
#The BACKUP SQL statement and the Backup tool both create a zip file with all database files. However, the contents of this file are not human readable. Other than the SCRIPT statement, the BACKUP statement does not lock the database objects, and therefore does not block other users. The resulting backup is transactionally consistent:

@~tutorial_1121_h2
OpenOffice Baseを使用する

@~tutorial_1122_p
OpenOffice.org Base はJDBC API上のデータベースアクセスをサポートしています。 OpenOffice Baseを使ってH2データベースに接続するためには、最初にOpenOfficeにJDBCドライバを追加する必要があります。H2データベースに接続する手順:

@~tutorial_1123_li
オートスタートを含め、OpenOfficeを終了する

@~tutorial_1129_p
これで、C:/temp ディレクトリ内に格納されているデータベースにアクセス可能です。

@~tutorial_1130_h2
Java Web Start / JNLP

@~tutorial_1131_p
#When using Java Web Start / JNLP (Java Network Launch Protocol), permissions tags must be set in the .jnlp file, and the application .jar file must be signed. Otherwise, when trying to write to the file system, the following exception will occur: java.security.AccessControlException: access denied (java.io.FilePermission ... read). Example permission tags:

