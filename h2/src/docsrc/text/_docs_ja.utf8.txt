@advanced_1000_h1
進歩したトピックス

@advanced_1001_a
Result Sets

@advanced_1002_a
大きなオブジェクト

@advanced_1003_a
リンクテーブル

@advanced_1004_a
トランザクション分離

@advanced_1005_a
#Multi-Version Concurrency Control (MVCC)

@advanced_1006_a
クラスタリング / 高可用性

@advanced_1007_a
2フェーズコミット

@advanced_1008_a
互換性

@advanced_1009_a
Windowsサービスとして実行する

@advanced_1010_a
ODBCドライバ

@advanced_1011_a
ACID

@advanced_1012_a
永続性問題

@advanced_1013_a
リカバーツールを使用する

@advanced_1014_a
ファイルロックプロトコル

@advanced_1015_a
SQLインジェクションに対する防御

@advanced_1016_a
#Restricting Class Loading and Usage

@advanced_1017_a
セキュリティプロトコル

@advanced_1018_a
汎用一意識別子 (UUID)

@advanced_1019_a
システムプロパティから読み込まれた設定

@advanced_1020_a
用語集とリンク

@advanced_1021_h2
Result Sets

@advanced_1022_h3
行数の制限

@advanced_1023_p
アプリケーションから結果が返される前に、全ての行はデータベースによって読み取られます。 サーバー側のカーソルは現在サポートされていません。もし最初の数行がアプリケーションに読み取られたら、 result setサイズはパフォーマンスを改善するために制限されます。これは、クエリーの LIMIT を使用することで 実現できます (例: SELECT * FROM TEST LIMIT 100)、または Statement.setMaxRows(max) を使用します。

@advanced_1024_h3
大きなResult Set と外部ソート

@advanced_1025_p
1000行以上のresult setのために、結果はディスクにバッファーされます。 もし ORDER BY が使用されていたら、ソートは、外部ソートアルゴリズムを使用して 完了しています。このケースでは、それぞれの行のブロックはクイックソートを使用してソートされ、 ディスクに書き込まれています; データを読み込んでいる時、ブロックは一緒にマージされます。

@advanced_1026_h2
大きなオブジェクト

@advanced_1027_h3
大きなオブジェクトのソートと読み込み

@advanced_1028_p
メモリに収まらないオブジェクトは可能であるなら、 データ型は CLOB (テキストデータ) または BLOB (バイナリーデータ) が使用されるべきです。 これらのデータ型に関して、オブジェクトはストリームを使用して、完全にメモリから読み込まれるというわけではありません。 BLOB を保存するためには、PreparedStatement.setBinaryStream を使用します。 CLOB を使用するためには、PreparedStatement.setCharacterStream を使用します。 BLOB を読み込みためには、ResultSet.getBinaryStream を使用し、CLOB を読み込むために ResultSet.getCharacterStream を使用します。もし クライアント / サーバーモードが使用されていたら、 BLOB と CLOB データはアクセス時に完全にメモリから読み込まれます。このケースでは、メモリによって BLOB と CLOB のサイズは制限されています。

@advanced_1029_h2
リンクテーブル

@advanced_1030_p
このデータベースはリンクテーブルをサポートしています。これは、 現在存在しないテーブルは、ただ他のデータベースへリンクするという意味です。 このようなリンクを作るには、CREATE LINKED TABLE ステートメントを使用します:

@advanced_1031_p
この時、通常の方法でテーブルにアクセスすることが可能です。このテーブルにデータを挿入する時、 制限があります: テーブルに行を挿入、または更新する時、insertステートメントで設定されていないNULLと値は、 両方ともNULLとして挿入されます。目的のテーブルのデフォルト値がNULL以外なら、 望みどおりの効果は得られません。

@advanced_1032_p
各リンクテーブルの新しい接続は開かれます。多くのリンクテーブルが使用されている時、一部データベースにとってこれは問題となり得ます。Oracle XEでは、接続の最大数を増加することができます。Oracle XEは次の値の変更後、再起動する必要があります:

@advanced_1033_h2
トランザクション分離

@advanced_1034_p
このデータベースは次のトランザクション分離レベルをサポートしています:

@advanced_1035_b
Read Committed (コミット済み読み取り)

@advanced_1036_li
これはデフォルトレベルです。
read lockは早急に解除されます。 このレベルを使用する時、高い同時並行性が可能です。
これは多数のデータベースシステムで使用される分離レベルです。

@advanced_1037_li
これを有効にするには、 SQLステートメント 'SET LOCK_MODE 3' を実行します。

@advanced_1038_li
または、;LOCK_MODE=3 をデータベースURLに付け加えます: jdbc:h2:~/test;LOCK_MODE=3

@advanced_1039_b
Serializable (直列化)

@advanced_1040_li
これを有効にするには、 SQLステートメント 'SET LOCK_MODE 1' を実行します。

@advanced_1041_li
または、;LOCK_MODE=1 をデータベースURLに付け加えます: jdbc:h2:~/test;LOCK_MODE=1

@advanced_1042_b
Read Uncommitted (非コミット読み取り)

@advanced_1043_li
このレベルの意味は、トランザクション分離は無効だということです。

@advanced_1044_li
これを有効にするには、SQLステートメント 'SET LOCK_MODE 0' を実行します

@advanced_1045_li
または、;LOCK_MODE=0 をデータベースURLに付け加えます: jdbc:h2:~/test;LOCK_MODE=0

@advanced_1046_p
分離レベル "serializable" を使用している時、ダーティリード、反復不可能読み取り、 ファントムリードを防ぐことができます。

@advanced_1047_b
Dirty Reads (ダーティリード)

@advanced_1048_li
他の接続によるコミットされていない変更を読み取ることができる、という意味です。

@advanced_1049_li
実行可能: read uncommitted (非コミット読み取り)

@advanced_1050_b
Non-Repeatable Reads (反復不可能読み取り)

@advanced_1051_li
ひとつの接続が行を読み取り、 他の接続が行を変更し、コミットすると、最初の接続は同じ行を再読し、新しい結果を取得します。

@advanced_1052_li
実行可能: read uncommitted (非コミット読み取り)、read committed (コミット済み読み取り)

@advanced_1053_b
Phantom Reads (ファントムリード)

@advanced_1054_li
ひとつの接続が条件を使って行の集まりを読み取り、 他の接続がこの条件を壊して行を挿入し、コミットした時、最初の接続は同じ条件を使って再読し、 新しい行を取得します。

@advanced_1055_li
実行可能: read uncommitted (非コミット読み取り)、read committed (コミット済み読み取り)

@advanced_1056_h3
テーブルレベルロック

@advanced_1057_p
#The database allows multiple concurrent connections to the same database. To make sure all connections only see consistent data, table level locking is used by default. This mechanism does not allow high concurrency, but is very fast. Shared locks and exclusive locks are supported. Before reading from a table, the database tries to add a shared lock to the table (this is only possible if there is no exclusive lock on the object by another connection). If the shared lock is added successfully, the table can be read. It is allowed that other connections also have a shared lock on the same object. If a connection wants to write to a table (update or delete a row), an exclusive lock is required. To get the exclusive lock, other connection must not have any locks on the object. After the connection commits, all locks are released. This database keeps all locks in memory.

@advanced_1058_h3
ロックタイムアウト

@advanced_1059_p
もし接続がオブジェクト上でロックを取得できないのであれば、一定時間待機します (ロックタイムアウト)。この時間の間、うまくいけば接続はロックコミットを保有し、 この時、ロックを取得することが可能です。他の接続がロックを解除しないため、 これが不可能であれば、失敗した接続がロックタイムアウト例外を取得します。 それぞれの接続に個別にロックタイムアウトを設定することができます。

@advanced_1060_h2
#Multi-Version Concurrency Control (MVCC)

@advanced_1061_p
#The MVCC feature allows higher concurrency than using (table level or row level) locks. When using MVCC in this database, delete, insert and update operations will only issue a shared lock on the table. Table are still locked exclusively when adding or removing columns, when dropping the table, and when using SELECT ... FOR UPDATE. Connections only 'see' committed data, and own changes. That means, if connection A updates a row but doesn't commit this change yet, connection B will see the old value. Only when the change is committed, the new value is visible by other connections (read committed). If multiple connections concurrently try to update the same row, this database fails fast: a concurrent update exception is thrown.

@advanced_1062_p
#To use the MVCC feature, append MVCC=TRUE to the database URL:

@advanced_1063_h2
クラスタリング / 高可用性

@advanced_1064_p
このデータベースは簡単なクラスタリング / 高可用性メカニズムをサポートしています。 アーキテクチャ: 二つのデータベースサーバーは二つの異なったコンピューター上で動作し、 両方のコンピューターは同じデータベースのコピーです。もし両方のサーバーが動いたら、 それぞれのデータベース操作は両方のコンピューター上で実行されます。ひとつのサーバーがおちたら (電源、ハードウェア、またはネットワーク障害)、他のサーバーはまだ動作を続行します。 このポイントから、操作は他のサーバーがバックアップされるまで、ひとつのサーバー上で実行されます。

@advanced_1065_p
クラスタリングはサーバーモードでのみ使用できます (エンベッドモードはクラスタリングをサポートしていません)。 サーバーを停止しないでクラスタを回復することは可能ですが、二番目のデータベースが回復している間に、 他のどんなアプリケーションでも最初のデータベースのデータを変更しないことは重要なため、 クラスタを回復するのは現在手動プロセスです。

@advanced_1066_p
クラスタを初期化するには、次の手順に従います:

@advanced_1067_li
データベースを作成する

@advanced_1068_li
他の位置にデータベースをコピーし、クラスタリングを初期化するために、 CreateClusterツールを使用します。その後、同じデータが含まれる二つのデータベースを所有します。

@advanced_1069_li
二つのサーバーを起動します (ひとつはそれぞれのデータベースのコピー)

@advanced_1070_li
これでクライアントアプリケーションのデータベースに接続する準備ができました

@advanced_1071_h3
CreateClusterツールを使用する

@advanced_1072_p
クラスタリングがどのように機能するか理解するために、 次の例を試してみて下さい。この例では、二つのデータベースは同じコンピューター内に属していますが、 通常は、データベースは異なるサーバー内にあります。

@advanced_1073_li
二つのディレクトリを作成します: server1 と server2 です。それぞれのディレクトリは コンピューター上のディレクトリをシミュレートします。

@advanced_1074_li
最初のディレクトリを示してTCPサーバーを起動します。 次のコマンドラインを使用して実行できます:

@advanced_1075_li
二番目のディレクトリを示して二番目のTCPサーバーを起動します。 これは二番目の (重複の) コンピューターで動いているサーバーをシミュレートします。 次のコマンドラインを使用して実行できます:

@advanced_1076_li
クラスタリングを初期化するためにCreateClusterツールを使用します。 データベースが存在しなければ、自動的に新しい、空のデータベースを作成します。 次のコマンドラインでツールを実行します:

@advanced_1077_li
これでアプリケーション、または JDBC URL jdbc:h2:tcp://localhost:9101,localhost:9102/test を使用したH2コンソールを使用してデータベースへアクセスできます。

@advanced_1078_li
サーバーを止めたら (プロセスを無視して)、他のマシンは動作を続行し、 従ってデータベースもまだアクセス可能だということがわかります。

@advanced_1079_li
クラスタを回復するために、まず最初に失敗したデータベースを削除し、止められていたサーバーを 再起動します。そして、CreateClusterツールを再実行します。

@advanced_1080_h3
クラスタリングアルゴリズムと制限

@advanced_1081_p
読み取り専用クエリーは、最初のクラスタノードに対してのみ 実行されますが、他の全てのステートメントは全てのノードに対して実行されます。 現在、トランザクションの問題を回避するように作られたロードバランシングは存在しません。 次の関数は、異なったクラスタノード上で異なった結果をもたらすので、実行には注意して下さい: RANDOM_UUID()、SECURE_RAND()、SESSION_ID()、MEMORY_FREE()、 MEMORY_USED()、CSVREAD()、CSVWRITE()、RAND() [seed を使用していない時] 直接ステートメントを変更する際に、これらの関数を使用してはなりません (例: INSERT、 UPDATE、または MERGE)。しかし、読み取り専用ステートメントでは使用でき、 結果はステートメントを変更するために使用することができます。

@advanced_1082_h2
2フェーズコミット

@advanced_1083_p
2フェーズコミットプロトコルがサポートされています。 2フェーズコミットは次のように機能します:

@advanced_1084_li
オートコミットはOFFの状態であることが必要です

@advanced_1085_li
トランザクションは、例えば行を挿入することによって、起動されます

@advanced_1086_li
トランザクションは、SQLステートメント PREPARE COMMIT transactionName を実行することによって "prepared" とマークされます

@advanced_1087_li
現在トランザクションはコミット、またはロールバックすることができます

@advanced_1088_li
トランザクションがコミット、またはロールバックに成功する前に問題が起きたら (例えば、ネットワークの問題が起きたことによって)、トランザクションは "in-doubt" の状態になります

@advanced_1089_li
データベースへの再接続時、in-doubtトランザクションは SELECT * FROM INFORMATION_SCHEMA.IN_DOUBT でリストアップされます

@advanced_1090_li
リスト上のそれぞれのトランザクションは、COMMIT TRANSACTION transactionName または、 ROLLBACK TRANSACTION transactionName を実行してコミット、またはロールバックされなければなりません

@advanced_1091_li
変更を適用するために、データベースを終了し、再び開く必要があります

@advanced_1092_h2
互換性

@advanced_1093_p
このデータベースは (ある程度までは)、HSQLDB、MySQL や PostgreSQLのような 他のデータベースと互換性があります。H2が互換性のないある一定の領域があります。

@advanced_1094_h3
オートコミットがONの時のトランザクションコミット

@advanced_1095_p
この時、このデータベースエンジンは 結果が返ってくる直前にトランザクションをコミットします (オートコミットがONの場合)。 クエリーにとって、アプリケーションがresult setを通してスキャンする前や、result setが閉じられる前でさえも、 トランザクションはコミットされるということを意味しています。このケースでは、他のデータベースエンジンは result setが閉じられる時、トランザクションをコミットします。

@advanced_1096_h3
キーワード / 予約語

@advanced_1097_p
引用 (二重引用符で囲まれる) されない限り、識別子 (テーブル名、カラム名など) として使用できないキーワードのリストがあります。 現在のリスト:

@advanced_1098_p
CURRENT_TIMESTAMP, CURRENT_TIME, CURRENT_DATE, CROSS, DISTINCT, EXCEPT, EXISTS, FROM, FOR, FALSE, FULL, GROUP, HAVING, INNER, INTERSECT, IS, JOIN, LIKE, MINUS, NATURAL, NOT, NULL, ON, ORDER, PRIMARY, ROWNUM, SELECT, SYSDATE, SYSTIME, SYSTIMESTAMP, TODAY, TRUE, UNION, WHERE

@advanced_1099_p
このリストのある特定のワードはキーワードです。なぜなら、例えば CURRENT_TIMESTAMP のような 互換性のため "()" なしで使用できる関数だからです。

@advanced_1100_h2
Windowsサービスとして実行する

@advanced_1101_p
ネイティブラッパー / アダプタを使用して、JavaアプリケーションはWindowsサービスとして実行できます。これを実行するために、様々なツールが有効です。Tanuki Software, Inc. (<a href="http://wrapper.tanukisoftware.org/">http://wrapper.tanukisoftware.org/</a>) のJavaサービスラッパーはインストールが含まれています。H2データベースエンジンサービスのインストール、起動、終了とアンインストールのためのバッチファイルが添付されます。このサービスは、TCPサーバーとH2コンソールWebアプリケーションが含まれます。バッチファイルは、H2/service ディレクトリに配置されています。

@advanced_1102_h3
サービスをインストールする

@advanced_1103_p
サービスは、最初にWindowsサービスとして登録することが必要です。 これを行うために、1_install_service.bat をダブルクリックします。 成功すれば、コマンドプロンプトウィンドウが開き、すぐに消えます。失敗したらメッセージが現れます。

@advanced_1104_h3
サービスを起動する

@advanced_1105_p
Windowsのサービスマネージャを使用するか、2_start_service.bat をダブルクリックして H2データベースエンジンサービスを起動することができます。サービスがインストールされていなければ、 バッチファイルはエラーメッセージを表示しないということに注意して下さい。

@advanced_1106_h3
H2コンソールに接続する

@advanced_1107_p
サービスのインストールと起動後、ブラウザを使用してH2コンソールアプリケーションに 接続することができます。3_start_browser.bat をダブルクリックして実行します。 デフォルトのポート (8082) はバッチファイルでハードコード化されているものです。

@advanced_1108_h3
サービスを終了する

@advanced_1109_p
サービスを終了するには、4_stop_service.bat をダブルクリックします。 サービスがインストール、または開始されていなければ、 バッチファイルはエラーメッセージを表示しないということに注意して下さい。

@advanced_1110_h3
サービスのアンインストール

@advanced_1111_p
サービスをアンインストールするには、5_uninstall_service.bat をダブルクリックします。成功すれば、コマンドプロンプトウィンドウが開き、すぐに消えます。 失敗したらメッセージが現れます。

@advanced_1112_h2
ODBCドライバ

@advanced_1113_p
このデータベースは現時点で、自身のODBCドライバと共に動作しませんが、PostgreSQLネットワークプロトコルをサポートしています。そのため、PostgreSQL ODBCドライバが使用可能です。PostgreSQLネットワークプロトコルのサポートは非常に新しく、試験的なものとして見なされます。製品アプリケーションで使用されるべきではありません。

@advanced_1114_p
現時点で、PostgreSQL ODBCドライバはWindowsの64 bitバージョンでは動作しません。詳細は <a href="http://svr5.postgresql.org/pgsql-odbc/2005-09/msg00127.php">ODBC Driver on Windows 64 bit</a> をご覧下さい。

@advanced_1115_h3
ODBCインストール

@advanced_1116_p
まず、ODBCドライバがインストールされていなければなりません。最近のいずれのPostgreSQL ODBCドライバでも動作しますが、バージョン 8.2.4 以降のものを推奨します。PostgreSQL ODBCドライバのWindowsバージョンは <a href="http://www.postgresql.org/ftp/odbc/versions/msi">http://www.postgresql.org/ftp/odbc/versions/msi</a> から利用可能です。

@advanced_1117_h3
サーバーの起動

@advanced_1118_p
ODBCドライバのインストール後、コマンドラインを使用してH2サーバーを起動します:

@advanced_1119_p
PGサーバー (PostgreSQLプロトコルのためのPG) が同様に起動します。デフォルトでは、データベースはサーバーが起動した現在作業中のディレクトリに保存されます。ユーザーホームディレクトリなど、別のディレクトリにデータベースを保存するには、-baseDir を使用します:

@advanced_1120_p
PGサーバーは次のJavaアプリケーション内から起動、終了することが可能です:

@advanced_1121_p
デフォルトでは、ローカルホストからの接続のみ許可されます。リモート接続を許可するには、サーバーの起動時に<code>-pgAllowOthers true</code> を使用します。

@advanced_1122_h3
ODBC設定

@advanced_1123_p
ドライバのインストール後、新しいデータソースを追加しなければなりません。Windowsでは、データソースAdministratorを開くために、<code>odbcad32.exe</code> を実行します。"Add..." をクリックし、PostgreSQL Unicode driverを選択します。そして、"Finish" をクリックします。接続プロパティを変更することが可能です:

@advanced_1124_th
プロパティ

@advanced_1125_th
例

@advanced_1126_th
コメント

@advanced_1127_td
Data Source

@advanced_1128_td
H2 Test

@advanced_1129_td
ODBCデータソースの名称

@advanced_1130_td
Database

@advanced_1131_td
test

@advanced_1132_td
データベース名。現時点では簡易な名前のみサポートされています;

@advanced_1133_td
相対パス、または絶対パスはデータベース名にサポートされていません。

@advanced_1134_td
デフォルトでは、-baseDir 設定が使用された時を除き、

@advanced_1135_td
データベースはサーバーが起動された現在作業中のディレクトリに保存されます。

@advanced_1136_td
名前は少なくとも3文字でなければなりません。

@advanced_1137_td
Server

@advanced_1138_td
localhost

@advanced_1139_td
サーバー名、またはIPアドレス

@advanced_1140_td
デフォルトでは、リモート接続のみ許可されています。

@advanced_1141_td
User Name

@advanced_1142_td
sa

@advanced_1143_td
データベースのユーザー名

@advanced_1144_td
SSL Mode

@advanced_1145_td
disabled

@advanced_1146_td
現時点で、SSLはサポートされていません。

@advanced_1147_td
Port

@advanced_1148_td
5435

@advanced_1149_td
PGサーバーが傾聴しているポート

@advanced_1150_td
Password

@advanced_1151_td
sa

@advanced_1152_td
データベースパスワード

@advanced_1153_p
この後、このデータソースを使用できます。

@advanced_1154_h3
PGプロトコルサポートの制限

@advanced_1155_p
現時点では、PostgreSQLネットワークプロトコルのサブセットのみ実装されています。また、カタログ、またはテキストエンコーディングでのSQLレベル上の互換性問題がある可能性があります。問題は発見されたら修正されます。現在、PGプロトコルが使用されている時、ステートメントはキャンセルされません。

@advanced_1156_h3
セキュリティ考慮

@advanced_1157_p
現在、PGサーバーはchallenge response、またはパスワードの暗号化をサポートしていません。パスワードが読みやすいため、アタッカーがODBCドライバとサーバー間でのデータ転送を傾聴できる場合、これは問題になるでしょう。また、暗号化SSL接続も現在使用不可能です。そのため、ODBCドライバはセキュリティが重視される場面においては使用されるべきではありません。

@advanced_1158_h2
ACID

@advanced_1159_p
データベースの世界では、ACIDとは以下を表しています:

@advanced_1160_li
Atomicity (原子性) : トランザクションはアトミックでなければならず、全てのタスクが実行されたか、実行されないかの どちらかであるという意味です。

@advanced_1161_li
Consistency (一貫性) : 全てのオペレーションは定義された制約に従わなくてはいけません。

@advanced_1162_li
Isolation (独立性 / 分離性) : トランザクションはそれぞれ独立 (隔離) されていなくてはなりません。

@advanced_1163_li
Durability (永続性) : コミットされたトランザクションは失われません。

@advanced_1164_h3
Atomicity (原子性)

@advanced_1165_p
このデータベースでのトランザクションは常にアトミックです。

@advanced_1166_h3
Consistency (一貫性)

@advanced_1167_p
このデータベースは常に一貫性のある状態です。 参照整合性のルールは常に実行されます。

@advanced_1168_h3
Isolation (独立性 / 分離性)

@advanced_1169_p
H2は、他の多くのデータベースシステムと同様に、デフォルトの分離レベルは "read committed" です。これはより良いパフォーマンスを提供しますが、トランザクションは完全に分離されていないということも意味します。H2はトランザクション分離レベル "serializable"、"read committed"、"read uncommitted" をサポートしています。

@advanced_1170_h3
Durability (永続性)

@advanced_1171_p
このデータベースは、全てのコミットされたトランザクションが電源異常に耐えられるということを保証しません。全てのデータベースが電源異常の状況において、一部トランザクションが失われるということをテストは示しています (詳細は下記をご覧下さい)。トランザクションが失われることを容認できない場面では、ノートパソコン、またはUPS (無停電電源装置) を使用します。永続性がハードウェア異常の起こり得る全ての可能性に対して必要とされるのであれば、H2クラスタリングモードのようなクラスタリングが使用されるべきです。

@advanced_1172_h2
永続性問題

@advanced_1173_p
完全な永続性とは、全てのコミットされたトランザクションは電源異常に耐えられる、ということを意味します。 いくつかのデータベースは、永続性を保証すると主張していますが、このような主張は誤っています。 永続性テストはH2、HSQLDB、PostgreSQL、Derbyに対して実行されました。これらの全てのデータベースは、 時々コミットされたトランザクションを失います。このテストはH2ダウンロードに含まれています。 org.h2.test.poweroff.Test をご覧下さい。

@advanced_1174_h3
永続性を実現する (しない) 方法

@advanced_1175_p
失われなかったコミット済みトランザクションは、最初に思うよりもより複雑だということを理解して下さい。 完全な永続性を保障するためには、データベースは、コミットの呼び出しが返ってくる前に ログレコードがハードドライブ上にあることを確実にしなければなりません。 これを行うために、データベースは異なったメソッドを使用します。ひとつは "同期書き込み" ファイルアクセスモードを使用することです。Javaでは、RandomAccessFile はモード "rws" と "rwd" を サポートしています:

@advanced_1176_li
rwd: それぞれのファイル内容の更新は、元になるストレージデバイスと同時に書き込まれます。

@advanced_1177_li
rws: rwdに加えて、それぞれのメタデータの更新は同時に書き込まれます。

@advanced_1178_p
この特徴はDerbyで使用されています。それらのモードのうちのひとつは、テスト (org.h2.test.poweroff.TestWrite) において、毎秒およそ5万件の書き込み操作を実現します。オペレーティングシステムのライトバッファーが無効の時でさえも、 書き込み速度は毎秒およそ5万件です。この特徴はディスクを交換させるというものではありません。 なぜなら、全てのバッファーをフラッシュするのではないからです。テストはファイル内の同じバイトを何度も更新しました。 もしハードドライブがこの速度での書き込みが可能なら、ディスクは少なくても毎秒5万回転か、 または300万 RPM (revolutions per minute 回転毎分) を行う必要があります。 そのようなハードドライブは存在しません。テストで使用されたハードドライブは、およそ7200 RPM、または 毎秒120回転です。これがオーバーヘッドなので、最大書き込み速度はこれより低くなくてはなりません。

@advanced_1179_p
バッファーは fsync 関数を呼ぶことによってフラッシュされます。Javaでこれを行う二つの方法があります:

@advanced_1180_li
FileDescriptor.sync() ドキュメンテーションには、これは強制的に全てのシステムバッファーに基本となる デバイスとの同期を取らせる、と書かれています。このFileDescriptorに関連するバッファーのインメモリでの 変更コピーが全て物理メディアに書かれた後、Syncは返ることになっています。

@advanced_1181_li
FileChannel.force() (JDK 1.4 以来) このメソッドは、強制的にこのチャネルのファイルの更新は それを含むストレージデバイスに書き込まれることを行います。

@advanced_1182_p
デフォルトでは、MySQLはそれぞれのコミットごとに fsync を呼びます。それらのメソッドのうちひとつを使用している時、 毎秒およそ60件だけが実行され、使用されているハードドライブのRPM速度と一貫性があります。 残念ながら、FileDescriptor.sync() または FileChannel.force() を呼んだ時でさえも データは常にハードドライブに存続するとは限りません。なぜなら、多くのハードドライブは fsync() に従わないからです: http://hardware.slashdot.org/article.pl?sid=05/05/13/0529252 内の"Your Hard Drive Lies to You" をご覧下さい。Mac OS X では、fsync はハードドライブバッファーをフラッシュしません: http://lists.apple.com/archives/darwin-dev/2005/Feb/msg00072.html そのため状況は混乱していて、 問題があることをテストは証明しています。

@advanced_1183_p
ハードドライブバッファーを懸命にフラッシュしようと試みると、パフォーマンスは非常に悪いものになります。 最初に、ハードドライブは実際には全てのバッファーをフラッシュしているということを確かめることが必要です。 テストは信頼性ある方法でこれが行われていないことを示しています。その結果、トランザクションの最大数は毎秒およそ60件です。 これらの理由により、H2のデフォルト性質はコミットされたトランザクションの書き込みを遅らせることです。

@advanced_1184_p
H2では、電源異常の後、1秒以上のコミットされたトランザクションが失われます。 この性質を変更するためには。 SET WRITE_DELAY と CHECKPOINT SYNC を使用します。 多くの他のデータベースも同様に遅延コミットをサポートしています。パフォーマンス比較では、 遅延コミットは、サポートする全てのデータベースによって使用されました。

@advanced_1185_h3
永続性テストを実行する

@advanced_1186_p
このデータベースと他のデータベースの、永続性 / 非永続性テストを行うために、 パッケージ内 org.h2.test.poweroff のテストアプリケーションを使用することができます。 ネットワーク接続の二つのコンピューターがこのテストを実行するのに必要です。 ひとつのコンピューターは、他のコンピューター上でテストアプリケーションが実行されている間 (電源は切られています) ただ聞いています。リスナーアプリケーションのコンピューターは TCP/IP ポートを開き、 次の接続のために聞きます。二つ目のコンピューターは最初リスナーに接続し、データベースを作成して レコードの挿入を開始します。この接続は "autocommit" に設定されます。それぞれのレコード挿入後のコミットが 自動的に行われるという意味です。その後、テストコンピューターはこのレコードの挿入に成功したということを リスナーに通知します。リスナーコンピューターは10秒ごとに最後に挿入されたレコードを表示します。 電源を手動でOFFにしてコンピューターを再起動し、アプリケーションを再び実行します。 多くのケースで、リスナーコンピューターが知る全てのレコードを含むデータベースはないということがわかります。 詳細は、リスナーのソースコードとテストアプリケーションを参照して下さい。

@advanced_1187_h2
リカバーツールを使用する

@advanced_1188_p
リカバーツールはデータベースが破損している場合においても、 データファイルのコンテンツを復元するために使用されます。現段階では、ログファイルのコンテンツ、 または大きなオブジェクト (CLOB または BLOB) は復元しません。 このツールを実行するには、このコマンドラインをタイプして下さい:

@advanced_1189_p
現在のディレクトリのそれぞれのデータベースのために、テキストファイルが作られます。 このファイルには、データベースのスキーマを再び作成するために、行挿入ステートメント (データのための) と data definition (DDL) ステートメントを含んでいます。このファイルは、行挿入ステートメントが 正しいテーブル名を保持していないため、直接実行するこはできません。そのため、 ファイルは実行する前に手動で前処理を行う必要があります。

@advanced_1190_h2
ファイルロックプロトコル

@advanced_1191_p
データベースが開かれるときはいつも、データベースが使用中であると他のプロセスに合図するためにロックファイルが作成されます。もしデータベースが閉じられるか、データベースを開いたプロセスが終了するなら、ロックファイルは削除されます。

@advanced_1192_p
特別なケースでは (例えば、停電のためプロセスが正常に終了されなかった場合)、 ロックファイルは作られたプロセスによって削除されません。これは、ロックファイルの存在は、 ファイルロックのための安全なプロトコルではない、ということを意味しています。 しかし、このソフトウェアはデータベースファイルを守るため、challenge-responseプロトコルを使用します。 セキュリティ (同じデータベースファイルは、同時に二つのプロセスによって開かれてはいけない) と シンプリシティー (ロックファイルはユーザーによって手動で削除される必要がない) の両方を備えるために 二つのメソッド (アルゴリズム) が実行されます。二つのメソッドは、"Fileメソッド" と "Socketメソッド" です。

@advanced_1193_h3
ファイルロックメソッド "File"

@advanced_1194_p
データベースファイルロックのデフォルトメソッドは "Fileメソッド" です。アルゴリズム:

@advanced_1195_li
ロックファイルが存在しない時は、作成されます (アトミックオペレーション File.createNewFile を使用する)。 その時、プロセスは少し (20ms) 待機し、再びファイルをチェックします。 もしファイルがこの間に変更されたら、オペレーションは中止されます。 ロックファイルを作成したすぐ後にプロセスがロックファイルを削除する時、 これはレースコンディションから保護し、三番目のプロセスはファイルを再び作成します。 二つのライターしか存在しなければ、これは起こりません。

@advanced_1196_li
もしファイルが作成されたら、ロックメソッド ("file") でランダムな番号が一緒に挿入されます。 その後、ファイルが他のスレッド/ プロセスによって削除、または 修正された時、定期的にチェックする (デフォルトでは毎秒1回) watchdogスレッドは開始されます。 これが起きる時はいつも、ファイルは古いデータに上書きされます。システムが非常に混み合っている時でさえも、 非検出の状態で処理できないロックファイルを変更するために、watchdogスレッドは最優先に実行します。 しかし、watchdogスレッドはほとんどの時間待機しているため、非常に小さなリソース (CPU time) を使用します。 また、watchdogはハードディスクから読み取りのみ行い、書き込みはしません。

@advanced_1197_li
もしロックファイルが存在し、20ms内に変更されたら、プロセスは数回 (10回以上) 待機します。 まだ変更されていたら、例外が投げられます (データベースはロックされます)。 多数の並列ライターで競合している状態を排除するためにこれが行われます。 その後、ファイルは新しいバージョンに上書きされます。 そして、スレッドは2秒間待機します。もしファイルを保護するwatchdogスレッドが存在したら、 変更は上書きし、このプロセスはデータベースをロックするために機能しなくなります。 しかし、もしwatchdogスレッドが存在しなければ、ロックファイルはこのスレッドによって 書かれたままの状態です。このケースでは、ファイルは削除され、自動的にまた作成されます。 watchdogスレッドはこのケースでは起動され、ファイルはロックされます。

@advanced_1198_p
このアルゴリズムは100以上の並列スレッドでテストされました。いくつかのケースでは、 データベースをロックしようとする多数の並列スレッドが存在する時、それらはしばらくお互いをブロックします (それらのうちどれかがファイルをロックすることができないことを意味します)。 しかし、ファイルは同時に二つのスレッドによってロックされることは決してありません。 しかし、多数の並列スレッド / プロセスを使用することは一般的な使用ケースではありません。 通常、データベースを開くことができなかったり、(速い)ループのやり直しができなかったりした場合、 アプリケーションはユーザーにエラーを投げるべきです。

@advanced_1199_h3
ファイルロックメソッド "Socket"

@advanced_1200_p
実行される二つ目のロックメカニズムがありますが、 デフォルトでは使用不可です。アルゴリズムは:

@advanced_1201_li
ロックファイルが存在しない時は、作成されます。その時、サーバーソケットは定義されたポートで開かれ、 開かれた状態を保ちます。開かれたデータベースのプロセスのポートとIPアドレスはロックファイルの中に書かれています。

@advanced_1202_li
もしロックファイルが存在し、ロックメソッドが "file" なら、ソフトウェアは "file" メソッドにスイッチします。

@advanced_1203_li
もしロックファイルが存在し、ロックメソッドが "socket" なら、プロセスはポートが使用されているかチェックします。 最初のプロセスがまだ実行されていたら、ポートは使用されていれ、このプロセスは例外を投げます (database is in use)。 最初のプロセスが失われたら (例えば、停電または、仮想マシンの異常終了のため)、ポートは解除されます。 新しいプロセスはロックファイルを削除し、再び起動します。

@advanced_1204_p
このメソッドは、活発に毎秒同じファイルをポーリングする (読み込む) watchdogスレッドを必要としていません。 このメソッドの問題は、ファイルがネットワークシェアに保存されたら、二つのプロセスは (異なるコンピューターで実行中の)、 TCP/IP接続を直接保持していなければ、同じデータベースファイルを開くことができます。

@advanced_1205_h2
SQLインジェクションに対する防御

@advanced_1206_h3
SQLインジェクションとは

@advanced_1207_p
このデータベースエンジンは "SQLインジェクション" として知られる セキュリティ脆弱性の解決策を備えています。 これは、SQLインジェクションの意味とは何か、 についての短い説明です。いくつかのアプリケーションは、エンベッドユーザーがこのように入力する SQLステートメントを構築します:

@advanced_1208_p
このメカニズムがアプリケーションのどこかで使用され、ユーザー入力が正しくないフィルター処理、 またはエンベッドなら、ユーザーはパスワード: ' OR ''=' のような (この例の場合) 特別に作られた入力を使用することによって、SQLの機能、またはステートメントに入り込むことが可能です。 このケースでは、ステートメントはこのようになります:

@advanced_1209_p
データベースに保存されたパスワードが何であっても、これは常に正しいものになります。 SQLインジェクションについての詳細は、用語集とリンク をご覧下さい。

@advanced_1210_h3
リテラルを無効にする

@advanced_1211_p
ユーザー入力が直接SQLステートメントに組み込まれなければ、 SQLインジェクションは不可能です。上記の問題の簡単な解決方法は、PreparedStatementを使用することです:

@advanced_1212_p
このデータベースは、ユーザー入力をデータベースに通す時、パラメータの使用を強制する方法を提供しています。 SQLステートメントの組み込まれたリテラルを無効にすることでこれを実行します。 次のステートメントを実行します:

@advanced_1213_p
#Afterwards, SQL statements with text and number literals are not allowed any more. That means, SQL statement of the form WHERE NAME='abc' or WHERE CustomerId=10 will fail. It is still possible to use PreparedStatements and parameters as described above. Also, it is still possible to generate SQL statements dynamically, and use the Statement API, as long as the SQL statements do not include literals. There is also a second mode where number literals are allowed: SET ALLOW_LITERALS NUMBERS. To allow all literals, execute SET ALLOW_LITERALS ALL (this is the default setting). Literals can only be enabled or disabled by an administrator.

@advanced_1214_h3
定数を使用する

@advanced_1215_p
リテラルを無効にするということは、ハードコード化された "定数" リテラルを無効にする、 ということも意味します。このデータベースは、CREATE CONSTANT コマンドを使用して定数を定義することをサポートしています。 定数はリテラルが有効であるときのみ定義することができますが、リテラルが無効の時でも使用することができます。 カラム名の名前の衝突を避けるために、定数は他のスキーマで定義できます:

@advanced_1216_p
リテラルが有効の時でも、クエリーやビューの中でハードコード化された数値リテラル、 またはテキストリテラルの代わりに、定数を使用する方がより良いでしょう。With 定数では、タイプミスはコンパイル時に発見され、ソースコードは理解、変更しやすくなります。

@advanced_1217_h3
ZERO() 関数を使用する

@advanced_1218_p
組み込み関数 ZERO() がすでにあるため、 数値 0 のための定数を作る必要はありません:

@advanced_1219_h2
#Restricting Class Loading and Usage

@advanced_1220_p
#By default there is no restriction on loading classes and executing Java code for admins. That means an admin may call system functions such as System.setProperty by executing:

@advanced_1221_p
#To restrict users (including admins) from loading classes and executing code, the list of allowed classes can be set in the system property h2.allowedClasses in the form of a comma separated list of classes or patterns (items ending with '*'). By default all classes are allowed. Example:

@advanced_1222_p
#This mechanism is used for all user classes, including database event listeners, trigger classes, user defined functions, user defined aggregate functions, and JDBC driver classes (with the exception of the H2 driver) when using the H2 Console.

@advanced_1223_h2
セキュリティプロトコル

@advanced_1224_p
次の文章は、このデータベースで使用されている セキュリティプロトコルのドキュメントです。これらの記述は非常に専門的で、 根本的なセキュリティの基本をすでに知っているセキュリティ専門家のみを対象としています。

@advanced_1225_h3
ユーザーパスワードの暗号化

@advanced_1226_p
ユーザーがデータベースに接続しようとする時、ユーザー名の組み合わせ、@、パスワードは SHA-256 を使用してハッシュ化され、このハッシュ値はデータベースに送信されます。 この手順は、クライアントとサーバー間の転送をアタッカーが聞ける (非暗号化できる) のであれば、 再使用する値からのアタッカーを試みることはありません。しかし、パスワードはクライアントとサーバー間で 暗号化されていない接続を使用している時でさえも、プレーンテキストで送信されることはありません これはもしユーザーが、異なる場面で同じパスワードを再利用しても、このパスワードはある程度まで保護されます。 詳細は"RFC 2617 - HTTP Authentication: Basic and Digest Access Authentication" もご覧下さい。

@advanced_1227_p
新しいデータベース、またはユーザーが作られた時、暗号化された安全なランダムの 新しいsalt値が生成されます。salt値のサイズは 64 bit です。 ランダムなsaltを使用することによって、多数の異なった (通常、使用された) パスワードのハッシュ値を アタッカーに再計算されるリスクが軽減します。

@advanced_1228_p
ユーザーパスワードのハッシュ値の組み合わせと (上記をご覧下さい) saltは SHA-256を使用してハッシュ化されます。 結果の値はデータベースに保存されます。ユーザーがデータベースに接続しようとする時、 データベースは、保存されたsalt値のユーザーパスワードのハッシュ値と計算されたハッシュ値を結合します。 他の製品は複数の反復 (ハッシュ値を繰り返しハッシュする) を使用していますが、 この製品ではサービス攻撃の拒絶 (アタッカーが偽のパスワードで接続しようとするところや、 サーバーがそれぞれのパスワードのハッシュ値を計算するのに長い時間費やすところ) のリスクを軽減するのに これは使用しません。理由は: もしアタッカーがハッシュ化されたパスワードにアクセスしたら、 プレーンテキストのデータにもアクセスできるため、パスワードはもはや必要ではなくなってしまいます。 もしデータが、保存されている他のコンピューターによって保護されていて、遠隔のみであるなら、 反復回数は全く必要とされません。

@advanced_1229_h3
ファイル暗号化

@advanced_1230_p
データベースファイルは二つの異なるアルゴリズムを使用して、暗号化されます: AES-128 と XTEA です (32 ラウンドを使用)。 XTEAをサポートする理由はパフォーマンス (XTEAはAESのおよそ二倍の速さです) と、AESが突然壊れた場合、代わりとなるアルゴリズムを 持っているからです。

@advanced_1231_p
ユーザーが暗号化されたデータベースに接続しようとした時、"file" という単語と、@と、 ファイルパスワードの組み合わせは、SHA-256を使用してハッシュ化されます。 このハッシュ値はサーバーに送信されます。

@advanced_1232_p
新しいデータベースファイルが作られた時、暗号化された安全なランダムの新しいsalt値が生成されます。 このsaltのサイズは 64 bitです。ファイルパスワードのハッシュとsalt値の組み合わせは、 SHA-256を使用して1024回ハッシュ化されます。反復の理由は、アタッカーが通常のパスワードの ハッシュ値を計算するよりも困難にするためです。

@advanced_1233_p
ハッシュ値の結果は、ブロック暗号アルゴリズム (AES-128、または 32ラウンドのXTEA) のためのキーとして 使用されます。その時、初期化ベクター (IV) キーは、再びSHA-256を使用してキーをハッシュ化することによって 計算されます。IVはアタッカーに知らないということを確認して下さい。秘密のIVを使用する理由は、 ウォーターマークアタック (電子透かし攻撃) を防御するためです。

@advanced_1234_p
データのブロックを保存する前に (それぞれのブロックは 8 バイト長)、次のオペレーションを 実行します: 最初に、IVはIVキー (同じblock cipher algorithmを使用して) でブロックナンバーを 暗号化することによって計算されます。このIVはXORを使用してプレーンテキストと併用されます。 結果データはAES-128、またはXTEAアルゴリズムを使用して暗号化されます。

@advanced_1235_p
復号化の時、オペレーションは反対に行われます。最初に、ブロックはキーを使用して復号化され、 その時、IVはXORを使用して復号化テキストと併用されます。

@advanced_1236_p
その結果、オペレーションのブロック暗号モードはCBT (Cipher-block chaining) ですが、 それぞれの連鎖はたったひとつのブロック長です。ECB (Electronic codebook) モードに優る利点は、 データのパターンが明らかにされない点で、複数のブロックCBCに優る利点は、 はじき出された暗号テキストビットは次のブロックではじき出されたプレーンテキストビットに伝播されないという点です。

@advanced_1237_p
データベース暗号化は、使用されていない間は (盗まれたノートパソコン等) 安全なデータベースだということを 意味します。これは、データベースが使用されている間に、アタッカーがファイルにアクセスしたというケースを 意味するのではありません。アタッカーが書き込みアクセスをした時、例えば、 彼はファイルの一部を古いバージョンに置き換え、データをこのように操ります。

@advanced_1238_p
ファイル暗号化はデータベースエンジンのパフォーマンスを低速にします。非暗号化モードと比較すると、 データベースオペレーションは、XTEAを使用する時はおよそ2.2倍長くかかり、 AESを使用する時は2.5倍長くかかります (エンベッドモード)。

@advanced_1239_h3
SSL/TLS 接続

@advanced_1240_p
遠隔SSL/TLS接続は、Java Secure Socket Extension (SSLServerSocket / SSLSocket) の使用をサポートしています。デフォルトでは、匿名のSSLは使用可能です。デフォルトの暗号化パッケージソフトは SSL_DH_anon_WITH_RC4_128_MD5 です。

@advanced_1241_h3
HTTPS 接続

@advanced_1242_p
webサーバーは、SSLServerSocketを使用したHTTP と HTTPS接続をサポートします。 簡単に開始できるように、デフォルトの自己認証された証明書がありますが、 カスタム証明書も同様にサポートされています。

@advanced_1243_h2
汎用一意識別子 (UUID)

@advanced_1244_p
このデータベースはUUIDをサポートしています。 また、暗号化強力疑似乱数ジェネレーターを使用して新しいUUIDを作成する関数をサポートしています。 同じ値をもつ二つの無作為なUUIDが存在する可能性は、確率論を使用して計算されることができます。 "Birthday Paradox" もご覧下さい。標準化された無作為に生成されたUUIDは、122の無作為なビットを保持しています。 4ビットはバージョン(無作為に生成されたUUID) に、2ビットはバリアント (Leach-Salz) に使用されます。 このデータベースは組み込み関数 RANDOM_UUID() を使用してこのようなUUIDを生成することをサポートしています。 ここに、値の数字が生成された後、二つの 同一のUUIDが生じる可能性を見積もる小さなプログラムがあります:

@advanced_1245_p
いくつかの値は:

@advanced_1246_p
人の隕石に衝突するという年に一度の危険性は、170億に一回と見積もられ、それは、確率がおよそ 0.000'000'000'06 だということを意味しています。

@advanced_1247_h2
システムプロパティから読み込まれた設定

@advanced_1248_p
いくつかのデータベースの設定は、-DpropertyName=value を使用してコマンドラインで設定することができます。 通常、これらの設定は手動で変更することは必要とされていません。設定は大文字と小文字を区別しています。 例:

@advanced_1249_p
現在の設定の値は、INFORMATION_SCHEMA.SETTINGS テーブルで読み込むことが可能です。

@advanced_1250_th
設定

@advanced_1251_th
デフォルト

@advanced_1252_th
説明

@advanced_1253_td
#h2.allowedClasses

@advanced_1254_td
#*

@advanced_1255_td
#Comma separated list of class names or prefixes

@advanced_1256_td
h2.check

@advanced_1257_td
true

@advanced_1258_td
データベースエンジンでのアサーション

@advanced_1259_td
h2.check2

@advanced_1260_td
false

@advanced_1261_td
追加されたアサーション

@advanced_1262_td
h2.clientTraceDirectory

@advanced_1263_td
trace.db/

@advanced_1264_td
JDBCクライアントのトレースファイルが保存されているディレクトリ (クライアント / サーバーのみ)

@advanced_1265_td
h2.emergencySpaceInitial

@advanced_1266_td
1048576

@advanced_1267_td
ディスクの全ての問題を早く検出する "reserve" ファイルのサイズ

@advanced_1268_td
h2.emergencySpaceMin

@advanced_1269_td
131072

@advanced_1270_td
"reserve" ファイルの最小サイズ

@advanced_1271_td
h2.lobCloseBetweenReads

@advanced_1272_td
false

@advanced_1273_td
読み込みオペレーションの間にLOBファイルを閉じる

@advanced_1274_td
h2.lobFilesInDirectories

@advanced_1275_td
false

@advanced_1276_td
LOBファイルをサブディレクトリに保存する

@advanced_1277_td
h2.lobFilesPerDirectory

@advanced_1278_td
256

@advanced_1279_td
ディレクトリごとのLOBファイルの最大数

@advanced_1280_td
h2.logAllErrors

@advanced_1281_td
false

@advanced_1282_td
ファイルにどのの種類のエラーのスタックトレースを書き込む

@advanced_1283_td
h2.logAllErrorsFile

@advanced_1284_td
h2errors.txt

@advanced_1285_td
エラーを記録するファイル名

@advanced_1286_td
h2.maxFileRetry

@advanced_1287_td
16

@advanced_1288_td
再試行ファイルの削除と改名の回数

@advanced_1289_td
h2.objectCache

@advanced_1290_td
true

@advanced_1291_td
一般に使用されるオブジェクトをキャッシュする (integer、string)

@advanced_1292_td
h2.objectCacheMaxPerElementSize

@advanced_1293_td
4096

@advanced_1294_td
キャッシュのオブジェクトの最大サイズ

@advanced_1295_td
h2.objectCacheSize

@advanced_1296_td
1024

@advanced_1297_td
オブジェクトキャッシュのサイズ

@advanced_1298_td
h2.optimizeEvaluatableSubqueries

@advanced_1299_td
true

@advanced_1300_td
外部クエリに依存していないサブクエリの最適化

@advanced_1301_td
h2.optimizeIn

@advanced_1302_td
true

@advanced_1303_td
最適化 IN(...) 比較

@advanced_1304_td
h2.optimizeMinMax

@advanced_1305_td
true

@advanced_1306_td
最適化 MIN と MAX の集合関数

@advanced_1307_td
h2.optimizeSubqueryCache

@advanced_1308_td
true

@advanced_1309_td
サブクエリの結果をキャッシュ

@advanced_1310_td
h2.overflowExceptions

@advanced_1311_td
true

@advanced_1312_td
integerのオーバーフローに例外を投げる

@advanced_1313_td
h2.recompileAlways

@advanced_1314_td
false

@advanced_1315_td
常にprepared statementを再コンパイルする

@advanced_1316_td
h2.redoBufferSize

@advanced_1317_td
262144

@advanced_1318_td
redo bufferのサイズ (回復時に起動で使用)

@advanced_1319_td
#h2.runFinalize

@advanced_1320_td
true

@advanced_1321_td
閉じられていない接続を検出するために finalizers を実行する

@advanced_1322_td
h2.scriptDirectory

@advanced_1323_td
スクリプトファイルが保存されるか、読み込まれる相対、または絶対ディレクトリ

@advanced_1324_td
h2.serverCachedObjects

@advanced_1325_td
64

@advanced_1326_td
TCPサーバー: セッションごとのキャッシュオブジェクトの数

@advanced_1327_td
h2.serverSmallResultSetSize

@advanced_1328_td
100

@advanced_1329_td
TCPサーバー: このサイズ以下のresult setがひとつのブロックに送信される

@advanced_1330_h2
用語集とリンク

@advanced_1331_th
用語

@advanced_1332_th
説明

@advanced_1333_td
AES-128

@advanced_1334_td
ブロック暗号化アルゴリズム。こちらもご覧下さい:<a href="http://en.wikipedia.org/wiki/Advanced_Encryption_Standard">Wikipedia: AES</a>

@advanced_1335_td
Birthday Paradox

@advanced_1336_td
部屋にいる二人が同じ誕生日の可能性が期待された以上に高いということを説明する。 また、有効なランダムに生成されたUUID。こちらもご覧下さい:<a href="http://en.wikipedia.org/wiki/Birthday_paradox">Wikipedia: Birthday Paradox</a>

@advanced_1337_td
Digest

@advanced_1338_td
パスワードを保護するプロトコル (データは保護しません)。こちらもご覧下さい:<a href="http://www.faqs.org/rfcs/rfc2617.html">RFC 2617: HTTP Digest Access Authentication</a>

@advanced_1339_td
GCJ

@advanced_1340_td
JavaのGNUコンパイラー<a href="http://gcc.gnu.org/java/">http://gcc.gnu.org/java/</a> and <a href="http://nativej.mtsystems.ch">http://nativej.mtsystems.ch/ (not free any more)</a>

@advanced_1341_td
HTTPS

@advanced_1342_td
セキュリティをHTTP接続に提供するプロトコル。こちらもご覧下さい: <a href="http://www.ietf.org/rfc/rfc2818.txt">RFC 2818: HTTP Over TLS</a>

@advanced_1343_td
Modes of Operation

@advanced_1344_a
Wikipedia: Block cipher modes of operation

@advanced_1345_td
Salt

@advanced_1346_td
パスワードのセキュリティを増大する乱数。こちらもご覧下さい: <a href="http://en.wikipedia.org/wiki/Key_derivation_function">Wikipedia: Key derivation function</a>

@advanced_1347_td
SHA-256

@advanced_1348_td
暗号化の一方方向のハッシュ関数。こちらもご覧下さい:<a href="http://en.wikipedia.org/wiki/SHA_family">Wikipedia: SHA hash functions</a>

@advanced_1349_td
SQLインジェクション

@advanced_1350_td
組み込みのユーザー入力でアプリケーションがSQLステートメントを生成するセキュリティ脆弱性 こちらもご覧下さい:<a href="http://en.wikipedia.org/wiki/SQL_injection">Wikipedia: SQL Injection</a>

@advanced_1351_td
Watermark Attack (透かし攻撃)

@advanced_1352_td
復号化することなくあるデータの存在を証明できる、ある暗号化プログラムのセキュリティ問題。 詳細は、インターネットで "watermark attack cryptoloop" を検索して下さい。

@advanced_1353_td
SSL/TLS

@advanced_1354_td
Secure Sockets Layer / Transport Layer Security。こちらもご覧下さい: <a href="http://java.sun.com/products/jsse/">Java Secure Socket Extension (JSSE)</a>

@advanced_1355_td
XTEA

@advanced_1356_td
ブロック暗号化アルゴリズム。こちらもご覧下さい: <a href="http://en.wikipedia.org/wiki/XTEA">Wikipedia: XTEA</a>

@build_1000_h1
ビルド

@build_1001_a
ポータビリティ

@build_1002_a
環境

@build_1003_a
ソフトウェアのビルド

@build_1004_a
Maven 2 の利用

@build_1005_a
#Translating

@build_1006_h2
ポータビリティ

@build_1007_p
このデータベースはJavaによって記述されているため、多くのプラットフォームで動作します。また、GCJを利用することで、ネイティブでも実行可能に(ネイティブコードに)コンパイルすることが可能です

@build_1008_h2
環境

@build_1009_p
#A Java Runtime Environment (JRE) version 1.4 or higher is required to run this database.

@build_1010_p
#To build the database executables, the following software stack was used. Newer version or compatible software works too.

@build_1011_li
Windows XP

@build_1012_li
#Sun JDK Version 1.4

@build_1013_li
Apache Ant Version 1.6.5

@build_1014_li
Mozilla Firefox 1.5

@build_1015_li
Eclipse Version 3.2.2

@build_1016_li
YourKit Java Profiler

@build_1017_h2
ソフトウェアのビルド

@build_1018_p
コマンドライン上でsrcディレクトリに移動し、以下のコマンドを実行してください:

@build_1019_p
実行するとターゲットのリストが得られます。jarファイルをビルドしたい場合は、以下を実行してください:

@build_1020_p
JDBC APIを実装し、サーバーにのみ接続するクラスを持つjarファイルをビルドするには、jarCliantターゲットを用います:

@build_1021_p
これ以外のターゲットも実行が可能でしょう

@build_1022_h2
Maven 2 の利用

@build_1023_h3
Centralリポジトリの利用

@build_1024_p
依存関係を取ることで、Maven 2プロジェクトでデータベースを組み込むことも可能です。例:

@build_1025_p
#New versions of this database are first uploaded to http://hsql.sourceforge.net/m2-repo/ and then automatically synchronized with the main maven repository; however after a new release it may take a few hours before they are available there.

@build_1026_h3
スナップショットバージョンの利用

@build_1027_p
スナップショット版のH2.jarファイルをビルドし、ローカルのMaven2リポジトリを更新するには以下のコマンドを実行します:

@build_1028_p
実行後、Maven2プロジェクトにH2DBを依存させ組み込むことが出来るようになります:

@build_1029_h2
#Translating

@build_1030_p
#The translation of this software is split into the following parts:

@build_1031_li
#H2 Console: src/main/org/h2/server/web/res/_text_*.properties

@build_1032_li
#Error messages: src/main/org/h2/res/_messages_*.properties

@build_1033_li
#Web site: src/docsrc/text/_docs_*.utf8.txt

@build_1034_p
#The conversion between UTF-8 and Java encoding (using the \u syntax), as well as the HTML entities (&#..;) is automated by running the tool PropertiesToUTF8. The web site translation is automated as well, using <code>ant docs</code> .

@download_1000_h1
ダウンロード

@download_1001_h3
#Version 1.0.64 (2007-12-26, Current)

@download_1002_a
Windows Installer

@download_1003_a
Platform-Independent Zip

@download_1004_h3
#Version 1.0.63 (2007-12-02, Last Stable)

@download_1005_a
Windows Installer

@download_1006_a
Platform-Independent Zip

@download_1007_h3
#Download Mirror and Older Versions

@download_1008_a
Platform-Independent Zip

@download_1009_h3
サブバージョンのソースリポジトリ

@download_1010_a
Google Code

@download_1011_p
変更についての詳細は、<a href="history.html">変更ログ</a> をご覧下さい。

@faq_1000_h1
F A Q

@faq_1001_a
発見されたバグはありますか？次のリリースはいつになりますか？

@faq_1002_a
このデータベースエンジンはオープンソースですか？

@faq_1003_a
クエリ実行に時間がかかります

@faq_1004_a
新規データベースの構築方法は？

@faq_1005_a
データベースへの接続方法は？

@faq_1006_a
データベースのファイルはどこに保存されますか？

@faq_1007_a
データベースのサイズ制限 (最大サイズ) はどれくらいですか？

@faq_1008_a
これは信頼できるデータベースですか？

@faq_1009_a
GCJバージョンでの動作は安定していますか？高速ですか？

@faq_1010_a
このプロジェクトの翻訳方法は？

@faq_1011_h3
発見されたバグはありますか？次のリリースはいつになりますか？

@faq_1012_p
#Usually, bugs get fixes as they are found. There is a release every few weeks. Here is the list of known and confirmed issues:

@faq_1013_li
ライトアウタージョイン(右外部結合)時に一部問題が発生。内部において、他の結合と組み合わせて使用される時、他のデータベースと同様に、常に同じ結果を引き起こすとは限らないレフトアウタージョイン(左外部結合)に変換される

@faq_1014_h3
このデータベースエンジンはオープンソースですか？

@faq_1015_p
はい、H2DBはフリーウェアであり、再配布も可能です。ソースコードも含まれています。ライセンスページも合わせてご確認ください。

@faq_1016_h3
クエリ実行に時間がかかります

@faq_1017_p
SELECT (または DELETE、UPDATE、MERGE) ステートメント実行に時間がかかるのはいくつかの理由が考えられます。以下のチェックリストをご確認ください:

@faq_1018_li
ANALYZEを実行する (詳細はドキュメントをご覧下さい)

@faq_1019_li
クエリにEXPLAINオプションを付けて実行し、インデックスが利用されているかどうか確認する (詳細はドキュメントをご覧下さい)

@faq_1020_li
必要に応じてインデックスを追加し、ANALYZE、EXPLAINオプションを用いて再度クエリを実行する

@faq_1021_li
それでも解決しない場合は、ご連絡ください

@faq_1022_h3
新規データベースの構築方法は？

@faq_1023_p
データベースがまだ存在しない場合、デフォルト設定では自動的に新規作成されます

@faq_1024_h3
データベースへの接続方法は？

@faq_1025_p
データベースドライバは <code>org.h2.Driver</code> で、データベースURLは <code>jdbc:h2:</code> で始まります。JDBCを利用してデータベースに接続する場合は、以下のコードを利用して下さい:

@faq_1026_h3
データベースのファイルはどこに保存されますか？

@faq_1027_p
jdbc:h2:~/test のようなデータベースURLを利用している場合は、データベースはユーザーディレクトリに保存されます。Windowsでは通常、C:\Documents and Settings\&lt;ユーザー名&gt; です。もしベースディレクトリが設定されていない場合 (jdbc:h2:test 内に)、データベースファイルはアプリケーションが起動されるディレクトリ (作業中のディレクトリ) に保存されます。スタートメニューからH2コンソールアプリケーションを起動している場合、[インストール先ディレクトリ]/bin下に保存されます。ベースディレクトリはデータベースURLで設定できます。絶対パス、または相対パスが利用できます。jdbc:h2:file:data/sample のURLを利用している場合、データベースはディレクトリデータの中に保存されます (現在作業中のディレクトリに関連します)。ディレクトリは必ず存在するものでなければいけません。また、完全に適切なディレクトリ名(Windows、ドライバ名)を利用することも可能です。例: jdbc:h2:file:C:/data/test

@faq_1028_h3
データベースのサイズ制限 (最大サイズ) はどれくらいですか？

@faq_1029_p
理論上のデータの制限は現在256GBです。これはBLOBとCLOBデータを含まない状態での値です: BLOB、CLOBの最大値はそれぞれ256GB以上の設定が可能です。インデックスデータのサイズ制限も同様に256GBです。

@faq_1030_p
FAT、FAT32ファイルシステムの最大ファイルサイズは4GBです。よって、FATやFAT32を利用する場合は、データの制限は4GBということになります。

@faq_1031_h3
これは信頼できるデータベースですか？

@faq_1032_p
#That is not easy to say. It is still a quite new product. A lot of tests have been written, and the code coverage of these tests is very high. Randomized stress tests are run regularly. But as this is a relatively new product, there are probably some problems that have not yet been found. Areas that are not fully tested:

@faq_1033_li
WindowsXP以外のプラットフォーム、及びSUN JVM1.4、1.5での動作確認

@faq_1034_li
#The MVCC (multi version concurrency) mode

@faq_1035_li
クラスタモード、2フェーズコミット、セーブポイント

@faq_1036_li
マルチスレッドと複数接続の利用

@faq_1037_li
24/7オペレーション、大容量データベース (500MB以上)

@faq_1038_li
Updatable result sets

@faq_1039_li
参照整合性とCHECK制約、トリガー

@faq_1040_li
ALTER TABLE ステートメント、ビュー、リンクテーブル、スキーマ、UNION

@faq_1041_li
すべての組み込み関数が完全にテストされたわけではありません

@faq_1042_li
オプティマイザが必ずしも最良を選択するとは限らない

@faq_1043_li
データ型 BLOB、CLOB、VARCHAR_IGNORECASE、OTHER

@faq_1044_li
サーバーモード(十分にテストはしてありますが、組み込みモードほどではありません)

@faq_1045_li
大きなVARCHAR、VARBINARYカラム、または多数のカラムによる幅の広いインデックス

@faq_1046_p
試験的に考慮された箇所は以下の通り:

@faq_1047_li
#The PostgreSQL server

@faq_1048_li
ライナーハッシュインデックス

@faq_1049_li
他のデータベースとの互換モード (一部の特徴のみ提供される)

@faq_1050_li
#The ARRAY data type and related functionality

@faq_1051_h3
GCJバージョンでの動作は安定していますか？高速ですか？

@faq_1052_p
GCJバージョンは、Javaバージョンほどは安定していません。GCJバージョンでリグレッションテストを実行した時、アプリケーションはランダムポイントと思われるところで、エラーメッセージなしで停止する場合があります。現在、GCJバージョンはSun VMの使用時よりも低速です。しかし、GCJバージョンの起動はVM使用時よりも高速です。

@faq_1053_h3
このプロジェクトの翻訳方法は？

@faq_1054_p
#For more information, see <a href="build.html#translating">Build/Translating</a> .

@features_1000_h1
特徴

@features_1001_a
特徴一覧

@features_1002_a
#Limitations

@features_1003_a
他のデータベースエンジンと比較する

@features_1004_a
#H2 in Use

@features_1005_a
接続モード

@features_1006_a
データベースURL概要

@features_1007_a
メモリオンリーデータベース

@features_1008_a
暗号化ファイルと共にデータベースへ接続する

@features_1009_a
データベースファイルロック

@features_1010_a
すでに存在する場合のみ、データベースを開く

@features_1011_a
データベースを終了する

@features_1012_a
ログインデックスの修正

@features_1013_a
カスタムファイル アクセスモード

@features_1014_a
複数の接続

@features_1015_a
データベースファイルレイアウト

@features_1016_a
ログとリカバリー

@features_1017_a
互換性

@features_1018_a
トレースオプションを使用する

@features_1019_a
読み取り専用データベース

@features_1020_a
#Read Only Databases in Zip or Jar File

@features_1021_a
バイナリーとテキストストレージフォーマット

@features_1022_a
ディスクスペースが少ない状況での正しい取り扱い

@features_1023_a
computed column / ベースインデックスの機能

@features_1024_a
多次元インデックス

@features_1025_a
パスワードを使用する

@features_1026_a
ユーザー定義の関数とストアドプロシージャ

@features_1027_a
トリガー

@features_1028_a
データベースをコンパクトにする

@features_1029_a
キャッシュの設定

@features_1030_a
なぜJavaなのか

@features_1031_h2
特徴一覧

@features_1032_h3
主な特徴

@features_1033_li
非常に高速なデータベースエンジン

@features_1034_li
無料、ソースコード付き

@features_1035_li
Javaで記載

@features_1036_li
標準規格のSQL、JDBC APIをサポート

@features_1037_li
エンベッドモードとサーバーモード、クラスタリングをサポート

@features_1038_li
強力なセキュリティ機能

@features_1039_li
試験用のネイティブバージョン (GCJ) とODBCドライバ

@features_1040_h3
追加された特徴

@features_1041_li
ディスクベースデータベース、またはインメモリデータベースと、テーブル、読み取り専用データベースをサポート、テンポラリテーブル

@features_1042_li
トランザクションをサポート (トランザクション分離の serializable (直列化))、2フェーズコミット

@features_1043_li
複数の接続、テーブルレベルのロック

@features_1044_li
コストベースオプティマイザ、複雑なクエリーのために遺伝的アルゴリズムを使用、zero-administration

@features_1045_li
スクロール可能result setと更新可能result setをサポート、大きなresult set、外部結果ソート、 関数はresult setを返す

@features_1046_li
暗号化されたデータベース (AES または XTEA), SHA-256 パスワード暗号化、暗号化関数、SSL

@features_1047_h3
SQLサポート

@features_1048_li
複数のスキーマ、インフォメーションスキーマをサポート

@features_1049_li
参照整合性 / カスケードでの外部キー制約、チェック制約

@features_1050_li
内部結合と外部結合、サブクエリー、読み取り専用ビューとインラインビュー

@features_1051_li
トリガーと Java関数 / ストアドプロシージャ

@features_1052_li
多数の組み込み関数、XMLとlossless data compression (可逆圧縮) を含む

@features_1053_li
大きなオブジェクト (BLOB/CLOB) とArrayを含む、広い範囲のデータ型

@features_1054_li
シーケンスとautoincrement column、computed column、(関数ベースのインデックスに使用できます)

@features_1055_li
ORDER BY, GROUP BY, HAVING, UNION, LIMIT, TOP

@features_1056_li
Collationをサポート、users、roles

@features_1057_li
HSQLDB、MySQLとPostgreSQLのための互換モード

@features_1058_h3
セキュリティの特徴

@features_1059_li
SQLインジェクション問題の解決を含む

@features_1060_li
SHA-256とsaltを使ってユーザーパスワードが本物であることを証明する

@features_1061_li
ユーザーパスワードは決してプレーンテキストでネットワーク上に送信されることはない (たとえ不安定な接続を使用していたとしても)

@features_1062_li
AES-256とXTEA暗号化アルゴリズムを使用することで、全てのデータベースファイル (データのバックアップを取るのに使用できるスクリプトファイルを含む) を暗号化できる

@features_1063_li
リモートJDBCドライバは、SSL/TLS上のTCP/IP接続をサポート

@features_1064_li
組み込みwebサーバーは、SSL/TLS上の接続をサポート

@features_1065_li
Stringの代わりにchar arrayを使うことで、パスワードをデータベースに送信可能

@features_1066_h3
他の特徴とツール

@features_1067_li
省スペース (1MBより小さい)、少ないメモリが必要条件

@features_1068_li
複数のインデックスタイプ (b-tree、tree、hash、linear hash)

@features_1069_li
多次元のインデックスをサポート

@features_1070_li
CSV (comma separated values) ファイルサポート

@features_1071_li
リンクテーブルと組み込み仮想 "range" テーブルのサポート

@features_1072_li
EXPLAIN PLANをサポート、 洗練されたトレースオプション

@features_1073_li
パフォーマンスを向上させるために、データベースの終了を遅らせるか割り込みを抑制する

@features_1074_li
Webベースのコンソールアプリケーション (英語、ドイツ語、部分的にフランス語とスペイン語) が自動完備

@features_1075_li
データベースはSQLスクリプトファイルを生成

@features_1076_li
データファイルのコンテンツを移動することができるリカバリーツールを含む

@features_1077_li
prepared statementの自動再編集

@features_1078_li
少数のデータベースファイル、バイナリー、テキストストレージ形式を使用、ディスクスペースが少ない状況での正しい取り扱い

@features_1079_li
各レコードのためのチェックサムと、データ整合性のためのログエントリーを使用

@features_1080_li
十分なテスト済み (高いコードカバー率、ランダムストレステスト)

@features_1081_h2
#Limitations

@features_1082_p
#For the list of limitations, please have a look at the road map page at: <a href="http://groups.google.com/group/h2-database/web/roadmap">http://groups.google.com/group/h2-database/web/roadmap</a>

@features_1083_h2
他のデータベースエンジンと比較する

@features_1084_th
特徴

@features_1085_th
H2

@features_1086_th
Derby

@features_1087_th
HSQLDB

@features_1088_th
MySQL

@features_1089_th
PostgreSQL

@features_1090_td
エンベッドモード (Java)

@features_1091_td
対応

@features_1092_td
対応

@features_1093_td
対応

@features_1094_td
非対応

@features_1095_td
非対応

@features_1096_td
Pure Java

@features_1097_td
対応

@features_1098_td
対応

@features_1099_td
対応

@features_1100_td
非対応

@features_1101_td
非対応

@features_1102_td
パフォーマンス (エンベッド)

@features_1103_td
速い

@features_1104_td
遅い

@features_1105_td
速い

@features_1106_td
該当なし

@features_1107_td
該当なし

@features_1108_td
トランザクション分離

@features_1109_td
対応

@features_1110_td
対応

@features_1111_td
非対応

@features_1112_td
対応

@features_1113_td
対応

@features_1114_td
コストベースオプティマイザ

@features_1115_td
対応

@features_1116_td
対応

@features_1117_td
非対応

@features_1118_td
対応

@features_1119_td
対応

@features_1120_td
クラスタリング

@features_1121_td
対応

@features_1122_td
非対応

@features_1123_td
非対応

@features_1124_td
対応

@features_1125_td
対応

@features_1126_td
暗号化データベース

@features_1127_td
対応

@features_1128_td
対応

@features_1129_td
非対応

@features_1130_td
非対応

@features_1131_td
非対応

@features_1132_td
データベースごとのファイル

@features_1133_td
少

@features_1134_td
多

@features_1135_td
少

@features_1136_td
多

@features_1137_td
多

@features_1138_td
フットプリント (jar/dll size)

@features_1139_td
~ 1 MB

@features_1140_td
~ 2 MB

@features_1141_td
~ 600 KB

@features_1142_td
~ 4 MB

@features_1143_td
~ 6 MB

@features_1144_h3
DerbyとHSQLDB

@features_1145_p
予期しない過程での終了後 (例：電源異常)、H2はユーザーの相互作用なしで安全に、自動的に回復することができます。DerbyとHSQLDBでは、いくつかの手動のステップが必要とされます ('Another instance of Derby may have already booted the database' / 'The database is already in use by another process')。

@features_1146_h3
DaffodilDbとOne$Db

@features_1147_p
このデータベースの開発は止まっているようです。最後のリリースは2006年2月でした。

@features_1148_h3
McKoi

@features_1149_p
このデータベースの開発は止まっているようです。最後のリリースは2004年8月でした。

@features_1150_h2
#H2 in Use

@features_1151_p
#For a list of applications that work with or use H2, see: <a href="http://groups.google.com/group/h2-database/web/h2-in-use">http://groups.google.com/group/h2-database/web/h2-in-use</a>

@features_1152_h2
接続モード

@features_1153_p
以下の接続モードがサポートされています:

@features_1154_li
JDBC (エンベッド) を使用しているローカル接続

@features_1155_li
TCP/IP上でJDBCを使用しているリモート接続 (クライアント/サーバー)

@features_1156_li
TCP/IP上でODBCを使用しているリモート接続 (クライアント/サーバー)

@features_1157_li
インメモリデータベース (プライベートと共有)

@features_1158_h2
データベースURL概要

@features_1159_p
このデータベースは、データベースに接続している時、複数の接続モードと特徴をサポートしています。これは、異なったデータベースのURLを使用することにより可能となります。URLの設定は大文字と小文字を区別していません。

@features_1160_th
トピック

@features_1161_th
URLフォーマットと例

@features_1162_td
エンベッド (ローカル) 接続

@features_1163_td
jdbc:h2:[file:][&lt;path&gt;]&lt;databaseName&gt;

@features_1164_td
jdbc:h2:~/test

@features_1165_td
jdbc:h2:file:/data/sample

@features_1166_td
jdbc:h2:file:C:/data/sample (Windowsのみ)

@features_1167_td
インメモリ (プライベート)

@features_1168_td
jdbc:h2:mem:

@features_1169_td
インメモリ (名付ける)

@features_1170_td
jdbc:h2:mem:&lt;databaseName&gt;

@features_1171_td
jdbc:h2:mem:test_mem

@features_1172_td
TCP/IPを使用したリモート

@features_1173_td
jdbc:h2:tcp://&lt;server&gt;[:&lt;port&gt;]/&lt;databaseName&gt;

@features_1174_td
jdbc:h2:tcp://localhost/test

@features_1175_td
jdbc:h2:tcp://dbserv:8084/sample

@features_1176_td
SSL/TLSを使用したリモート

@features_1177_td
jdbc:h2:ssl://&lt;server&gt;[:&lt;port&gt;]/&lt;databaseName&gt;

@features_1178_td
jdbc:h2:ssl://secureserv:8085/sample;

@features_1179_td
暗号化ファイルの使用

@features_1180_td
jdbc:h2:&lt;url&gt;;CIPHER=[AES|XTEA]

@features_1181_td
jdbc:h2:ssl://secureserv/testdb;CIPHER=AES

@features_1182_td
jdbc:h2:file:~/secure;CIPHER=XTEA

@features_1183_td
ファイルロックメソッド

@features_1184_td
jdbc:h2:&lt;url&gt;;FILE_LOCK={NO|FILE|SOCKET}

@features_1185_td
jdbc:h2:file:~/quickAndDirty;FILE_LOCK=NO

@features_1186_td
jdbc:h2:file:~/private;CIPHER=XTEA;FILE_LOCK=SOCKET

@features_1187_td
すでに存在する場合は起動のみ

@features_1188_td
jdbc:h2:&lt;url&gt;;IFEXISTS=TRUE

@features_1189_td
jdbc:h2:file:~/sample;IFEXISTS=TRUE

@features_1190_td
VMが終了した時、データベースを終了しない

@features_1191_td
jdbc:h2:&lt;url&gt;;DB_CLOSE_ON_EXIT=FALSE

@features_1192_td
ユーザー名、及びパスワード

@features_1193_td
jdbc:h2:&lt;url&gt;[;USER=&lt;username&gt;][;PASSWORD=&lt;value&gt;]

@features_1194_td
jdbc:h2:file:~/sample;USER=sa;PASSWORD=123

@features_1195_td
ログインデックスの修正

@features_1196_td
jdbc:h2:&lt;url&gt;;LOG=2

@features_1197_td
jdbc:h2:file:~/sample;LOG=2

@features_1198_td
デバックトレースの設定

@features_1199_td
jdbc:h2:&lt;url&gt;;TRACE_LEVEL_FILE=&lt;level 0..3&gt;

@features_1200_td
jdbc:h2:file:~/sample;TRACE_LEVEL_FILE=3

@features_1201_td
未知の設定を無視

@features_1202_td
jdbc:h2:&lt;url&gt;;IGNORE_UNKNOWN_SETTINGS=TRUE

@features_1203_td
カスタムファイル アクセスモード

@features_1204_td
jdbc:h2:&lt;url&gt;;ACCESS_MODE_LOG=rws;ACCESS_MODE_DATA=rws

@features_1205_td
インメモリ (プライベート)

@features_1206_td
jdbc:h2:mem:

@features_1207_td
#Database in or Zip File

@features_1208_td
#jdbc:h2:zip:&lt;zipFileName&gt;!/&lt;databaseName&gt;

@features_1209_td
#jdbc:h2:zip:db.zip!/test

@features_1210_td
他の設定の変更

@features_1211_td
jdbc:h2:&lt;url&gt;;&lt;setting&gt;=&lt;value&gt;[;&lt;setting&gt;=&lt;value&gt;...]

@features_1212_td
jdbc:h2:file:~/sample;TRACE_LEVEL_SYSTEM_OUT=3

@features_1213_h3
エンベッド (ローカル) データベースに接続

@features_1214_p
ローカルデータベースに接続するためのデータベースURLは、<code>jdbc:h2:[file:][&lt;path&gt;]&lt;databaseName&gt;</code> です。接頭辞 <code>file:</code> はオプションです。相対パスが使われていない、または相対パスのみ使われている場合、現在作業しているディレクトリは、スターティングポイントとして使われます。パスとデータベース名の大文字と小文字の区別はOSに依存されますが、小文字のみの使用が推奨されています。データベース名は少なくとも3文字でなくてはなりません (File.createTempFile の制限)。ユーザーホームディレクトリを示すために、~/ を次のように使用します: jdbc:h2:~/test

@features_1215_h2
メモリオンリーデータベース

@features_1216_p
特定の使用方法では (例: rapid prototyping、テスト、高パフォーマンスオペレーション、読み取り専用データベース)、データは持続する (変化する) 必要は全くないかもしれません。このデータベースは、データが持続しない際にメモリオンリーモードをサポートします。

@features_1217_p
一部ケースでは、メモリオンリーデータベースへの接続はひとつの接続のみ必要とされます。これは、開かれるデータベースがプライベートだということを意味しています。このケースでは、データベースURLは <CODE>jdbc:h2:mem:</CODE> です。同じ仮想マシン内で二つの接続が開いているというのは、二つの異なった (プライベートの) データベースが開いているという意味です。

@features_1218_p
時々、複数の接続が同じメモリオンリーデータベースを必要とします。このケースでは、データベースのURLに名前が含まれていなければなりません。例: <code>jdbc:h2:mem:db1</code> この方法での同じデータベースのアクセスは、同じ仮想マシンとClassLoader環境内でのみ動作します。

@features_1219_p
TCP/IPまたは、SSL/TLSを使用して、メモリオンリーデータベースに間接的に (または、同じマシンの複数のプロセスから) 接続することも可能です。データベースURLの例: <code>jdbc:h2:tcp://localhost/mem:db1</code> (プライベートデータベースを間接的に使用することも可能です)

@features_1220_p
#By default, when the last connection to a in-memory database is closed, the contents are lost. This can be disabled by adding ;DB_CLOSE_DELAY=-1 to the database URL. That means to keep the contents of an in-memory database as long as the virtual machine is alive, use jdbc:h2:mem:test;DB_CLOSE_DELAY=-1

@features_1221_h2
暗号化ファイルと共にデータベースへ接続する

@features_1222_p
ファイルを暗号化して使用するためには、暗号化アルゴリズム ("cipher") とファイルパスワードを指定することが必要です。アルゴリズムは、接続パラメータを使用することで指定される必要があります。二つのアルゴリズムがサポートされています: XTEAとAES です。ファイルパスワードは、ユーザーパスワードの前のパスワードフィールドで指定されます。ファイルパスワードとユーザーパスワードの間に、シングルスペースを加えることが必要です; ファイルパスワードそのものにはスペースは含まれません。ファイルパスワードは (ユーザーパスワードも同様) 大文字と小文字を区別しています。こちらがパスワードの暗号化されたデータベースに接続するための例です:

@features_1223_h2
データベースファイルロック

@features_1224_p
データベースが開かれるときはいつも、データベースが使用中であると他のプロセスに合図するためにロックファイルが作成されます。もしデータベースが閉じられるか、データベースを開いたプロセスが終了するなら、ロックファイルは削除されます。

@features_1225_p
以下のファイルロックメソッドが提供されます:

@features_1226_li
デフォルトメソッドは "file" で、データベースファイルを保護するために、watchdogスレッドを使用します。watchdogは、ロックファイルをそれぞれ秒単位で読み込みます。

@features_1227_li
二つめのメソッドは "socket" で、サーバーソケットを開きます。ソケットメソッドは、ロックファイルを秒単位で読むことを必要としていません。ソケットメソッドは、データベースファイルがひとつの (いつも同じ) コンピューターのみによってアクセスされる場合にのみ使用されます。

@features_1228_li
ファイルロッキングなしでデータベースを開始することも可能です; このケースでは、データベースファイルを保護するのはアプリケーション次第です。

@features_1229_p
異なったファイルロックメソッドでデータベースを開くには、"FILE_LOCK" パラメータを使用します。以下のコードは "socket" ロックメソッドのデータベースを開きます:

@features_1230_p
以下のコードは、データベースにロックファイルを全く作らないよう強要させます。これは、データ破損を導く可能性のある、同じデータベースを開くことができる他のプロセスのように、安全ではないということに注意して下さい:

@features_1231_p
アルゴリズムについての詳しい情報は、進化したトピックス のファイルロックプロトコルをご覧下さい。

@features_1232_h2
すでに存在する場合のみ、データベースを開く

@features_1233_p
デフォルトでは、アプリケーションが <code>DriverManager.getConnection(url,...)</code> を呼び出し、URLで指定されたデータベースがまだ存在しない時、 新しい (空の) データベースが作成されます。ある状況では、もしすでにデータベースが存在するのであれば、新しいデータベースの作成を制限して、データベースを開くだけにした方がよいでしょう。<code>;ifexists=true</code> をURLに追加することによって可能になります。このケースでは、もしデータベースがまだ存在していなければ、接続しようとした時に例外が投げられます。接続は、データベースがすでに存在する時のみ成功します。完全なURLは次のようです:

@features_1234_h2
データベースを終了する

@features_1235_h3
データベースの遅延終了

@features_1236_p
通常、データベースへの最後の接続が閉じられた時、データベースが終了されます。一部状況では、例えば、可能ではない時に接続をつなげたままにしておくことは、アプリケーションを減速させます。SQLステートメントの SET DB_CLOSE_DELAY &lt;seconds&gt; でデータベースの自動終了を遅らせるか、または無効にすることができます。secondsには、最後の接続が閉じられた後データベースを接続したままの状態に保つため、秒数を指定します。例えば、次のステートメントはデータベースを10秒間開かれた状態に保ちます:

@features_1237_p
値の-1は、データベースは決して自動的に閉じられないということを意味します。値の0はデフォルトで、最後の接続が終了した時データベースが終了するということを意味します。この設定は永続的で、管理者のみが設定することができます。データベースのURL内で値を設定することが可能です: <code>jdbc:h2:~/test;DB_CLOSE_DELAY=10</code>

@features_1238_h3
VMが終了した時、データベースを終了しない

@features_1239_p
デフォルトでは、データベースは最後の接続が閉じられた時に終了されます。しかし、最後の接続が決して閉じられなければ、仮想マシンが正常に終了する時にデータベースは閉じられます。これはshutdown hookを使うことによって行われます。一部状況では、データベースはこのケースで終了されてはいけません。例えば、仮想マシンが終了している時にデータベースがまだ使われている場合です (例として、シャットダウンプロセスをデータベースに保存するため)。このケースでは、データベースURLでデータベースの自動終了を無効にすることが可能です。最初の接続は (ひとつはデータベースを開始するもの) データベースURLにオプションを設定する必要があります (設定を後で変更することは不可能です)。VMが終了する時、データベースの終了を無効にするためのデータベースURLです:

@features_1240_h2
ログインデックスの修正

@features_1241_p
通常、インデックスファイルの変更はパフォーマンスのために記録されません。データベースを開いた時に、インデックスファイルが破損しているか、無くなっていたら、データから作り直されます。停電、またはプログラムの異常終了のため、データベースが正しく終了されなかった時、インデックスファイルは破損されます。一部状況では、例えば、非常に大きなデータベースを使用している時 (数百MB以上)、インデックスファイルが再作成されるのにはとても時間がかかります。それらの状況では、インデックスファイルの変更を記録しておいた方がよいでしょう。そうすることによって、破損されたインデックスファイルの回復が速くなります。ログインデックスの修正を可能にするためには、jdbc:h2:~/test;LOG=2 のように、URLに LOG=2 を追加して下さい。接続する時に、この設定が指定されます。このオプションを使用する時、データベースのアップデートパフォーマンスは低下するでしょう。

@features_1242_h3
未知の設定を無視

@features_1243_p
データベースに接続する時、いくつかのアプリケーションが (例えば、OpenOffice.org Base) いくつかの追加パラメータを渡します。なぜそれらのパラメータが渡されるのかは知られていません。PREFERDOSLIKELINEENDS と IGNOREDRIVERPRIVILEGES はパラメータの例で、それらは、OpenOffice.orgとの互換性を改良するために単に無視されます。もしデータベースに接続する時、アプリケーションが他のパラメータを渡していたら、通常データベースは、 パラメータはサポートされていません、という例外を投げます。データベースURLに ;IGNORE_UNKNOWN_SETTINGS=TRUE を追加することで、このようなパラメータを無視することが可能です。

@features_1244_h3
接続が開始された時に他の設定を変更する

@features_1245_p
すでに記述された設定に加えて (暗号、ファイルロック、データベースの存在、ユーザー、パスワード)、他のデータベースの設定は、データベースURLの中で渡すことができます。<CODE>SET setting value</CODE>ステートメントを接続直後に実行するのと同じように 、<CODE>setting=value</CODE> をURLの最後に追加します。このデータベースによってサポートされている設定の一覧は、SQL文法のドキュメントをご覧下さい。

@features_1246_h2
カスタムファイル アクセスモード

@features_1247_p
通常、データベースはログ、データとインデックスファイルを、アクセスモード "rw" で開きます。read-write (モード "r" が使われている読み取り専用データベースは除く) という意味です。"rws" と "rwd" もサポートしています。ログファイルに使用されるアクセスモードは、ACCESS_MODE_LOG を通して設定されます; データとインデックスファイルには、ACCESS_MODE_DATA を使用してください。これらの設定は、データベースURLで指定されなくてはいけません:

@features_1248_p
詳細は <a href="advanced.html#durability_problems">永続性問題</a> をご覧下さい。 多くのオペレーティングシステムでは、アクセスモード "rws" において、データがディスクに書かれていることを保証しません。

@features_1249_h2
複数の接続

@features_1250_h3
同時に複数のデータベースを開く

@features_1251_p
アプリケーションは、同じデータベースへの複数の接続を含め、複数のデータベースを同時に開くことができます。開くデータベースの数は、利用可能なメモリによってのみ制限されています。

@features_1252_h3
>同じデータベースへの複数の接続: クライアント/サーバー

@features_1253_p
異なったプロセス、またはコンピューターから同時に同じデータベースにアクセスしたい場合、クライアント/サーバー モードを使用することが必要です。このケースでは、ひとつのプロセスがサーバーとして動作し、他のプロセスは (同様に他のコンピューターに属することができます) TCP/IP (または改善されたセキュリティ用のTCP/IPの上のSSL/TLS) を通してサーバーに接続します。

@features_1254_h3
マルチスレッドサポート

@features_1255_p
このデータベースは安全なマルチスレッドです。これは、アプリケーションがマルチスレッドならば、データベースへの同時アクセスに関して心配する必要がない、ということを意味しています。本質的に、同じデータベースへのほとんどのリクエストは同時に動きます。アプリケーションは、同時に同じデータベースにアクセスするマルチスレッドを使用することができますが、ひとつのスレッドが処理時間の長いクエリーを実行しているなら、他のスレッドは待つ必要があります。

@features_1256_h3
ロック、ロックタイムアウト、デッドロック

@features_1257_p
データの一貫した状態をそれぞれの接続に与えるために、データベースはテーブルレベルでのロックを使用します。二種類のロックがあります: リードロック (共有ロック) とライトロック (排他ロック) です。もし、接続がテーブルから読み込みたい場合で、テーブルにライトロックがない場合に、リードロックをテーブルに追加します。もしライトロックがあれば、この接続はロックを解除するために他の接続を待ちます。接続が指定された時間までにロックを取得できなければ、ロックタイムアウトの例外が投げられます。

@features_1258_p
通常、SELECTステートメントはリードロックを生成します。これはサブクエリーも含まれます。データを修正するステートメントはライトロックを使用します。SELECT ... FOR UPDATE ステートメントを使用して、データの修正がなくても排他的にテーブルをロックすることも可能です。COMMITとROLLBACKステートメントは全ての周知のロックを解除します。SAVEPOINTとROLLBACK TO SAVEPOINTコマンドはロックに影響を及ぼしません。ロックはオートコミットモードに変更した時、オートコミットの接続がtrueにセットされた時 (この状態がデフォルトです) にも解除され、ロックはそれぞれのステートメントの後に解除されます。これは、どのステートメントでどんな種類のロックが生成されるかの概観です:

@features_1259_th
ロックの種類

@features_1260_th
SQLステートメント

@features_1261_td
Read

@features_1262_td
SELECT * FROM TEST

@features_1263_td
CALL SELECT MAX(ID) FROM TEST

@features_1264_td
SCRIPT

@features_1265_td
Write

@features_1266_td
SELECT * FROM TEST WHERE 1=0 FOR UPDATE

@features_1267_td
Write

@features_1268_td
INSERT INTO TEST VALUES(1, 'Hello')

@features_1269_td
INSERT INTO TEST SELECT * FROM TEST

@features_1270_td
UPDATE TEST SET NAME='Hi'

@features_1271_td
DELETE FROM TEST

@features_1272_td
Write

@features_1273_td
ALTER TABLE TEST ...

@features_1274_td
CREATE INDEX ... ON TEST ...

@features_1275_td
DROP INDEX ...

@features_1276_p
SQLコマンド SET LOCK_TIMEOUT &lt;milliseconds&gt; を使用して、ロックタイムアウトの例外が投げられるまでの秒数を、それぞれの接続ごとに別々に設定することができます。SQLコマンド SET DEFAULT_LOCK_TIMEOUT &lt;milliseconds&gt; を使用して、初期のロックタイムアウト (新しい接続に使用されるタイムアウト) を設定することができます。デフォルトのロックタイムアウトは永続的です。

@features_1277_h2
データベースファイルレイアウト

@features_1278_p
永続的なデータベースのために作成された多くのファイルがあります。一部のデータベースを除いて、全てのテーブルと (または) インデックスが自身のファイル内に保存されているわけではありません。その代りに、通常次のファイルのみが作成されます: データファイル、インデックスファイル、ログファイル、データベースロックファイル (データベースが使われている間のみ存在します)。それに加えて、ファイルはそれぞれの大きなオブジェクト (CLOB/BLOB) のために作成されます。各ライナーインデックスのためのファイル、大きなresult setのためのテンポラリーファイルです。データベーストレースオプションが有効の場合、トレースファイルが作成されます。次のファイルはデータベースによって作成されます:

@features_1279_th
ファイル名

@features_1280_th
説明

@features_1281_th
ファイル数

@features_1282_td
test.data.db

@features_1283_td
データファイル

@features_1284_td
全てのテーブルのデータを含む

@features_1285_td
フォーマット: &lt;database&gt;.data.db

@features_1286_td
データベースごとに1ファイル

@features_1287_td
test.index.db

@features_1288_td
インデックスファイル

@features_1289_td
全ての (btree) インデックスのデータを含む

@features_1290_td
フォーマット: &lt;database&gt;.index.db

@features_1291_td
データベースごとに1ファイル

@features_1292_td
test.0.log.db

@features_1293_td
ログファイル

@features_1294_td
ログファイルはリカバリーのために使われる

@features_1295_td
フォーマット: &lt;database&gt;.&lt;id&gt;.log.db

@features_1296_td
データベースごとに0ファイル以上

@features_1297_td
test.lock.db

@features_1298_td
データベースロックファイル

@features_1299_td
データベースが開かれている時のみ存在

@features_1300_td
フォーマット: &lt;database&gt;.lock.db

@features_1301_td
データベースごとに1ファイル

@features_1302_td
test.trace.db

@features_1303_td
トレースファイル

@features_1304_td
トレース情報を含む

@features_1305_td
フォーマット: &lt;database&gt;.trace.db

@features_1306_td
ファイルが大きすぎる場合、&lt;database&gt;.trace.db.old に改名される

@features_1307_td
データベースごとに1ファイル

@features_1308_td
test.14.15.lob.db

@features_1309_td
大きなオブジェクト

@features_1310_td
BLOB、またはCLOBのデータを含む

@features_1311_td
フォーマット: &lt;database&gt;.&lt;tableid&gt;.&lt;id&gt;.lob.db

@features_1312_td
オブジェクトごとに1ファイル

@features_1313_td
test.123.temp.db

@features_1314_td
テンポラリーファイル

@features_1315_td
テンポラリーblob、または大きなresult setを含む

@features_1316_td
フォーマット: &lt;database&gt;.&lt;session id&gt;.&lt;object id&gt;.temp.db

@features_1317_td
オブジェクトごとに1ファイル

@features_1318_td
test.7.hash.db

@features_1319_td
ハッシュインデックスファイル

@features_1320_td
ライナーハッシュインデックスのデータを含む

@features_1321_td
フォーマット: &lt;database&gt;.&lt;object id&gt;.hash.db

@features_1322_td
ライナーハッシュインデックスごとに1ファイル

@features_1323_h3
データベースファイルの移動と改名

@features_1324_p
データベースの名前と位置は、データベース名の中には保存されません。

@features_1325_p
データベースが閉じられている間、ファイルは他のディレクトリに移動することができ、同様にファイル名を変えることもできます (全てのファイルが同じ名前で始まる必要があります)。

@features_1326_p
ファイルにはプラットホーム固有のデータがないので、問題なく他のオペレーティングシステムに移動することができます。

@features_1327_h3
バックアップ

@features_1328_p
データベースが閉じられている時、データベースファイルのバックアップをとることが可能です。インデックスファイルはバックアップをとる必要はありません。なぜなら、インデックスファイルは冗長なデータを含み、もしファイルが存在しなければ自動的に再作成されるからです。

@features_1329_p
データベースが動作している間にバックアップデータをとるために、SQLコマンド SCRIPTを使うことができます。

@features_1330_h2
ログとリカバリー

@features_1331_p
データベースでデータが修正され、それらの変更がコミットされた時はいつでも、変更はディスクに記録されます (インメモリオブジェクトを除いて)。データファイル自体への変更は通常、ディスクアクセスを最適化するために後で書かれています。もし電源異常があった場合、データファイルとインデックスファイルはアップデートされません。しかし、変更がログファイルに書かれていれば、次回データベースを開いた時に、ログファイルに書かれた変更は自動的に再び適用されます。

@features_1332_p
インデックスファイルのアップデートはデフォルトでは記録されないことに注意して下さい。もしデータベースが開かれて、リカバリーが必要だとされたら、インデックスファイルは最初から作り替えられます。

@features_1333_p
通常、データベースごとにたったひとつのログファイルがあります。このファイルは、データベースが正常に終了されるまで増大し、削除されます。また、ファイルが大きくなりすぎたら、データベースは別のログファイルに交換します (より大きなIDで)。CHECKPOINT コマンドを使用することによって、ログの切り替えを強制することが可能です。

@features_1334_p
checksumのレコードが合わないために (例えば、別のアプリケーションからファイルが編集された場合) データベースファイルが破損したら、データベースをリカバリーモードで開くことができます。このケースでは、データベースのエラーは記録されますが、投げられません。データベースはスクリプトまでバックアップをとり、可能な限り早く再構築します。データベースをリカバリーモードで開くために、jdbc:h2:~/test;RECOVER=1 のように、RECOVER=1 を含むデータベースURLを使用します。この場合、インデックスは再構築され、サマリー (アロケーションテーブルのオブジェクト)は読まれないため、データベースを開くのに時間がかかります。

@features_1335_h2
互換性

@features_1336_p
#All database engines behave a little bit different. Where possible, H2 supports the ANSI SQL standard, and tries to be compatible to other databases. There are still a few differences however:

@features_1337_p
#In MySQL text columns are case insensitive by default, while in H2 they are case sensitive. However H2 supports case insensitive columns as well. To create the tables with case insensitive texts, append IGNORECASE=TRUE to the database URL (example: jdbc:h2:test;IGNORECASE=TRUE).

@features_1338_h3
互換モード

@features_1339_p
#For certain features, this database can emulate the behavior of specific databases. Not all features or differences of those databases are implemented. Currently, this feature is mainly used for randomized comparative testing (where random statements are executed against multiple databases and the results are compared). The mode can be changed by specifying the mode in the database URL, or using the SQL statement SET MODE. To use the HSQLDB mode, you can use the database URL <code>jdbc:h2:~/test;MODE=HSQLDB</code> or the SQL statement <code>SET MODE HSQLDB</code> . Here is the list of currently supported modes and the difference to the regular mode:

@features_1340_th
モード

@features_1341_th
相違

@features_1342_td
PostgreSQL

@features_1343_td
別の値にNULLをもたらすNULL連結。通常、オペレータのうちひとつがNULLであるなら空のストリングとしてNULLを扱い、両方の値がNULLである場合にだけNULLを返します。

@features_1344_td
MySQL

@features_1345_td
データを挿入する時、もしカラムにNOT NULLが定義されていて、NULLが挿入されたら、0 (または空のストリング、またはtimestampカラムのための現在のtimestamp) の値が使用されます。通常、このオペレーションは許可されていないので、例外が投げられます。

@features_1346_td
HSQLDB

@features_1347_td
デシマルデータを変換する時、新しいスケールが現在のスケールより小さい時のみ、数字は変換されます。通常、スケールは変換されて、必要であれば 0 が追加されます。

@features_1348_h2
トレースオプションを使用する

@features_1349_p
アプリケーション内の問題を見つけるために、時々、何のデータベースオペレーションがどこで実行されているかを知るのは良い方法です。このデータベースは次のトレースの特徴を提供します:

@features_1350_li
System.out と (または) ファイルをトレースする

@features_1351_li
トレースレベル OFF、ERROR、INFO と DEBUG をサポート

@features_1352_li
トレースファイルの最大サイズの設定が可能

@features_1353_li
Javaコード生成が可能

@features_1354_li
手動でファイルを作成することによって、ランタイムでトレースが可能

@features_1355_h3
トレースオプション

@features_1356_p
トレースオプションを可能にする簡単な方法は、データベースURLにトレースオプションを設定することです。二つの設定があり、ひとつは、System.out (TRACE_LEVEL_SYSTEM_OUT) トレーシングで、もうひとつはファイルトレーシング(TRACE_LEVEL_FILE)です。トレースレベルは、0 が OFF、1 が ERROR (デフォルト)、2 が INFO で 3 が DEBUGです。両方のレベルがDEBUGに設定されたデータベースURLです:

@features_1357_p
トレースレベルは、SQLコマンド <CODE>SET TRACE_LEVEL_SYSTEM_OUT level</CODE> (System.out トレーシング) または <CODE>SET TRACE_LEVEL_FILE level</CODE> (ファイルトレーシング) を実行することによってランタイムで変更できます。例:

@features_1358_h3
トレースファイルの最大サイズを設定

@features_1359_p
高いトレースレベルを使用する時、トレースファイルは早くサイズが非常に大きくなります。SQLステートメント <CODE>SET TRACE_MAX_FILE_SIZE maximumFileSizeInMB</CODE> を実行することによりファイルのサイズを制限することができます。ログファイルが制限を超えたら、ファイルは ".old" にファイル名を変えて、新しいファイルが作成されます。もしもうひとつの .oldファイルが存在する場合は、それは削除されます。デフォルトの設定は16 MBです。例:

@features_1360_h3
Javaコード生成

@features_1361_p
トレースレベルをINFOかDEBUGに設定した時、同様にJavaのソースコードが生成されるので、問題はより簡単に再生されます。トレースファイルはこのようなものです:

@features_1362_p
Javaのソースコードを得るために、 /**/ のない行を取り除く必要があります。 Windowsでの簡単な方法は:

@features_1363_p
その後、コンパイルされる前にTrace.javaファイルを完全にする必要があります。例:

@features_1364_p
また、トレースファイルに載せられていないため、ユーザー名とパスワードが設定されている必要があります。

@features_1365_h3
手動でファイルを作成し、ランタイムでトレースオプションを可能にする

@features_1366_p
時々、アプリケーション、またはデータベースのURLを変えられない、変えたくない場合があります。このような場合に、ランタイムであっても (データベースの接続が開かれている間) トレースモードを可能にできる方法がまだあります。必要なことは、データベースファイルが保存されているディレクトリに特別なファイルを作るだけです。データベースエンジンは、このファイルが存在する場合に (ステートメントが実行されている間のみ) 4秒ごとにチェックしています。このファイル名は、データベース名 プラス ".trace.db.start" です。この特徴はデータベースが暗号化されている場合は無効になります。

@features_1367_p
例: データベース名が "test"の場合、 トレーシングを開始するファイルは "test.trace.db.start"です。データベースエンジンは、このファイルを見つけた時、ファイルを削除しようとします。スタートファイルを使用することでトレースが可能になるなら、トレースレベルはデータベースに対して永続的ではなく、トレースはデータベースに接続する以前のレベルに戻されます。しかし、スタートファイルが読み取り専用なら、データベースエンジンはファイルを削除することができず、接続するときはいつもトレースモードになります。

@features_1368_h2
読み取り専用データベース

@features_1369_p
データベースファイルが読み取り専用なら、同様にデータベースも読み取り専用です。このデータベースで新しいテーブルを作成したり、データを追加したり変更したりすることはできません。SELECTステートメントのみ許可されています。読み取り専用データベースを作成するには、データベースを終了してログファイルを小さくします。ログファイルを削除してはいけません。そして、オペレーティングシステムを使用してデータベースファイルを読み取り専用にします。これでデータベースを開くと、読み取り専用になっています。アプリケーションが、データベースが読み取り専用であることを判断する方法は二つあります: Connection.isReadOnly() を呼ぶか、SQLステートメント CALL READONLY() を実行します。

@features_1370_h2
#Read Only Databases in Zip or Jar File

@features_1371_p
#To create a read-only database in a zip, first create a regular persistent database, and then create a backup. If you are using a database named 'test', an easy way to do that is using the BACKUP SQL statement:

@features_1372_p
#Afterwards, you can log out, and directly open the database in the zip file using the following database URL:

@features_1373_p
#Databases in a zip file are read-only. The performance for some queries will be slower than when using a regular database, because random access in zip files is not supported (only streaming). How much this affects the performance depends on the queries and the data. The database is not read in memory, so large databases are supported as well. The same indexes are used than when using a regular database.

@features_1374_h2
バイナリーとテキストストレージフォーマット

@features_1375_p
このデータベースエンジンは、バイナリーとテキストストレージフォーマットの両方をサポートしています。バイナリーはより高速ですが、テキストストレージフォーマットは同様に役立つ場合があります。例えば、データベースエンジンをデバッグする場合です。データベースがすでに存在するなら、ストレージフォーマットは自動的に推奨されます。新しいデータベースはデフォルトでバイナリーストレージフォーマットで作られます。テキストストレージフォーマットで新しいデータベースを作成するには、データベースURLに、パラメータ STORAGE=TEXT が含まれていなければなりません。例: jdbc:h2:~/test;STORAGE=TEXT

@features_1376_h2
ディスクスペースが少ない状況での正しい取り扱い

@features_1377_p
データベースは、利用可能なディスクスペースが少なくなっている状況に対処することができます。データベースを開始する時はいつも、"emergency space" ファイルが作られ (サイズは 1 MB)、利用可能なスペースがもうない場合には、ファイルは小さくなります。利用可能なスペースが 128 KB以下になった場合、データベースは特別な読み取り専用モードになり、全ての書き込み操作はもはや許可されません: この時点から全ての書き込み操作は、"No disk space available" を例外に投げます。通常のオペレーションモードに戻るためには、最初にデータベースへの全ての接続を終了し、スペースを空ける必要があります。

@features_1378_p
早くからディスクスペースの少ない状況を把握するために、データベースイベントリスナーをインストールすることは可能です (ディスクスペースが 1MB のみ利用可能な時)。SQLステートメント SET DATABASE_EVENT_LISTENER を使用します。フォームのURLを使用して、接続時にリスナーを設定することが可能です jdbc:h2:~/test;DATABASE_EVENT_LISTENER='com.acme.DbListener' (クラス名の周りの引用文は必要です)。APIのDatabaseEventListenerもご覧下さい。

@features_1379_h3
破損したデータベースを開く

@features_1380_p
boot info (始動時に実行されるSQLスクリプト) が破損しているため、データベースを開くことができない場合、データベースイベントリスナーを指定することでデータベースを開くことができます。例外は記録されますが、データベースの開始は続行します。

@features_1381_h2
computed column / ベースインデックスの機能

@features_1382_p
インデックスの機能は、このデータベースによって直接サポートはされていませんが、computed columnsを使用することによって、簡単にエミュレートすることができます。例えば、カラムのupper-caseバージョンのインデックスが必要なら、原形のカラムのupper-caseバージョンのcomputed columnを作成し、このカラムにインデックスをつけます:

@features_1383_p
値は生成されているので、データを挿入する時、カラムのupper-caseバージョンのための値を指定する必要はありません (許可されていません)。 しかし、テーブルを呼ぶ時、このカラムを使用することはできます。:

@features_1384_h2
多次元インデックス

@features_1385_p
効率的な多次元の (空間的) 領域のクエリーを実行するためにツールを提供します。このデータベースは専門的な空間的インデックス (R-Tree またはより小さいもの) をサポートしていません。代わりに、B-Treeインデックスが使われています。それぞれのレコードに対して、多次元のキーは、単数範囲 (スカラー) の値に変換 (位置づけ) されます。この値は、space-filling curve (空間充填曲線) で位置を指定します。

@features_1386_p
現在、Z-order (N-order または Morton-order とも呼ばれています) が使用されています; Hilbert curveも使用できますが、実装はより複雑です。多次元の値を変換するアルゴリズムは、bit-interleavingと呼ばれています。B-Treeインデックス (通常は computed columnを使用します)を使用することで、スカラーの値はインデックスをつけられます。

@features_1387_p
最初のカラムにインデックスを使用する上で、メソッドは徹底的なパフォーマンスの改良をもたらすことができます。データと次元の数によりますが、改良は通常、factor 5よりも高いものです。指定された多次元の範囲から、ツールはSQLクエリーを生成します。使用されたメソッドは、データベースに依存しておらず、ツールは簡単に他のデータベースに移植することができます。ツールの使用方法の例は、TestMultiDimension.java で提供されているサンプルコードをご覧下さい。

@features_1388_h2
パスワードを使用する

@features_1389_h3
安全なパスワードを使用する

@features_1390_p
弱いパスワードは、暗号化やセキュリティプロトコルに取るに足らず、解読されてしまうことを覚えておいて下さい。辞書で見つけられるようなパスワードは使用しないでください。また、数字を付け足してもそのようなパスワードは安全にはなりません。良いパスワードを作る方法は、覚えやすい、文章の最初の文字を使う、大文字と小文字を使う、特別な文字が含まれているものを作る、です。例:

@features_1391_p
i'sE2rtPiUKtT (もしトリックを知っていれば、このパスワードは覚えやすいものです)

@features_1392_h3
パスワード: Stringの代わりにChar Arraysを使用する

@features_1393_p
Java Stringは不変のオブジェクトであり、アプリケーションによって安全に壊されることはできません。Stringの作成後、Stringは少なくともガベージコレクションになるまで、コンピューターのメインメモリ内にとどまるでしょう。ガベージコレクションはアプリケーションによって制御されず、ガベージコレクションであっても、データはまだメモリにとどまっているでしょう。パスワードが含まれるメモリの一部をディスクと取り換えることも可能でしょう (十分でないメインメモリも使用可能のため)。

@features_1394_p
アタッカーはオペレーティングシステムのスワップファイルにアクセスするでしょう。したがって、パスワードを保存するために、Stringの代わりにchar arrayを使用するのは良い方法です。char arrayは使用後クリアにされるので (0で埋められます)、パスワードはスワップファイルに保存されません。

@features_1395_p
このデータベースは、ユーザーパスワードとファイルパスワードを認証するために、Stringの代わりにchar arrayを使用することをサポートしています。次のコードはこのように使用されます:

@features_1396_p
このサンプルでは、パスワードはアプリケーションでのハードコードで、もちろん安全ではありません。しかし、Java Swingはchar arrayを使用してパスワードを得る方法をサポートしています (JPasswordField)。

@features_1397_h3
ユーザー名 と (または) パスワードをURLで認証する

@features_1398_p
ユーザー名を <code>Connection conn = DriverManager. getConnection("jdbc:h2:~/test", "sa", "123");</code> のように切り離されたパラメータとして認証する代わりに、URLそのもので <code>Connection conn = DriverManager. getConnection("jdbc:h2:~/test;USER=sa;PASSWORD=123");</code> ユーザー名 (と (または) パスワード)を提供することができます。URL内の設定は、切り離されたパラメータとして認証させる設定より優先されます。

@features_1399_h2
ユーザー定義の関数とストアドプロシージャ

@features_1400_p
組み込み関数に加えて、このデータベースはユーザー定義のJava関数をサポートしています。同様に、このデータベースではJava関数はストアドプロシージャとして使用されています。関数は、使用される前に宣言 (登録) されていなければなりません。static Javaメソッドのみサポートされています; クラスとメソッドの両方が public である必要があります。Javaメソッドの例:

@features_1401_p
Java関数は、CREATE ALIAS と呼ばれるデータベースに登録されていなければなりません:

@features_1402_p
完全なサンプルアプリケーションは src/test/org/h2/samples/Function.java をご覧下さい。

@features_1403_h3
データタイプマッピング関数

@features_1404_p
"int" のような non-nullable (NULL可能ではない) パラメータを受け入れる関数は、パラメータのうちひとつがNULLであるなら呼ばれないでしょう。このケースでは、NULLの値は結果として使用されます。このケースで関数を呼び出したいのなら、"int" の代わりに "java.lang.Integer" を使用する必要があります。

@features_1405_h3
接続を必要とする関数

@features_1406_p
もしJava関数の最初のパラメータが java.sql.Connection なら、データベースへの接続は与えられています。返す前にこの接続を閉じる必要はありません。

@features_1407_h3
例外を投げる関数

@features_1408_p
関数が例外を投げたら、現在のステートメントはロールバックされ、例外はアプリケーションに投げられます。

@features_1409_h3
Result Setを返す関数

@features_1410_p
関数はresult setを返します。このような関数はCALLステートメントと一緒に呼ばれます:

@features_1411_h3
SimpleResultSetを使用する

@features_1412_p
result setを返す関数は、SimpleResultSetツールを使用して最初からこのresult setを作成することができます:

@features_1413_h3
関数をテーブルとして使用する

@features_1414_p
result setを返す関数はテーブルのようになれます。しかし、このケースでは関数は少なくとも二回は呼ばれます: 最初はカラム名を集めるために構文解析している間です (コンパイル時に未知のところでパラメータはNULLに設定)。そして、データを取得するためにステートメントを実行している間です (これが結合なら繰り返されます)。関数がカラム一覧を取得するためだけに呼ばれたのなら、関数を認証する接続URLは jdbc:columnlist:connection です。そうでなければ、接続URLは jdbc:default:connection です。

@features_1415_h2
トリガー

@features_1416_p
このデータベースは、行が更新、挿入、または削除された前後に呼ばれるJavaトリガーをサポートしています。トリガーは複雑な一貫性チェックか、データベース内の関連したデータをアップデートするのに使用されます。マテリアライズドビューをシミュレートするためにトリガーを使用することも可能です。完全なサンプルアプリケーションは src/test/org/h2/samples/TriggerSample.java をご覧下さい。Javaトリガーは、インターフェイス org.h2.api.Trigger を実装しなければなりません:

@features_1417_p
他のテーブルのクエリーかデータのアップデートに接続を使用することができます。トリガーはその時データベースで定義されている必要があります:

@features_1418_p
トリガーはSQL Exceptionを投げることによって、変更を禁止させることができます。

@features_1419_h2
データベースをコンパクトにする

@features_1420_p
データベースファイルの空のスペースは自動的に再利用されます。インデックスを再構築するもっとも簡単な方法は、データベースが閉じられている間に .index.db ファイルを削除します。しかし、一部状況では (例えば、データベースの多数のデータを削除した後)、データベースのサイズを縮小したい場合があります (データベースをコンパクトにする)。そのためのサンプルです:

@features_1421_p
サンプルアプリケーション org.h2.samples.Compact もご覧下さい。データベースのバックアップを作るのと、スクリプトからデータベースを再構築するのにSCRIPT / RUNSCRIPT コマンドを使用することができます。

@features_1422_h2
キャッシュの設定

@features_1423_p
データベースは最も頻繁に使われるデータやインデックスページをメインメモリに保存します。キャッシュに使用されるメモリ量を CACHE_SIZE 設定を使用して変更することができます。この設定は、データベース接続URL (jdbc:h2:~/test;CACHE_SIZE=131072) か、ランタイムにSET CACHE_SIZE を使用してサイズを変更できます。

@features_1424_p
このデータベースは二つのcache page replacement algorithms (キャッシュページ置換アルゴリズム) をサポートしています: LRU (デフォルト) と2Qです。LRUは、キャッシュがいっぱいになったら、頻繁に使用されていないページをキャッシュから削除します。2Qアルゴリズムは少し複雑で、基本的に二つのクエリーが使用されます。2Qアルゴリズムはテーブルスキャンに、より抵抗がありますが、LRUと比較してオーバーヘッドは少し高めです。キャッシュアルゴリズム 2Qを使用するためには、フォームのデータベースURL  jdbc:h2:~/test;CACHE_TYPE=TQ を使用します。キャッシュアルゴリズムは、一度データベースが開かれたら変更することはできません。

@features_1425_p
読んだり書いたりしたページや、現在使用されているキャッシュアルゴリズムの情報を得るためには、SELECT * FROM INFORMATION_SCHEMA.SETTINGS を呼びます。データとインデックスファイルに読み書きしたページ数が書かれています。

@features_1426_h2
なぜJavaなのか

@features_1427_p
Javaデータベースを使用するいくつかの理由:

@features_1428_li
Javaアプリケーションの統合は非常に簡単

@features_1429_li
多数の異なったプラットフォームのサポート

@features_1430_li
ネイティブアプリケーションより、より安全 (バッファーのオーバーフローがない)

@features_1431_li
ユーザー定義関数 (またはトリガー) が非常に高速で実行される

@features_1432_li
Unicodeをサポート

@features_1433_p
低いレベルでのオペレーションでは、Javaはまだ低速すぎると思う方もいますが、そうではありません (それ以上でもありません)。一般的に、C、またはC++を使用するよりもずっと速くコードを書くことができます。このように、コードを移植して、低レベルのもの (スレッドのメモリ管理か取り扱いのような) に対処するよりもむしろ、アルゴリズムの改良(アプリケーションをより速くする) に集中することが可能です。ガーベジコレクションは今や手動でのメモリ管理よりおそらく速いでしょう。

@features_1434_p
たくさんの特徴がすでに組み込まれています (例えば、Unicode、ネットワークライブラリ)。安全なコードを書くのはとても簡単です。なぜなら、バッファーのオーバーフローとそのような問題はとても簡単に見つけることができるからです。反映メカニズムのようないくつかの特徴は、randomized testingのために使用されます。

@features_1435_p
Javaは将来への証明でもあります: 多くの会社がJavaをサポートし、今ではオープンソースです。

@features_1436_p
このソフトウェアは、移植性の増加と使いやすさのため、そしてパフォーマンスの理由から、多くのJavaライブラリ、または他のソフトウェアを信頼していません。例えば、暗号化アルゴリズムと多数のライブラリ関数は、存在するライブラリを使用する代わりにデータベースに実装されています。SwingのようなオープンソースのJava実装が有効でないライブラリは使用されていないか、特定の特徴のみに使用されます。

@frame_1000_p
H2 (for 'Hypersonic 2') is free a Java SQL DBMS. Clustering, embedded and server mode, transactions, referential integrity, views, subqueries, triggers, encryption, and disk based or in-memory operation are supported. A browser based console application is included. If you see this page your browser does not support frames. Please click here to view the<a href="search_ja.html">index</a>.

@history_1000_h1
歴史とロードマップ

@history_1001_a
このデータベースエンジンの歴史

@history_1002_a
変更履歴

@history_1003_a
ロードマップ

@history_1004_a
支援者

@history_1005_h2
このデータベースエンジンの歴史

@history_1006_p
H2DBの開発は2004年の5月に開始されましたが、初めて世に出たのは、2005年12月14日の事でした。生みの親であるThomas Muellerは、Hypersonic SQLの初期の開発者でもあります。2001年、彼はPointBaseMicroを生み出したPointBaseInc.に入社しました。この時点で彼はHypersonic SQLの開発を断念しなければなりませんでしたが、引き続きHypersonic SQLのコードベース開発を進める目的でHSQLDBグループが設立されました。H2DBの H2 は、このHypersonic 2を意味しています。とはいえ、H2DBはHypersonic SQLやHSQLDBとはコードの共有を一切行わず、すべてゼロから開発されました。

@history_1007_h2
変更履歴

@history_1008_p
#The up-to-date change log is available here: <a href="http://groups.google.com/group/h2-database/web/change-log">http://groups.google.com/group/h2-database/web/change-log</a>

@history_1009_h2
ロードマップ

@history_1010_p
#The current roadmap is available here: <a href="http://groups.google.com/group/h2-database/web/roadmap">http://groups.google.com/group/h2-database/web/roadmap</a>

@history_1011_h3
#Not Planned

@history_1012_li
#HSQLDB does/did support this: select id i from test where i>0 (other databases don't)

@history_1013_li
#String.intern (so that Strings can be compared with ==) will not be used because some VMs have problems when used extensively

@history_1014_h2
支援者

@history_1015_p
#Many thanks for those who helped by finding and reporting bugs, gave valuable feedback, spread the word and have translated this project. Also many thanks to the donors who contributed via PayPal:

@history_1016_li
#Florent Ramiere, France

@history_1017_li
#Pete Haidinyak, USA

@history_1018_li
#Jun Iyama, Japan

@history_1019_li
#Antonio Casqueiro, Portugal

@history_1020_li
#lumber-mill.co.jp, Japan

@history_1021_li
#Oliver Computing LLC, USA

@installation_1000_h1
インストール

@installation_1001_a
必要条件

@installation_1002_a
サポートされているプラットフォーム

@installation_1003_a
ソフトウェアのインストール

@installation_1004_a
ディレクトリ構成

@installation_1005_h2
必要条件

@installation_1006_p
データベースを実行するために、以下のソフトウェアが動作することを確認します。

@installation_1007_li
Windows XP、MacOS、またはLinux

@installation_1008_li
推奨されるWindowsファイルシステム: NTFS (FAT32は4GB以上ファイルをサポートします)

@installation_1009_li
Sun JDK 1.4以降

@installation_1010_li
Mozilla Firefox 1.5以降

@installation_1011_h2
サポートされているプラットフォーム

@installation_1012_p
このデータベースはJavaで書かれているため、多くの異なったプラットフォームで実行することができます。 Java 1.4、1.5、1.6でテストされましたが、GCJを使用することでネイティブコードにコンパイルすることもできます。 ソースコードはJava 1.5の特徴は使われていません。現在、データベースはWindows XPでSun JDK 1.4を使用して開発、テストされていますが、恐らく他の多くのOSと他のJava Runtime Environmentを使用しても動作するでしょう。

@installation_1013_h2
ソフトウェアのインストール

@installation_1014_p
ソフトウェアをインストールするために、インストーラーを実行するか 選択したディレクトリにソフトウェアを解凍します。

@installation_1015_h2
ディレクトリ構成

@installation_1016_p
インストール後、下記のディレクトリ構成が作られます:

@installation_1017_th
ディレクトリ

@installation_1018_th
コンテンツ

@installation_1019_td
bin

@installation_1020_td
JARとbatchファイル

@installation_1021_td
docs

@installation_1022_td
ドキュメント

@installation_1023_td
docs/html

@installation_1024_td
HTMLページ

@installation_1025_td
docs/javadoc

@installation_1026_td
Javadocファイル

@installation_1027_td
service

@installation_1028_td
Windows Serviceとしてデータベースを実行するツール

@installation_1029_td
src

@installation_1030_td
Sourceファイル

@license_1000_h1
ライセンス

@license_1001_h2
#Summary and License FAQ

@license_1002_p
#This license is a modified version of the MPL 1.1 available at <a href="http://www.mozilla.org/MPL">www.mozilla.org/MPL</a> , the changes are

@license_1003_em
#underlined</em> . There is a License FAQ section at the Mozilla web site, most of that is applicable to the H2 License as well.

@license_1004_li
#You can use H2 for free. You can integrate it into your application (including commercial applications),  and you can distribute it.

@license_1005_li
#Files containing only your code are not covered by this license (it is 'commercial friendly').

@license_1006_li
#Modifications to the H2 source code must be published.

@license_1007_li
#You don't need to provide the source code of H2 if you did not modify anything.

@license_1008_p
#However, nobody is allowed to rename H2, modify it a little, and sell it as a database engine without telling the customers it is in fact H2. This happened to HSQLDB, when a company called 'bungisoft' copied HSQLDB, renamed it to 'RedBase', and tried to sell it, hiding the fact that it was, in fact, just HSQLDB. At this time, it seems 'bungisoft' does not exist any more, but you can use the Wayback Machine of http://www.archive.org and look for old web pages of http://www.bungisoft.com.

@license_1009_p
#About porting the source code to another language (for example C# or C++): Converted source code (even if done manually) stays under the same copyright and license as the original code. The copyright of the ported source code does not (automatically) go to the person who ported the code.

@license_1010_h2
#H2 License, Version 1.0

@license_1011_h3
#1. Definitions

@license_1012_b
#1.0.1. "Commercial Use"

@license_1013_p
#means distribution or otherwise making the Covered Code available to a third party.

@license_1014_b
#1.1. "Contributor"

@license_1015_p
#means each entity that creates or contributes to the creation of Modifications.

@license_1016_b
#1.2. "Contributor Version"

@license_1017_p
#means the combination of the Original Code, prior Modifications used by a Contributor,  and the Modifications made by that particular Contributor.

@license_1018_b
#1.3. "Covered Code"

@license_1019_p
#means the Original Code or Modifications or the combination of the Original Code and  Modifications, in each case including portions thereof.

@license_1020_b
#1.4. "Electronic Distribution Mechanism"

@license_1021_p
#means a mechanism generally accepted in the software development community for the  electronic transfer of data.

@license_1022_b
#1.5. "Executable"

@license_1023_p
#means Covered Code in any form other than Source Code.

@license_1024_b
#1.6. "Initial Developer"

@license_1025_p
#means the individual or entity identified as the Initial Developer in the Source Code  notice required by <a href="#exhibit-a">Exhibit A</a> .

@license_1026_b
#1.7. "Larger Work"

@license_1027_p
#means a work which combines Covered Code or portions thereof with code not governed  by the terms of this License.

@license_1028_b
#1.8. "License"

@license_1029_p
#means this document.

@license_1030_b
#1.8.1. "Licensable"

@license_1031_p
#means having the right to grant, to the maximum extent possible, whether at the  time of the initial grant or subsequently acquired, any and all of the rights  conveyed herein.

@license_1032_b
#1.9. "Modifications"

@license_1033_p
#means any addition to or deletion from the substance or structure of either the  Original Code or any previous Modifications. When Covered Code is released as a  series of files, a Modification is:

@license_1034_p
#1.9.a. Any addition to or deletion from the contents of a file  containing Original Code or previous Modifications.

@license_1035_p
#1.9.b. Any new file that contains any part of the Original Code or  previous Modifications.

@license_1036_b
#1.10. "Original Code"

@license_1037_p
#means Source Code of computer software code which is described in the Source Code  notice required by <a href="#exhibit-a">Exhibit A</a> as Original Code, and which,  at the time of its release under this License is not already Covered Code governed  by this License.

@license_1038_b
#1.10.1. "Patent Claims"

@license_1039_p
#means any patent claim(s), now owned or hereafter acquired, including without  limitation, method, process, and apparatus claims, in any patent Licensable by  grantor.

@license_1040_b
#1.11. "Source Code"

@license_1041_p
#means the preferred form of the Covered Code for making modifications to it,  including all modules it contains, plus any associated interface definition files,  scripts used to control compilation and installation of an Executable, or source  code differential comparisons against either the Original Code or another well known,  available Covered Code of the Contributor's choice. The Source Code can be in a  compressed or archival form, provided the appropriate decompression or de-archiving  software is widely available for no charge.

@license_1042_b
#1.12. "You" (or "Your")

@license_1043_p
#means an individual or a legal entity exercising rights under, and complying with  all of the terms of, this License or a future version of this License issued under <a href="#section-6.1">Section 6.1.</a> For legal entities, "You" includes any entity  which controls, is controlled by, or is under common control with You. For purposes of  this definition, "control" means (a) the power, direct or indirect, to cause the  direction or management of such entity, whether by contract or otherwise, or (b)  ownership of more than fifty percent (50%) of the outstanding shares or beneficial  ownership of such entity.

@license_1044_h3
#2. Source Code License

@license_1045_h4
#2.1. The Initial Developer Grant

@license_1046_p
#The Initial Developer hereby grants You a world-wide, royalty-free, non-exclusive license, subject to third party intellectual property claims:

@license_1047_p
#2.1.a. under intellectual property rights (other than patent or  trademark) Licensable by Initial Developer to use, reproduce, modify, display, perform,  sublicense and distribute the Original Code (or portions thereof) with or without  Modifications, and/or as part of a Larger Work; and

@license_1048_p
#2.1.b. under Patents Claims infringed by the making, using or selling  of Original Code, to make, have made, use, practice, sell, and offer for sale, and/or  otherwise dispose of the Original Code (or portions thereof).

@license_1049_p
#2.1.c. the licenses granted in this Section 2.1  ( <a href="#section-2.1-a">a</a> ) and ( <a href="#section-2.1-b">b</a> ) are effective on  the date Initial Developer first distributes Original Code under the terms of this  License.

@license_1050_p
#2.1.d. Notwithstanding Section 2.1 ( <a href="#section-2.1-b">b</a> )  above, no patent license is granted: 1) for code that You delete from the Original Code;  2) separate from the Original Code; or 3) for infringements caused by: i) the  modification of the Original Code or ii) the combination of the Original Code with other  software or devices.

@license_1051_h4
#2.2. Contributor Grant

@license_1052_p
#Subject to third party intellectual property claims, each Contributor hereby grants You a world-wide, royalty-free, non-exclusive license

@license_1053_p
#2.2.a. under intellectual property rights (other than patent or trademark)  Licensable by Contributor, to use, reproduce, modify, display, perform, sublicense and  distribute the Modifications created by such Contributor (or portions thereof) either on  an unmodified basis, with other Modifications, as Covered Code and/or as part of a Larger  Work; and

@license_1054_p
#2.2.b. under Patent Claims infringed by the making, using, or selling of  Modifications made by that Contributor either alone and/or in combination with its  Contributor Version (or portions of such combination), to make, use, sell, offer for  sale, have made, and/or otherwise dispose of: 1) Modifications made by that Contributor  (or portions thereof); and 2) the combination of Modifications made by that Contributor  with its Contributor Version (or portions of such combination).

@license_1055_p
#2.2.c. the licenses granted in Sections 2.2  ( <a href="#section-2.2-a">a</a> ) and 2.2 ( <a href="#section-2.2-b">b</a> ) are effective  on the date Contributor first makes Commercial Use of the Covered Code.

@license_1056_p
#2.2.c. Notwithstanding Section 2.2 ( <a href="#section-2.2-b">b</a> )  above, no patent license is granted: 1) for any code that Contributor has deleted from  the Contributor Version; 2) separate from the Contributor Version; 3) for infringements  caused by: i) third party modifications of Contributor Version or ii) the combination of  Modifications made by that Contributor with other software (except as part of the  Contributor Version) or other devices; or 4) under Patent Claims infringed by Covered Code  in the absence of Modifications made by that Contributor.

@license_1057_h3
#3. Distribution Obligations

@license_1058_h4
#3.1. Application of License

@license_1059_p
#The Modifications which You create or to which You contribute are governed by the terms of this License, including without limitation Section <a href="#section-2.2">2.2</a> . The Source Code version of Covered Code may be distributed only under the terms of this License or a future version of this License released under Section <a href="#section-6.1">6.1</a> , and You must include a copy of this License with every copy of the Source Code You distribute. You may not offer or impose any terms on any Source Code version that alters or restricts the applicable version of this License or the recipients' rights hereunder. However, You may include an additional document offering the additional rights described in Section <a href="#section-3.5">3.5</a> .

@license_1060_h4
#3.2. Availability of Source Code

@license_1061_p
#Any Modification which You create or to which You contribute must be made available in Source Code form under the terms of this License either on the same media as an Executable version or via an accepted Electronic Distribution Mechanism to anyone to whom you made an Executable version available; and if made available via Electronic Distribution Mechanism, must remain available for at least twelve (12) months after the date it initially became available, or at least six (6) months after a subsequent version of that particular Modification has been made available to such recipients. You are responsible for ensuring that the Source Code version remains available even if the Electronic Distribution Mechanism is maintained by a third party.

@license_1062_h4
#3.3. Description of Modifications

@license_1063_p
#You must cause all Covered Code to which You contribute to contain a file documenting the changes You made to create that Covered Code and the date of any change. You must include a prominent statement that the Modification is derived, directly or indirectly, from Original Code provided by the Initial Developer and including the name of the Initial Developer in (a) the Source Code, and (b) in any notice in an Executable version or related documentation in which You describe the origin or ownership of the Covered Code.

@license_1064_h4
#3.4. Intellectual Property Matters

@license_1065_b
#3.4.a. Third Party Claims:

@license_1066_p
#If Contributor has knowledge that a license under a third party's intellectual property rights is required to exercise the rights granted by such Contributor under Sections <a href="#section-2.1">2.1</a> or <a href="#section-2.2">2.2</a> , Contributor must include a text file with the Source Code distribution titled "LEGAL" which describes the claim and the party making the claim in sufficient detail that a recipient will know whom to contact. If Contributor obtains such knowledge after the Modification is made available as described in Section <a href="#section-3.2">3.2</a> , Contributor shall promptly modify the LEGAL file in all copies Contributor makes available thereafter and shall take other steps (such as notifying appropriate mailing lists or newsgroups) reasonably calculated to inform those who received the Covered Code that new knowledge has been obtained.

@license_1067_b
#3.4.b. Contributor APIs:

@license_1068_p
#If Contributor's Modifications include an application programming interface and Contributor has knowledge of patent licenses which are reasonably necessary to implement that API, Contributor must also include this information in the legal file.

@license_1069_b
#3.4.c. Representations:

@license_1070_p
#Contributor represents that, except as disclosed pursuant to Section 3.4 ( <a href="#section-3.4-a">a</a> ) above, Contributor believes that Contributor's Modifications are Contributor's original creation(s) and/or Contributor has sufficient rights to grant the rights conveyed by this License.

@license_1071_h4
#3.5. Required Notices

@license_1072_p
#You must duplicate the notice in <a href="#exhibit-a">Exhibit A</a> in each file of the Source Code. If it is not possible to put such notice in a particular Source Code file due to its structure, then You must include such notice in a location (such as a relevant directory) where a user would be likely to look for such a notice. If You created one or more Modification(s) You may add your name as a Contributor to the notice described in <a href="#exhibit-a">Exhibit A</a> . You must also duplicate this License in any documentation for the Source Code where You describe recipients' rights or ownership rights relating to Covered Code. You may choose to offer, and to charge a fee for, warranty, support, indemnity or liability obligations to one or more recipients of Covered Code. However, You may do so only on Your own behalf, and not on behalf of the Initial Developer or any Contributor. You must make it absolutely clear than any such warranty, support, indemnity or liability obligation is offered by You alone, and You hereby agree to indemnify the Initial Developer and every Contributor for any liability incurred by the Initial Developer or such Contributor as a result of warranty, support, indemnity or liability terms You offer.

@license_1073_h4
#3.6. Distribution of Executable Versions

@license_1074_p
#You may distribute Covered Code in Executable form only if the requirements of Sections <a href="#section-3.1">3.1</a> , <a href="#section-3.2">3.2</a> , <a href="#section-3.3">3.3</a> , <a href="#section-3.4">3.4</a> and <a href="#section-3.5">3.5</a> have been met for that Covered Code, and if You include a notice stating that the Source Code version of the Covered Code is available under the terms of this License, including a description of how and where You have fulfilled the obligations of Section <a href="#section-3.2">3.2</a> . The notice must be conspicuously included in any notice in an Executable version, related documentation or collateral in which You describe recipients' rights relating to the Covered Code. You may distribute the Executable version of Covered Code or ownership rights under a license of Your choice, which may contain terms different from this License, provided that You are in compliance with the terms of this License and that the license for the Executable version does not attempt to limit or alter the recipient's rights in the Source Code version from the rights set forth in this License. If You distribute the Executable version under a different license You must make it absolutely clear that any terms which differ from this License are offered by You alone, not by the Initial Developer or any Contributor. You hereby agree to indemnify the Initial Developer and every Contributor for any liability incurred by the Initial Developer or such Contributor as a result of any such terms You offer.

@license_1075_h4
#3.7. Larger Works

@license_1076_p
#You may create a Larger Work by combining Covered Code with other code not governed by the terms of this License and distribute the Larger Work as a single product. In such a case, You must make sure the requirements of this License are fulfilled for the Covered Code.

@license_1077_h3
#4. Inability to Comply Due to Statute or Regulation.

@license_1078_p
#If it is impossible for You to comply with any of the terms of this License with respect to some or all of the Covered Code due to statute, judicial order, or regulation then You must: (a) comply with the terms of this License to the maximum extent possible; and (b) describe the limitations and the code they affect. Such description must be included in the <b>legal</b> file described in Section <a href="#section-3.4">3.4</a> and must be included with all distributions of the Source Code. Except to the extent prohibited by statute or regulation, such description must be sufficiently detailed for a recipient of ordinary skill to be able to understand it.

@license_1079_h3
#5. Application of this License.

@license_1080_p
#This License applies to code to which the Initial Developer has attached the notice in <a href="#exhibit-a">Exhibit A</a> and to related Covered Code.

@license_1081_h3
#6. Versions of the License.

@license_1082_h4
#6.1. New Versions

@license_1083_p
#The

@license_1084_em
#H2 Group</em> may publish revised and/or new versions of the License from time to time. Each version will be given a distinguishing version number.

@license_1085_h4
#6.2. Effect of New Versions

@license_1086_p
#Once Covered Code has been published under a particular version of the License, You may always continue to use it under the terms of that version. You may also choose to use such Covered Code under the terms of any subsequent version of the License published by the

@license_1087_em
#H2 Group</em> . No one other than the

@license_1088_em
#H2 Group</em> has the right to modify the terms applicable to Covered Code created under this License.

@license_1089_h4
#6.3. Derivative Works

@license_1090_p
#If You create or use a modified version of this License (which you may only do in order to apply it to code which is not already Covered Code governed by this License), You must (a) rename Your license so that the phrases

@license_1091_em
#"H2 Group", "H2"</em> or any confusingly similar phrase do not appear in your license (except to note that your license differs from this License) and (b) otherwise make it clear that Your version of the license contains terms which differ from the

@license_1092_em
#H2 License</em> . (Filling in the name of the Initial Developer, Original Code or Contributor in the notice described in <a href="#exhibit-a">Exhibit A</a> shall not of themselves be deemed to be modifications of this License.)

@license_1093_h3
#7. Disclaimer of Warranty

@license_1094_p
#Covered code is provided under this license on an "as is" basis, without warranty of any kind, either expressed or implied, including, without limitation, warranties that the covered code is free of defects, merchantable, fit for a particular purpose or non-infringing. The entire risk as to the quality and performance of the covered code is with you. Should any covered code prove defective in any respect, you (not the initial developer or any other contributor) assume the cost of any necessary servicing, repair or correction. This disclaimer of warranty constitutes an essential part of this license. No use of any covered code is authorized hereunder except under this disclaimer.

@license_1095_h3
#8. Termination

@license_1096_p
#8.1. This License and the rights granted hereunder will terminate automatically if You fail to comply with terms herein and fail to cure such breach within 30 days of becoming aware of the breach. All sublicenses to the Covered Code which are properly granted shall survive any termination of this License. Provisions which, by their nature, must remain in effect beyond the termination of this License shall survive.

@license_1097_p
#8.2. If You initiate litigation by asserting a patent infringement claim (excluding declaratory judgment actions) against Initial Developer or a Contributor (the Initial Developer or Contributor against whom You file such action is referred to as "Participant") alleging that:

@license_1098_p
#8.2.a. such Participant's Contributor Version directly or indirectly  infringes any patent, then any and all rights granted by such Participant to You under  Sections <a href="#section-2.1">2.1</a> and/or <a href="#section-2.2">2.2</a> of this  License shall, upon 60 days notice from Participant terminate prospectively, unless if  within 60 days after receipt of notice You either: (i) agree in writing to pay  Participant a mutually agreeable reasonable royalty for Your past and future use of  Modifications made by such Participant, or (ii) withdraw Your litigation claim with  respect to the Contributor Version against such Participant. If within 60 days of  notice, a reasonable royalty and payment arrangement are not mutually agreed upon in  writing by the parties or the litigation claim is not withdrawn, the rights granted by  Participant to You under Sections <a href="#section-2.1">2.1</a> and/or <a href="#section-2.2">2.2</a> automatically terminate at the expiration of the 60 day  notice period specified above.

@license_1099_p
#8.2.b. any software, hardware, or device, other than such Participant's  Contributor Version, directly or indirectly infringes any patent, then any rights  granted to You by such Participant under Sections 2.1( <a href="#section-2.1-b">b</a> )  and 2.2( <a href="#section-2.2-b">b</a> ) are revoked effective as of the date You first  made, used, sold, distributed, or had made, Modifications made by that Participant.

@license_1100_p
#8.3. If You assert a patent infringement claim against Participant alleging that such Participant's Contributor Version directly or indirectly infringes any patent where such claim is resolved (such as by license or settlement) prior to the initiation of patent infringement litigation, then the reasonable value of the licenses granted by such Participant under Sections <a href="#section-2.1">2.1</a> or <a href="#section-2.2">2.2</a> shall be taken into account in determining the amount or value of any payment or license.

@license_1101_p
#8.4. In the event of termination under Sections <a href="#section-8.1">8.1</a> or <a href="#section-8.2">8.2</a> above, all end user license agreements (excluding distributors and resellers) which have been validly granted by You or any distributor hereunder prior to termination shall survive termination.

@license_1102_h3
#9. Limitation of Liability

@license_1103_p
#Under no circumstances and under no legal theory, whether tort (including negligence), contract, or otherwise, shall you, the initial developer, any other contributor, or any distributor of covered code, or any supplier of any of such parties, be liable to any person for any indirect, special, incidental, or consequential damages of any character including, without limitation, damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses, even if such party shall have been informed of the possibility of such damages. This limitation of liability shall not apply to liability for death or personal injury resulting from such party's negligence to the extent applicable law prohibits such limitation. Some jurisdictions do not allow the exclusion or limitation of incidental or consequential damages, so this exclusion and limitation may not apply to you.

@license_1104_h3
#10. United States Government End Users

@license_1105_p
#The Covered Code is a "commercial item", as that term is defined in 48 C.F.R. 2.101 (October 1995), consisting of "commercial computer software" and "commercial computer software documentation", as such terms are used in 48 C.F.R. 12.212 (September 1995). Consistent with 48 C.F.R. 12.212 and 48 C.F.R. 227.7202-1 through 227.7202-4 (June 1995), all U.S. Government End Users acquire Covered Code with only those rights set forth herein.

@license_1106_h3
#11. Miscellaneous

@license_1107_p
#This License represents the complete agreement concerning subject matter hereof. If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable. This License shall be governed by

@license_1108_em
#Swiss</em> law provisions (except to the extent applicable law, if any, provides otherwise), excluding its conflict-of-law provisions. With respect to disputes in which at least one party is a citizen of, or an entity chartered or registered to do business in

@license_1109_em
#Switzerland</em> , any litigation relating to this License shall be subject to the jurisdiction of

@license_1110_em
#Switzerland</em> ,  with the losing party responsible for costs, including without limitation, court costs and reasonable attorneys' fees and expenses. The application of the United Nations Convention on Contracts for the International Sale of Goods is expressly excluded. Any law or regulation which provides that the language of a contract shall be construed against the drafter shall not apply to this License.

@license_1111_h3
#12. Responsibility for Claims

@license_1112_p
#As between Initial Developer and the Contributors, each party is responsible for claims and damages arising, directly or indirectly, out of its utilization of rights under this License and You agree to work with Initial Developer and Contributors to distribute such responsibility on an equitable basis. Nothing herein is intended or shall be deemed to constitute any admission of liability.

@license_1113_h3
#13. Multiple-Licensed Code

@license_1114_p
#Initial Developer may designate portions of the Covered Code as "Multiple-Licensed". "Multiple-Licensed" means that the Initial Developer permits you to utilize portions of the Covered Code under Your choice of this or the alternative licenses, if any, specified by the Initial Developer in the file described in <a href="#exhibit-a">Exhibit A</a> .

@license_1115_h3
#Exhibit A

@mainWeb_1000_h1
H2 データベース エンジン

@mainWeb_1001_p
ようこそ、無料のSQLデータベース、H2へ。H2の主な特徴は:

@mainWeb_1002_li
速度がとても速く、全ての方が無料で使用でき、ソースコードが含まれています

@mainWeb_1003_li
Javaで書かれています; GCJ (Linux) でコンパイル可能

@mainWeb_1004_li
エンベッド、サーバー、クラスターモードに対応

@mainWeb_1005_li
JDBC、 (部分的な) ODBC API; Web クライアントアプリケーション

@mainWeb_1006_h3
ダウンロード

@mainWeb_1007_td
#Version 1.0.64 (2007-12-26):

@mainWeb_1008_a
#Windows Installer (2.8 MB)

@mainWeb_1009_a
#All platforms (zip, 3.9 MB)

@mainWeb_1010_a
全てダウンロード

@mainWeb_1011_td
&nbsp;&nbsp;&nbsp;

@mainWeb_1012_h3
サポート

@mainWeb_1013_a
Google グループ (English)

@mainWeb_1014_a
Google グループ (Japanese)

@mainWeb_1015_p
e-mail はこちらから:

@mainWeb_1016_td
&nbsp;

@mainWeb_1017_h3
パフォーマンス

@mainWeb_1018_td
操作/秒 (高い方がより良い) - <a href="performance.html">このテストについての詳しい情報</a>

@mainWeb_1019_td
&nbsp;

@mainWeb_1020_h3
ニュース

@mainWeb_1021_b
ニュースフィード:

@mainWeb_1022_p
二種類から選べます: <a href="http://www.h2database.com/html/newsfeed-atom.xml" target="_blank">フルテキスト (Atom)</a>
または <a href="http://www.h2database.com/html/newsfeed-rss.xml" target="_blank">ヘッダーのみ (RSS)</a>.

@mainWeb_1023_b
Email ニュースレター:

@mainWeb_1024_p
<a href="http://groups.google.com/group/h2database-news/subscribe">
H2 データベース ニュース</a> (Googleアカウントが必要です)
に署名し、ニューリリースについての情報を入手して下さい。
あなたのemailアドレスはこのコンテンツでのみ使用されます。

@mainWeb_1025_td
&nbsp;

@mainWeb_1026_h3
寄稿する

@mainWeb_1027_p
H2の発展のため、フィードバックやバグ報告を送ったり、H2コンソールアプリケーション (ファイル h2/src/main/org/h2/server/web/res/_text_*.properties)を訳すなど、 投稿することができます。また、下にある PayPal ボタンをクリックすることで 寄付することもできます。 支援者として、あなたの名前が載ります:

@mainWeb_1028_td
&nbsp;

@mainWeb_1029_h3
フィードバック

@mainWeb_1030_td
質問や要望、その他あらゆるフィードバックはこちらから送信して下さい:

@mainWeb_1031_p
Email (任意):

@mainWeb_1032_form
メッセージ:

@main_1000_h1
H2 データベース エンジン

@main_1001_p
ようこそ、無料のSQLデータベース、H2へ

@main_1002_a
クイックスタート

@main_1003_p
Click here to get a fast overview.

@main_1004_a
チュートリアル

@main_1005_p
Go through the samples.

@main_1006_a
特徴

@main_1007_p
See what this database can do and how to use these features.

@performance_1000_h1
パフォーマンス

@performance_1001_a
#Performance Comparison

@performance_1002_a
#Application Profiling

@performance_1003_a
#Performance Tuning

@performance_1004_h2
#Performance Comparison

@performance_1005_p
#In most cases H2 is a lot faster than all other (open source and not open source) database engines. Please note this is mostly a single connection benchmark run on one computer.

@performance_1006_h3
#Embedded

@performance_1007_th
#Test Case

@performance_1008_th
#Unit

@performance_1009_th
H2

@performance_1010_th
HSQLDB

@performance_1011_th
Derby

@performance_1012_td
#Simple: Init

@performance_1013_td
#ms

@performance_1014_td
#375

@performance_1015_td
#578

@performance_1016_td
#2797

@performance_1017_td
#Simple: Query (random)

@performance_1018_td
#ms

@performance_1019_td
#250

@performance_1020_td
#344

@performance_1021_td
#1563

@performance_1022_td
#Simple: Query (sequential)

@performance_1023_td
#ms

@performance_1024_td
#171

@performance_1025_td
#250

@performance_1026_td
#1469

@performance_1027_td
#Simple: Update (random)

@performance_1028_td
#ms

@performance_1029_td
#641

@performance_1030_td
#1609

@performance_1031_td
#19265

@performance_1032_td
#Simple: Delete (sequential)

@performance_1033_td
#ms

@performance_1034_td
#172

@performance_1035_td
#516

@performance_1036_td
#6797

@performance_1037_td
#Simple: Memory Usage

@performance_1038_td
#MB

@performance_1039_td
#14

@performance_1040_td
#12

@performance_1041_td
#12

@performance_1042_td
#BenchA: Init

@performance_1043_td
#ms

@performance_1044_td
#391

@performance_1045_td
#500

@performance_1046_td
#3750

@performance_1047_td
#BenchA: Transactions

@performance_1048_td
#ms

@performance_1049_td
#5468

@performance_1050_td
#2468

@performance_1051_td
#16250

@performance_1052_td
#BenchA: Memory Usage

@performance_1053_td
#MB

@performance_1054_td
#14

@performance_1055_td
#15

@performance_1056_td
#9

@performance_1057_td
#BenchB: Init

@performance_1058_td
#ms

@performance_1059_td
#1281

@performance_1060_td
#2391

@performance_1061_td
#14938

@performance_1062_td
#BenchB: Transactions

@performance_1063_td
#ms

@performance_1064_td
#2094

@performance_1065_td
#1140

@performance_1066_td
#3828

@performance_1067_td
#BenchB: Memory Usage

@performance_1068_td
#MB

@performance_1069_td
16

@performance_1070_td
#11

@performance_1071_td
#9

@performance_1072_td
#BenchC: Init

@performance_1073_td
#ms

@performance_1074_td
#984

@performance_1075_td
#547

@performance_1076_td
#5250

@performance_1077_td
#BenchC: Transactions

@performance_1078_td
#ms

@performance_1079_td
#2860

@performance_1080_td
#58219

@performance_1081_td
#11204

@performance_1082_td
#BenchC: Memory Usage

@performance_1083_td
#MB

@performance_1084_td
#19

@performance_1085_td
#19

@performance_1086_td
#9

@performance_1087_td
#Executed Statements

@performance_1088_td
##

@performance_1089_td
#594255

@performance_1090_td
#594255

@performance_1091_td
#594255

@performance_1092_td
#Total Time

@performance_1093_td
#ms

@performance_1094_td
#14687

@performance_1095_td
#68562

@performance_1096_td
#87111

@performance_1097_td
#Statement per Second

@performance_1098_td
##

@performance_1099_td
#40461

@performance_1100_td
#8667

@performance_1101_td
#6821

@performance_1102_h3
#Client-Server

@performance_1103_th
#Test Case

@performance_1104_th
#Unit

@performance_1105_th
H2

@performance_1106_th
HSQLDB

@performance_1107_th
Derby

@performance_1108_th
PostgreSQL

@performance_1109_th
MySQL

@performance_1110_td
#Simple: Init

@performance_1111_td
#ms

@performance_1112_td
#3047

@performance_1113_td
#2547

@performance_1114_td
#6907

@performance_1115_td
#4234

@performance_1116_td
#3594

@performance_1117_td
#Simple: Query (random)

@performance_1118_td
#ms

@performance_1119_td
#3547

@performance_1120_td
#2641

@performance_1121_td
#8781

@performance_1122_td
#5375

@performance_1123_td
#3140

@performance_1124_td
#Simple: Query (sequential)

@performance_1125_td
#ms

@performance_1126_td
#3390

@performance_1127_td
#2531

@performance_1128_td
#8859

@performance_1129_td
#4906

@performance_1130_td
#3016

@performance_1131_td
#Simple: Update (random)

@performance_1132_td
#ms

@performance_1133_td
#3235

@performance_1134_td
#3531

@performance_1135_td
#22344

@performance_1136_td
#5828

@performance_1137_td
#5187

@performance_1138_td
#Simple: Delete (sequential)

@performance_1139_td
#ms

@performance_1140_td
#1421

@performance_1141_td
#1235

@performance_1142_td
#8219

@performance_1143_td
#2484

@performance_1144_td
#1829

@performance_1145_td
#Simple: Memory Usage

@performance_1146_td
#MB

@performance_1147_td
#15

@performance_1148_td
#10

@performance_1149_td
#15

@performance_1150_td
#0

@performance_1151_td
#0

@performance_1152_td
#BenchA: Init

@performance_1153_td
#ms

@performance_1154_td
#2687

@performance_1155_td
#2343

@performance_1156_td
#6000

@performance_1157_td
#4000

@performance_1158_td
#4000

@performance_1159_td
#BenchA: Transactions

@performance_1160_td
#ms

@performance_1161_td
#12938

@performance_1162_td
#9579

@performance_1163_td
#26610

@performance_1164_td
#16250

@performance_1165_td
#10782

@performance_1166_td
#BenchA: Memory Usage

@performance_1167_td
#MB

@performance_1168_td
#15

@performance_1169_td
16

@performance_1170_td
#10

@performance_1171_td
#0

@performance_1172_td
#0

@performance_1173_td
#BenchB: Init

@performance_1174_td
#ms

@performance_1175_td
#9641

@performance_1176_td
#10094

@performance_1177_td
#28282

@performance_1178_td
#17468

@performance_1179_td
#11344

@performance_1180_td
#BenchB: Transactions

@performance_1181_td
#ms

@performance_1182_td
#3984

@performance_1183_td
#3312

@performance_1184_td
#6671

@performance_1185_td
#7797

@performance_1186_td
#3375

@performance_1187_td
#BenchB: Memory Usage

@performance_1188_td
#MB

@performance_1189_td
16

@performance_1190_td
#13

@performance_1191_td
#8

@performance_1192_td
#0

@performance_1193_td
#0

@performance_1194_td
#BenchC: Init

@performance_1195_td
#ms

@performance_1196_td
#2031

@performance_1197_td
#1516

@performance_1198_td
#7391

@performance_1199_td
#2297

@performance_1200_td
#3406

@performance_1201_td
#BenchC: Transactions

@performance_1202_td
#ms

@performance_1203_td
#9750

@performance_1204_td
#58734

@performance_1205_td
#20937

@performance_1206_td
#11172

@performance_1207_td
#7469

@performance_1208_td
#BenchC: Memory Usage

@performance_1209_td
#MB

@performance_1210_td
#20

@performance_1211_td
#15

@performance_1212_td
#14

@performance_1213_td
#0

@performance_1214_td
#0

@performance_1215_td
#Executed Statements

@performance_1216_td
##

@performance_1217_td
#594255

@performance_1218_td
#594255

@performance_1219_td
#594255

@performance_1220_td
#594255

@performance_1221_td
#594255

@performance_1222_td
#Total Time

@performance_1223_td
#ms

@performance_1224_td
#55671

@performance_1225_td
#98063

@performance_1226_td
#151001

@performance_1227_td
#81811

@performance_1228_td
#57142

@performance_1229_td
#Statement per Second

@performance_1230_td
##

@performance_1231_td
#10674

@performance_1232_td
#6059

@performance_1233_td
#3935

@performance_1234_td
#7263

@performance_1235_td
#10399

@performance_1236_h3
#Benchmark Results and Comments

@performance_1237_h4
H2

@performance_1238_p
#Version 1.0 (2007-09-15) was used for the test. For simpler operations, the performance of H2 is about the same as for HSQLDB. For more complex queries, the query optimizer is very important. However H2 is not very fast in every case, certain kind of queries may still be slow. One situation where is H2 is slow is large result sets, because they are buffered to disk if more than a certain number of records are returned. The advantage of buffering is, there is no limit on the result set size. The open/close time is almost fixed, because of the file locking protocol: The engine waits 20 ms after opening a database to ensure the database files are not opened by another process.

@performance_1239_h4
HSQLDB

@performance_1240_p
#Version 1.8.0.8 was used for the test. Cached tables are used in this test (hsqldb.default_table_type=cached), and the write delay is 1 second (SET WRITE_DELAY 1). HSQLDB is fast when using simple operations. HSQLDB is very slow in the last test (BenchC: Transactions), probably because is has a bad query optimizer. One query where HSQLDB is slow is a two-table join:

@performance_1241_p
#The PolePosition benchmark also shows that the query optimizer does not do a very good job for some queries. A disadvantage in HSQLDB is the slow startup / shutdown time (currently not listed) when using bigger databases. The reason is, a backup of the database is created whenever the database is opened or closed.

@performance_1242_h4
Derby

@performance_1243_p
#Version 10.3.1.4 was used for the test. Derby is clearly the slowest embedded database in this test. This seems to be a structural problem, because all operations are really slow. It will not be easy for the developers of Derby to improve the performance to a reasonable level. A few problems have been identified: Leaving autocommit on is a problem for Derby. If it is switched off during the whole test, the results are about 20% better for Derby.

@performance_1244_h4
PostgreSQL

@performance_1245_p
#Version 8.1.4 was used for the test. The following options where changed in postgresql.conf: fsync = off, commit_delay = 1000. PostgreSQL is run in server mode. It looks like the base performance is slower than MySQL, the reason could be the network layer. The memory usage number is incorrect, because only the memory usage of the JDBC driver is measured.

@performance_1246_h4
MySQL

@performance_1247_p
#Version 5.0.22 was used for the test. MySQL was run with the InnoDB backend. The setting innodb_flush_log_at_trx_commit (found in the my.ini file) was set to 0. Otherwise (and by default), MySQL is really slow (around 140 statements per second in this test) because it tries to flush the data to disk for each commit. For small transactions (when autocommit is on) this is really slow. But many use cases use small or relatively small transactions. Too bad this setting is not listed in the configuration wizard, and it always overwritten when using the wizard. You need to change this setting manually in the file my.ini, and then restart the service. The memory usage number is incorrect, because only the memory usage of the JDBC driver is measured.

@performance_1248_h4
#Firebird

@performance_1249_p
#Firebird 1.5 (default installation) was tested, but the results are not published currently. It is possible to run the performance test with the Firebird database, and any information on how to configure Firebird for higher performance are welcome.

@performance_1250_h4
#Why Oracle / MS SQL Server / DB2 are Not Listed

@performance_1251_p
#The license of these databases does not allow to publish benchmark results. This doesn't mean that they are fast. They are in fact quite slow, and need a lot of memory. But you will need to test this yourself. SQLite was not tested because the JDBC driver doesn't support transactions.

@performance_1252_h3
#About this Benchmark

@performance_1253_h4
#Number of Connections

@performance_1254_p
#This is mostly a single-connection benchmark. BenchB uses multiple connections, the other tests one connection.

@performance_1255_h4
#Real-World Tests

@performance_1256_p
#Good benchmarks emulate real-world use cases. This benchmark includes 3 test cases: A simple test case with one table and many small updates / deletes. BenchA is similar to the TPC-A test, but single connection / single threaded (see also: www.tpc.org). BenchB is similar to the TPC-B test, using multiple connections (one thread per connection). BenchC is similar to the TPC-C test, but single connection / single threaded.

@performance_1257_h4
#Comparing Embedded with Server Databases

@performance_1258_p
#This is mainly a benchmark for embedded databases (where the application runs in the same virtual machine than the database engine). However MySQL and PostgreSQL are not Java databases and cannot be embedded into a Java application. For the Java databases, both embedded and server modes are tested.

@performance_1259_h4
#Test Platform

@performance_1260_p
#This test is run on Windows XP with the virus scanner switched off. The VM used is Sun JDK 1.5.

@performance_1261_h4
#Multiple Runs

@performance_1262_p
#When a Java benchmark is run first, the code is not fully compiled and therefore runs slower than when running multiple times. A benchmark should always run the same test multiple times and ignore the first run(s). This benchmark runs three times, the last run counts.

@performance_1263_h4
#Memory Usage

@performance_1264_p
#It is not enough to measure the time taken, the memory usage is important as well. Performance can be improved in databases by using a bigger in-memory cache, but there is only a limited amount of memory available on the system. HSQLDB tables are kept fully in memory by default, this benchmark uses 'disk based' tables for all databases. Unfortunately, it is not so easy to calculate the memory usage of PostgreSQL and MySQL, because they run in a different process than the test. This benchmark currently does not print memory usage of those databases.

@performance_1265_h4
#Delayed Operations

@performance_1266_p
#Some databases delay some operations (for example flushing the buffers) until after the benchmark is run. This benchmark waits between each database tested, and each database runs in a different process (sequentially).

@performance_1267_h4
#Transaction Commit / Durability

@performance_1268_p
#Durability means transaction committed to the database will not be lost. Some databases (for example MySQL) try to enforce this by default by calling fsync() to flush the buffers, but most hard drives don't actually flush all data. Calling fsync() slows down transaction commit a lot, but doesn't always make data durable. When comparing the results, it is important to think about the effect. Many database suggest to 'batch' operations when possible. This benchmark switches off autocommit when loading the data, and calls commit after each 1000 inserts. However many applications need 'short' transactions at runtime (a commit after each update). This benchmark commits after each update / delete in the simple benchmark, and after each business transaction in the other benchmarks. For databases that support delayed commits, a delay of one second is used.

@performance_1269_h4
#Using Prepared Statements

@performance_1270_p
#Wherever possible, the test cases use prepared statements.

@performance_1271_h4
#Currently Not Tested: Startup Time

@performance_1272_p
#The startup time of a database engine is important as well for embedded use. This time is not measured currently. Also, not tested is the time used to create a database and open an existing database. Here, one (wrapper) connection is opened at the start, and for each step a new connection is opened and then closed. That means the Open/Close time listed is for opening a connection if the database is already in use.

@performance_1273_h3
#PolePosition Benchmark

@performance_1274_p
#The PolePosition is an open source benchmark. The algorithms are all quite simple. It was developed / sponsored by db4o.

@performance_1275_th
#Test Case

@performance_1276_th
#Unit

@performance_1277_th
H2

@performance_1278_th
HSQLDB

@performance_1279_th
MySQL

@performance_1280_td
#Melbourne write

@performance_1281_td
#ms

@performance_1282_td
#369

@performance_1283_td
#249

@performance_1284_td
#2022

@performance_1285_td
#Melbourne read

@performance_1286_td
#ms

@performance_1287_td
#47

@performance_1288_td
#49

@performance_1289_td
#93

@performance_1290_td
#Melbourne read_hot

@performance_1291_td
#ms

@performance_1292_td
#24

@performance_1293_td
#43

@performance_1294_td
#95

@performance_1295_td
#Melbourne delete

@performance_1296_td
#ms

@performance_1297_td
#147

@performance_1298_td
#133

@performance_1299_td
#176

@performance_1300_td
#Sepang write

@performance_1301_td
#ms

@performance_1302_td
#965

@performance_1303_td
#1201

@performance_1304_td
#3213

@performance_1305_td
#Sepang read

@performance_1306_td
#ms

@performance_1307_td
#765

@performance_1308_td
#948

@performance_1309_td
#3455

@performance_1310_td
#Sepang read_hot

@performance_1311_td
#ms

@performance_1312_td
#789

@performance_1313_td
#859

@performance_1314_td
#3563

@performance_1315_td
#Sepang delete

@performance_1316_td
#ms

@performance_1317_td
#1384

@performance_1318_td
#1596

@performance_1319_td
#6214

@performance_1320_td
#Bahrain write

@performance_1321_td
#ms

@performance_1322_td
#1186

@performance_1323_td
#1387

@performance_1324_td
#6904

@performance_1325_td
#Bahrain query_indexed_string

@performance_1326_td
#ms

@performance_1327_td
#336

@performance_1328_td
#170

@performance_1329_td
#693

@performance_1330_td
#Bahrain query_string

@performance_1331_td
#ms

@performance_1332_td
#18064

@performance_1333_td
#39703

@performance_1334_td
#41243

@performance_1335_td
#Bahrain query_indexed_int

@performance_1336_td
#ms

@performance_1337_td
#104

@performance_1338_td
#134

@performance_1339_td
#678

@performance_1340_td
#Bahrain update

@performance_1341_td
#ms

@performance_1342_td
#191

@performance_1343_td
#87

@performance_1344_td
#159

@performance_1345_td
#Bahrain delete

@performance_1346_td
#ms

@performance_1347_td
#1215

@performance_1348_td
#729

@performance_1349_td
#6812

@performance_1350_td
#Imola retrieve

@performance_1351_td
#ms

@performance_1352_td
#198

@performance_1353_td
#194

@performance_1354_td
#4036

@performance_1355_td
#Barcelona write

@performance_1356_td
#ms

@performance_1357_td
#413

@performance_1358_td
#832

@performance_1359_td
#3191

@performance_1360_td
#Barcelona read

@performance_1361_td
#ms

@performance_1362_td
#119

@performance_1363_td
#160

@performance_1364_td
#1177

@performance_1365_td
#Barcelona query

@performance_1366_td
#ms

@performance_1367_td
#20

@performance_1368_td
#5169

@performance_1369_td
#101

@performance_1370_td
#Barcelona delete

@performance_1371_td
#ms

@performance_1372_td
#388

@performance_1373_td
#319

@performance_1374_td
#3287

@performance_1375_td
#Total

@performance_1376_td
#ms

@performance_1377_td
#26724

@performance_1378_td
#53962

@performance_1379_td
#87112

@performance_1380_h2
#Application Profiling

@performance_1381_h3
#Analyze First

@performance_1382_p
#Before trying to optimize the performance, it is important to know where the time is actually spent. The same is true for memory problems. Premature or 'blind' optimization should be avoided, as it is not an efficient way to solve the problem. There are various ways to analyze the application. In some situations it is possible to compare two implementations and use System.currentTimeMillis() to find out which one is faster. But this does not work for complex applications with many modules, and for memory problems. A very good tool to measure both the memory and the CPU is the <a href="http://www.yourkit.com">YourKit Java Profiler</a> . This tool is also used to optimize the performance and memory footprint of this database engine.

@performance_1383_h2
#Database Performance Tuning

@performance_1384_h3
#Virus Scanners

@performance_1385_p
#Some virus scanners scan files every time they are accessed. It is very important for performance that database files are not scanned for viruses. The database engine does never interprets the data stored in the files as programs, that means even if somebody would store a virus in a database file, this would be harmless (when the virus does not run, it cannot spread). Some virus scanners allow excluding file endings. Make sure files ending with .db are not scanned.

@performance_1386_h3
トレースオプションを使用する

@performance_1387_p
#If the main performance hot spots are in the database engine, in many cases the performance can be optimized by creating additional indexes, or changing the schema. Sometimes the application does not directly generate the SQL statements, for example if an O/R mapping tool is used. To view the SQL statements and JDBC API calls, you can use the trace options. For more information, see <a href="features.html#trace_options">Using the Trace Options</a> .

@performance_1388_h3
#Index Usage

@performance_1389_p
#This database uses indexes to improve the performance of SELECT, UPDATE and DELETE statements. If a column is used in the WHERE clause of a query, and if an index exists on this column, then the index can be used. Multi-column indexes are used if all or the first columns of the index are used. Both equality lookup and range scans are supported. Indexes are not used to order result sets: The results are sorted in memory if required. Indexes are created automatically for primary key and unique constraints. Indexes are also created for foreign key constraints, if required. For other columns, indexes need to be created manually using the CREATE INDEX statement.

@performance_1390_h3
#Optimizer

@performance_1391_p
#This database uses a cost based optimizer. For simple and queries and queries with medium complexity (less than 7 tables in the join), the expected cost (running time) of all possible plans is calculated, and the plan with the lowest cost is used. For more complex queries, the algorithm first tries all possible combinations for the first few tables, and the remaining tables added using a greedy algorithm (this works well for most joins). Afterwards a genetic algorithm is used to test at most 2000 distinct plans. Only left-deep plans are evaluated.

@performance_1392_h3
#Expression Optimization

@performance_1393_p
#After the statement is parsed, all expressions are simplified automatically if possible. Operations are evaluated only once if all parameters are constant. Functions are also optimized, but only if the function is constant (always returns the same result for the same parameter values). If the WHERE clause is always false, then the table is not accessed at all.

@performance_1394_h3
#COUNT(*) Optimization

@performance_1395_p
#If the query only counts all rows of a table, then the data is not accessed. However, this is only possible if no WHERE clause is used, that means it only works for queries of the form SELECT COUNT(*) FROM table.

@performance_1396_h3
#Updating Optimizer Statistics / Column Selectivity

@performance_1397_p
#When executing a query, at most one index per joined table can be used. If the same table is joined multiple times, for each join only one index is used. Example: for the query SELECT * FROM TEST T1, TEST T2 WHERE T1.NAME='A' AND T2.ID=T1.ID, two index can be used, in this case the index on NAME for T1 and the index on ID for T2.

@performance_1398_p
#If a table has multiple indexes, sometimes more than one index could be used. Example: if there is a table TEST(ID, NAME, FIRSTNAME) and an index on each column, then two indexes could be used for the query SELECT * FROM TEST WHERE NAME='A' AND FIRSTNAME='B', the index on NAME or the index on FIRSTNAME. It is not possible to use both indexes at the same time. Which index is used depends on the selectivity of the column. The selectivity describes the 'uniqueness' of values in a column. A selectivity of 100 means each value appears only once, and a selectivity of 1 means the same value appears in many or most rows. For the query above, the index on NAME should be used if the table contains more distinct names than first names.

@performance_1399_p
#The SQL statement ANALYZE can be used to automatically estimate the selectivity of the columns in the tables. This command should be run from time to time to improve the query plans generated by the optimizer.

@quickstartText_1000_h1
クイックスタート

@quickstartText_1001_a
アプリケーションのエンベッドH2

@quickstartText_1002_a
H2 コンソール アプリケーション

@quickstartText_1003_h2
アプリケーションのエンベッドH2

@quickstartText_1004_p
このデータベースはエンベッドモード、またはサーバーモードで使用可能です。エンベッドモードで使用する場合、以下を行う必要があります:

@quickstartText_1005_li
クラスパスに <code>h2.jar</code> を追加する

@quickstartText_1006_li
JDBCドライバークラスを使用する: <code>org.h2.Driver</code>

@quickstartText_1007_li
データベースURL <code>jdbc:h2:~/test</code> ユーザーホームディレクトリ内の "test" でデータベースを開く

@quickstartText_1008_h2
H2 コンソール アプリケーション

@quickstartText_1009_p
このコンソールはブラウザインターフェースを使ってSQL データベースにアクセスします。

@quickstartText_1010_p
Windows XPをご使用でなかったり、期待通りに機能しない場合は、<a href="tutorial.html">チュートリアル</a>内の詳細説明をご覧下さい。

@quickstartText_1011_h3
手順

@quickstartText_1012_h4
インストール

@quickstartText_1013_p
Windows インストーラーを使用してソフトウェアをインストールしましょう (まだインストールされていない場合)。

@quickstartText_1014_h4
コンソールを起動する

@quickstartText_1015_p
<span class="button">スタート</span>、
<span class="button">すべてのプログラム</span>、
<span class="button">H2</span>、
<span class="button">H2 Console (Command Line)</span>をクリックします:

@quickstartText_1016_p
コンソールウィンドウが 開きます:

@quickstartText_1017_p
新しいブラウザで URL http://localhost:8082/ にアクセスして下さい。 ファイアーウォールによるセキュリティ警告を設定することができます。外部ネットワークから あなたのマシンのデータベースにアクセスされたくないのであれば、ファイアーウォールが他の接続を遮断します。 ローカル接続のみ必要です。

@quickstartText_1018_h4
ログイン

@quickstartText_1019_p
<span class="button">Generic H2</span>を選び、<span class="button">Connect</span>をクリックします:

@quickstartText_1020_p
ログインされました。

@quickstartText_1021_h4
サンプル

@quickstartText_1022_p
<span class="button">Sample SQL Script</span>をクリックします。:

@quickstartText_1023_p
SQLコマンドがコマンドエリアに表示されます。

@quickstartText_1024_h4
実行する

@quickstartText_1025_p
<span class="button">Run</span>をクリックします:

@quickstartText_1026_p
左側のデータベースアイコンの下に、 新しいテーブル TEST が追加されます。動作とステートメントの結果は、スクリプトの下に表示されます。

@quickstartText_1027_h4
切断

@quickstartText_1028_p
<span class="button">Disconnect</span>をクリックします:

@quickstartText_1029_p
データベースを閉じます

@quickstartText_1030_h4
終了

@quickstartText_1031_p
コンソールウィンドウを閉じます。詳細は<a href="tutorial.html">チュートリアル</a>をご覧下さい。

@search_1000_b
検索:

@search_1001_td
Highlight keyword(s)

@search_1002_a
ホーム

@search_1003_a
クイックスタート

@search_1004_a
インストール

@search_1005_a
チュートリアル

@search_1006_a
特徴

@search_1007_a
パフォーマンス

@search_1008_a
進歩したトピックス

@search_1009_b
参照

@search_1010_a
SQL文法

@search_1011_a
関数

@search_1012_a
データ型

@search_1013_a
Javadoc JDBC API

@search_1014_a
PDFドキュメント

@search_1015_b
付録

@search_1016_a
ビルド

@search_1017_a
歴史とロードマップ

@search_1018_a
FAQ

@search_1019_a
ライセンス

@tutorial_1000_h1
チュートリアル

@tutorial_1001_a
起動とH2コンソールの使用

@tutorial_1002_a
JDBCを使用してデータベースに接続

@tutorial_1003_a
新しいデータベースを作成する

@tutorial_1004_a
サーバーを使用する

@tutorial_1005_a
Hibernateを使用する

@tutorial_1006_a
Webアプリケーションで データベースを使用する

@tutorial_1007_a
CSV (Comma Separated Values) サポート

@tutorial_1008_a
アップグレード、 バックアップ、修復

@tutorial_1009_a
OpenOffice Baseを使用する

@tutorial_1010_a
Java Web Start / JNLP

@tutorial_1011_a
フルテキストサーチ

@tutorial_1012_h2
起動とH2コンソールの使用

@tutorial_1013_p
このアプリケーションはブラウザインターフェースを使ってSQLデータベースにアクセスします。 これは、H2データベース、またはJDBC APIをサポートする別のデータベースであるかもしれません。

@tutorial_1014_p
これはクライアント / サーバーアプリケーションで、サーバーとクライアントの両方実行されることが必要です。

@tutorial_1015_p
プラットフォームと環境によって、アプリケーションの起動方法が多数あります:

@tutorial_1016_th
OS

@tutorial_1017_th
起動

@tutorial_1018_td
Windows

@tutorial_1019_td
[スタート]、 [すべてのプログラム]、 [H2]、 [H2 Console]をクリックします

@tutorial_1020_td
正しく動作したら、 システムトレイにアイコンが追加されます:

@tutorial_1021_td
システムトレイアイコンが表示されなかったら、 Javaが正しくインストールされていないのかもしれません。  (この場合は、 他のアプリケーション起動方法を試して下さい) ブラウザウィンドウが開き、ログインページが表示されます。 (URL: http://localhost:8082/)

@tutorial_1022_td
Windows

@tutorial_1023_td
ファイルブラウザを開き、h2/binフォルダまで進み、h2.batをダブルクリックします。

@tutorial_1024_td
正しく動作したら、システムトレイにアイコンが追加されます。 問題があれば、コンソールウィンドウにエラーメッセージが表示されます。 ブラウザウィンドウが開き、ログインページが表示されます。 (URL: http://localhost:8082/)

@tutorial_1025_td
Any

@tutorial_1026_td
コンソールウィンドウを開き、'h2/lib'ディレクトリまで進み、下記を実行します:

@tutorial_1027_h3
ファイアウォール

@tutorial_1028_p
サーバーを起動させたら、ファイアウォールによるセキュリティ警告を受けるでしょう (1度インストールした場合)。外部ネットワークからあなたのマシンのデータベースにアクセスされたくないのであれば、ファイアーウォールが他の接続を遮断します。ローカルマシンからの接続はまだつながっています。他のコンピュータから、このコンピューターのデータベースにアクセスしたい場合のみ、 ファイアウォールでリモート接続を許可する必要があります。

@tutorial_1029_p
小さなファイアーウォールはすでにサーバーに組み込まれています。 デフォルトによるこの構造は、他のコンピューターがサーバーにアクセスすることを許可していません。 これは、好きなように変更することができます (他のコンピューターからの接続を許可します)。

@tutorial_1030_h3
ネイティブ バージョン

@tutorial_1031_p
ネイティブ バージョンはJavaを必要としていません。なぜなら、これはGCJを使用してコンパイルされるからです。しかし、H2は現在、Windows上のGCJプロジェクトでは実行されません。異なったプラットフォームでソフトウェアをコンパイルすることが可能です。

@tutorial_1032_h3
Javaをテストする

@tutorial_1033_p
インストールしたJavaのバージョンを調べるためには、 コマンドプロンプトを開き、 下記を入力します:

@tutorial_1034_p
もしエラーメッセージが表示されたら、Javaのバイナリディレクトリを環境変数のPathに追加します。

@tutorial_1035_h3
エラーメッセージ 'Port is in use'

@tutorial_1036_p
ひとつのH2コンソールのみ起動することができます。 そうでなければ、次のようなエラーメッセージが表示されます:
<code>Port is in use, maybe another ... server already running on...</code>
複数のコンソールアプリケーションを同じコンピューターで起動することは可能です (異なったポートを使用します)、しかし、コンソールが複数の同時接続を維持するということは、普通は必要とされていません。

@tutorial_1037_h3
他のポートを使用する

@tutorial_1038_p
もしポートが他のアプリケーションによって使用されている場合は、H2コンソールを異なったポートで起動したいはずです。これは、.h2.server.properties.ファイル内のポートを変更することにより実行できます。このファイルはユーザディレクトリ内に格納されています (Windowsでは通常、"Documents and Settings/&lt;ユーザ名>")。関連する項目はwebPortです。

@tutorial_1039_h3
起動成功

@tutorial_1040_p
コンソールウィンドウからのサーバー起動が成功したら、新しいウィンドウが開き、 下記のように表示されます:

@tutorial_1041_p
ウィンドウ内をクリックしないで下さい; アプリケーションが遮断されてしまいます (Fast-Edit モードが有効の場合)。

@tutorial_1042_h3
ブラウザを使用してサーバーに接続

@tutorial_1043_p
サーバーの接続に成功したら、webブラウザを使用してサーバーに接続することができます。ブラウザにはJavaScript、フレーム、カスケードスタイルシート (css)のサポートが必要です。もし同じコンピューターのブラウザでサーバーを起動したら、 http://localhost:8082 へアクセスしてください。他のコンピューターからアプリケーションに接続したい場合は、 サーバーのIPアドレスを用意することが必要です。 例: http://192.168.0.2:8082 サーバー側でSSLを使用したい場合は、URLをHTTPSから始めます。

@tutorial_1044_h3
複数の同時セッション

@tutorial_1045_p
複数の同時ブラウザセッションがサポートされています。 データベースオブジェクトはサーバーに属しているため、同時接続の数はサーバーアプリケーションの利用可能メモリによって制限されています。

@tutorial_1046_h3
アプリケーションプロパティ

@tutorial_1047_p
サーバーを起動するとローカルのホームディレクトリに .h2.server.properties と呼ばれるファイル構成が作成されます。Windowsのインストールでは、このファイルは will be in the directory C:\Documents and Settings\[ユーザ名]のディレクトリ内にあります。このファイルはアプリケーションのセッティングに含まれています。

@tutorial_1048_h3
ログイン

@tutorial_1049_p
ログインページでは、データベースに接続するための接続情報を設定する必要があります。 JDBCドライバをデータベースのクラスに設定し、JDBCのURL、ユーザ名とパスワードを入力します。 完了したら [Connect] をクリックします。

@tutorial_1050_p
保存された設定をあらかじめ保存し、再び使用することができます。設定はアプリケーションプロパティファイルに記憶されます。

@tutorial_1051_h3
エラーメッセージ

@tutorial_1052_p
エラーメッセージは赤で表示されます。 メッセージをクリックすることによって、例外の記録の表示、非表示を切り替えることができます。

@tutorial_1053_h3
データベースドライバの追加

@tutorial_1054_p
H2DRIVERSかCLASSPATHの環境変数に、ドライバのJarファイルの位置を追加することにより、データベースドライバの追加を行うことができます。 例 (Windowsの場合): データベースドライバのライブラリに C:\Programs\hsqldb\lib\hsqldb.jar を追加し、H2DRIVERSの環境変数に C:\Programs\hsqldb\lib\hsqldb.jar を設定します。

@tutorial_1055_p
複数のドライバを設定することも可能です; それぞれのパスは ';' (Windows) や ':' (他のOS) で区切ります。 パス名内のスペースは有効です。設定は引用されません。

@tutorial_1056_p
ドライバの追加はJavaバージョンのみでサポートされています (この特徴はネイティブバージョンではサポートされていません)。

@tutorial_1057_h3
アプリケーションを使用する

@tutorial_1058_p
アプリケーションは3つのメインパネルを保持しています。上部のツールバー、左側のツリーとクエリ、右側の結果表示パネルです。データベースオブジェクト (例; テーブル) は左側のパネルに一覧表示されます。クエリパネルにSQLコマンドを打ち、 'Run' をクリックします。 コマンドの結果は、コマンドのすぐ下に表示されます。

@tutorial_1059_h3
テーブル名、またはカラム名をインサートする

@tutorial_1060_p
テーブル名やカラム名は、ツリー内のテーブル名、カラム名をクリックすることによってスクリプトにインサートすることができます。クエリが空の時にテーブルをクリックすると、 'SELECT * FROM ...' も同様に追加されます。 クエリを入力している間、使用されているテーブルはツリー内で自動的に拡張されます。例えば、 'SELECT * FROM TEST T WHERE T.' と入力すると、ツリー内のTESTテーブルは自動的に拡張されます。

@tutorial_1061_h3
切断とアプリケーションの終了

@tutorial_1062_p
ブラウザでは、ツールバーパネルの 'Disconnect' をクリックします。データベースからログアウトします。しかし、サーバーはまだ接続されていて、 新しいセッションを受け入れる準備をしています。

@tutorial_1063_p
サーバーを止めるためには、システムトレイアイコンを右クリックし、 [Exit] を選択します。もしアイコンが表示されていないのであれば、 (別の方法で実行した場合) サーバーが実行されたコンソール上で [Ctrl]+[C] を押すか (Windowsの場合)、コンソールウィンドウを閉じます。

@tutorial_1064_h2
JDBCを使用してデータベースに接続

@tutorial_1065_p
#To connect to a database, a Java application first needs to load the database driver, and then get a connection. A simple way to do that is using the following code:

@tutorial_1066_p
このコードは最初にドライバをロードして (Class.forName())、 接続を開始します (DriverManager.getConnection())。 このドライバの名前は全てのケースにおいて "org.h2.Driver" です。 データベースに認識されるため、データベースのURLは常に jdbc:h2: から始まります。 getConnection() 内の2番目のパラメーターはユーザ名を指しています ('sa' はこの場合、システム管理者を表しています)。3番目のパラメーターはパスワードです。このデータベースでは、ユーザ名は大文字と小文字を区別していませんが、パスワードは大文字と小文字を区別しています。

@tutorial_1067_h2
新しいデータベースを作成する

@tutorial_1068_p
初期設定では、データベースの指定されたURLがまだ存在しない場合、自動的に新しい (空の) データベースが作られます。

@tutorial_1069_h2
サーバーを使用する

@tutorial_1070_p
H2は現在、3つのサーバーをサポートしています: Webサーバー、TCPサーバー、ODBCサーバーです。 これらのサーバーは異なった方法で起動します。

@tutorial_1071_h3
コマンドラインから起動する

@tutorial_1072_p
初期設定でコマンドラインからサーバーを起動させるには、次のように実行します。

@tutorial_1073_p
サーバーはデフォルトオプションで起動します。オプションの一覧を取得するには、次のように実行します。

@tutorial_1074_p
異なったポートの使用が可能なオプションや、サーバーの一部を起動、終了させるオプションなどがあります。 詳細はサーバーツールのAPIドキュメントをご覧下さい。

@tutorial_1075_h3
TCPサーバーに接続する

@tutorial_1076_p
データベースへリモート接続するためには、TCPサーバーを使用します。次のドライバとデータベースURLを利用します:

@tutorial_1077_li
JDBCドライバクラス: org.h2.Driver

@tutorial_1078_li
データベースURL: jdbc:h2:tcp://localhost/~/test

@tutorial_1079_p
データベースURLについての詳細は、特徴内のページをご覧下さい。

@tutorial_1080_h3
アプリケーション内で起動する

@tutorial_1081_p
アプリケーション内からサーバーを起動、終了することも可能です。 以下はサンプルコードです:

@tutorial_1082_h3
他の過程からTCPサーバーを終了する

@tutorial_1083_p
TCPサーバーは他の過程から終了することができます。 コマンドラインからサーバーを終了するには、次のように実行します:

@tutorial_1084_p
ユーザアプリケーションからサーバーを終了するには、次のコードを使用します:

@tutorial_1085_p
この機能はサーバー上の System.exit を呼んでいます。この機能は、データベースが次回起動された時のリカバリーを回避するため、データベースへの全ての接続が切断された後に呼ばれます。リモートサーバーを終了するには、サーバー上でリモート接続が可能である必要があります。

@tutorial_1086_h3
サーバーの制限

@tutorial_1087_p
現在、サーバーやクラスターモードを使用する時にいくつかの制限があります:

@tutorial_1088_li
Statement.cancel() はエンベッドモードのみサポートされています。接続はサーバー、またはクラスターモードで1度にひとつのオペレーションで実行され、 このオペレーションが終了するまで接続は遮断されます。

@tutorial_1089_h2
Hibernateを使用する

@tutorial_1090_p
このデータベースはHibernate version 3.1 と以降の新しいバージョンをサポートしています。 HSQLDB Dialect、または H2 Dialectは src/tools/org/h2/tools/hibernate/H2Dialect.txt ファイル内で使用可能です。 H2 dialectは Hibernateのより新しいバージョンに含まれています。H2 dialectが含まれていないバージョンでは、 src\org\hibernate\dialect (Hibernate 3.1の場合) フォルダ内のファイルをコピーし、 H2Dialect.java にファイル名を変更し、 Hibernateを再びコンパイルします。

@tutorial_1091_h2
Webアプリケーションでデータベースを使用する

@tutorial_1092_p
Webアプリケーション内からデータベースに接続するには様々な方法があります。 以下はTomcatかJBossを使用の場合のいくつかの例です。

@tutorial_1093_h3
エンベッドモード

@tutorial_1094_p
(現在)最も簡単なソリューションはエンベッドモードでデータベースを使用することです。 それは、アプリケーションが起動する時や (良いソリューションは Servletリスナーを使用します。下記参照)、セッションが起動する時、アプリケーションにおける接続が開始するということを意味します。データベースは、セッションやアプリケーションが同じ過程で実行している限り、多様なセッションやアプリケーションから同時に接続されることが可能です。 多くのServletコンテナは (例； Tomcat) ただひとつのプロセスで利用されるので、問題はありません。 (Tomcatをクラスターモードで起動している場合を除いて)。 Tomcatはマルチスレッドとマルチクラスローダーを使用しています。もし複数のアプリケーションが同じデータベースに同時にアクセスする場合、データベースjarをshared/lib、またはserver/libディレクトリに置く必要があります。 webアプリケーションが起動した時にデータベースを開き、webアプリケーションが終了した時にデータベースを閉じるのが良い方法です。もし複数のアプリケーションを使用する場合、そのうちひとつのアプリケーションをこのように動作することが必要です。アプリケーションでは、セッションごとにひとつの接続を使うか、リクエスト(アクション)ごとにひとつの接続を使うという概念があります。これらの接続はできる限り、使用後に終了させます(しかし、終了させなくても悪くはありません)。

@tutorial_1095_h3
サーバーモード

@tutorial_1096_p
サーバーモードは類似していますが、他のプロセスでサーバーを起動させることを許可しています。

@tutorial_1097_h3
データベースの起動と終了にServletリスナーを使用する

@tutorial_1098_p
以下を web.xmlファイルに追記して下さい。 (context-paramとfilterの間):

@tutorial_1099_p
データベースへのアクセス方法についての詳細は、DbStarter.javaコードをご覧下さい。

@tutorial_1100_h2
CSV (Comma Separated Values) サポート

@tutorial_1101_p
データベースにCSVREADとCSVWRITEの関数を使用することで、 CSVファイルサポートを使用することができ、スタンドアロンツールとしてデータベースの外でCSVライブラリを使用することができます。

@tutorial_1102_h3
データベース内からCSVファイルに書き込む

@tutorial_1103_p
クエリからCSVファイルを作成するのに、組込み関数 CSVWRITEを使用することができます。例:

@tutorial_1104_h3
データベース内からCSVファイルを読み込む

@tutorial_1105_p
CSVREAD関数を使用してCSVファイルを読み込むことができます。 例:

@tutorial_1106_h3
JavaアプリケーションからCSVファイルに書き込む

@tutorial_1107_p
データベースを全く使用しなくても、JavaアプリケーションでCSVツールを使用することができます。 例:

@tutorial_1108_h3
JavaアプリケーションからCSVファイルを読み込む

@tutorial_1109_p
データベースを開かなくてもCSVファイルを読み込むことができます。 例:

@tutorial_1110_h2
アップグレード、 バックアップ、修復

@tutorial_1111_h3
データベースのアップグレー

@tutorial_1112_p
あるバージョンのデータベースエンジンを次のバージョンにアップグレードする際の推奨する方法は、 古いエンジンを使って(SQLスクリプトのフォームでの)データベースのバックアップを作成し、新しいエンジンを使ってSQLスクリプトを実行します。

@tutorial_1113_h3
バックアップ

@tutorial_1114_p
異なった方法のデータベースのバックアップがあります。例えば、データベースファイルをコピーすることが可能です。しかしながら、この方法はデータベースが使用されている間は推奨しません。データベースは人が判読しやすく、極めて大きいというわけではありません。データベースバックアップの推奨する方法は、圧縮したSQLスクリプトを作成することです。この方法は、バックアップツールを使用することで可能です:

@tutorial_1115_p
オプションについての情報は、SQLコマンドスクリプトをご覧下さい。バックアップは遠隔で行えますが、ファイルはサーバー側に作られます。サーバーからファイルを取るのに、ビルトインFTPサーバーを使用することができます。データベースのバックアップを作るのに、SQLコマンドスクリプトを 使用することもできます。

@tutorial_1116_h3
修復

@tutorial_1117_p
SQLスクリプトファイルからデータベースを修復するには、RunScriptツールを使用する必要があります:

@tutorial_1118_p
オプションについての情報は、SQLコマンド RUNSCRIPTをご覧下さい。修復は遠隔で行えますが、サーバー側にファイルが存在する必要があります。サーバーからファイルをコピーするのに、ビルトインFTPサーバーを使用することができます。SQLスクリプトを実行するために、 SQLコマンド RUNSCRIPTを使用することができます。SQLスクリプトファイルには、RUNSCRIPTコマンドのフォーム内に他のスクリプトファイルのリファレンスが含まれています。しかしながら、サーバーモードを使用している時、リファレンススクリプトファイルはサーバー側で利用可能であることが必要です。

@tutorial_1119_h3
オンラインバックアップ

@tutorial_1120_p
BACKUP SQLステートメントとバックアップツールの両方が全てのデータベースファイルをzipファイル形式で作成します。しかし、このファイルのコンテンツは人間が解読可能なものではありません。SCRIPTステートメントを除いて、BACKUPステートメントはデータベースオブジェクトをロックしないため、他のユーザーをブロックしません。結果として、バックアップは一貫性のあるトランザクションです:

@tutorial_1121_p
バックアップツール (org.h2.tools.Backup) はオンラインバックアップを作成するために利用されません; このプログラムが実行されている間、データベースは使用されてはいけません。

@tutorial_1122_h2
OpenOffice Baseを使用する

@tutorial_1123_p
OpenOffice.org Base はJDBC API上のデータベースアクセスをサポートしています。 OpenOffice Baseを使ってH2データベースに接続するためには、最初にOpenOfficeにJDBCドライバを追加する必要があります。H2データベースに接続する手順:

@tutorial_1124_li
オートスタートを含め、OpenOfficeを終了する

@tutorial_1125_li
h2.jar ファイルを &lt;OpenOffice>\program\classes ディレクトリ内にコピーする

@tutorial_1126_li
OpenOffice Base を起動する

@tutorial_1127_li
存在するデータベースに接続し、JDBCを選択し、[Next] をクリックする

@tutorial_1128_li
データソースURLの例: jdbc:h2:c:/temp/test

@tutorial_1129_li
Database URL: jdbc:h2:tcp://localhost/~/test

@tutorial_1130_p
これで、C:/temp ディレクトリ内に格納されているデータベースにアクセス可能です。

@tutorial_1131_h2
Java Web Start / JNLP

@tutorial_1132_p
Java Web Start / JNLP (Java Network Launch Protocol) を使用している時、パーミッションタグは.jnlp ファイルに設定され、application.jarファイルは署名されていなければなりません。そうでなければ、ファイルシステムに書き込もうとした時、次の例外が発生するでしょう: java.security.AccessControlException: access denied (java.io.FilePermission ... read) パーミッションタグの例:

@tutorial_1133_h2
フルテキストサーチ

@tutorial_1134_p
H2はLuceneフルテキストサーチとnativeフルテキストサーチの実装をサポートしています。

@tutorial_1135_h3
Nativeフルテキストサーチを使用する

@tutorial_1136_p
初期化するには、次を呼び出します:

@tutorial_1137_p
その後、使用しているテーブルにフルテキストインデックスを作成することが可能です:

@tutorial_1138_p
PUBLICはスキーマ、TESTはテーブル名です。カラム名のリスト (分離されたカラム) はオプションです。このケースでは、全てのカラムがインデックスです。インデックスはリードタイムに更新されます。インデックスを検索するには、次のクエリーを使用します:

@tutorial_1139_p
Javaアプリケーション内からインデックスを呼び出すことも可能です:

@tutorial_1140_h3
Luceneフルテキストサーチを使用する

@tutorial_1141_p
Luceneフルテキストサーチを使用するには、まずFullTextLucene.java.txtファイルの名前をFullTestLucene.javaに変更し、コンパイルします。また、クラスパスのLuceneライブラリも必要です。初期化するには、次を呼び出します:

@tutorial_1142_p
その後、使用しているテーブルにフルテキストインデックスを作成することが可能です:

@tutorial_1143_p
PUBLICはスキーマ、TESTはテーブル名です。カラム名のリスト (分離されたカラム) はオプションです。このケースでは、全てのカラムがインデックスです。インデックスはリードタイムに更新されます。インデックスを検索するには、次のクエリーを使用します:

@tutorial_1144_p
Javaアプリケーション内からインデックスを呼び出すことも可能です:

