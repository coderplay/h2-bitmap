advanced_1000_h1=Advanced Topics
advanced_1001_a=Result Sets
advanced_1002_a=Large Objects
advanced_1003_a=Linked Tables
advanced_1004_a=Transaction Isolation
advanced_1005_a=Multi-Version Concurrency Control (MVCC)
advanced_1006_a=Clustering / High Availability
advanced_1007_a=Two Phase Commit
advanced_1008_a=Compatibility
advanced_1009_a=Standards Compliance
advanced_1010_a=Run as Windows Service
advanced_1011_a=ODBC Driver
advanced_1012_a=Using H2 in Microsoft .NET
advanced_1013_a=ACID
advanced_1014_a=Durability Problems
advanced_1015_a=Using the Recover Tool
advanced_1016_a=File Locking Protocols
advanced_1017_a=Protection against SQL Injection
advanced_1018_a=Restricting Class Loading and Usage
advanced_1019_a=Security Protocols
advanced_1020_a=SSL/TLS Connections
advanced_1021_a=Universally Unique Identifiers (UUID)
advanced_1022_a=Settings Read from System Properties
advanced_1023_a=Setting the Server Bind Address
advanced_1024_a=Limitations
advanced_1025_a=Glossary and Links
advanced_1026_h2=Result Sets
advanced_1027_h3=Limiting the Number of Rows
advanced_1028_p=Before the result is returned to the application, all rows are read by the database. Server side cursors are not supported currently. If only the first few rows are interesting for the application, then the result set size should be limited to improve the performance. This can be done using LIMIT in a query (example\: SELECT * FROM TEST LIMIT 100), or by using Statement.setMaxRows(max).
advanced_1029_h3=Large Result Sets and External Sorting
advanced_1030_p=For large result set, the result is buffered to disk. The threshold can be defined using the statement SET MAX_MEMORY_ROWS. If ORDER BY is used, the sorting is done using an external sort algorithm. In this case, each block of rows is sorted using quick sort, then written to disk; when reading the data, the blocks are merged together.
advanced_1031_h2=Large Objects
advanced_1032_h3=Storing and Reading Large Objects
advanced_1033_p=If it is possible that the objects don't fit into memory, then the data type CLOB (for textual data) or BLOB (for binary data) should be used. For these data types, the objects are not fully read into memory, by using streams. To store a BLOB, use PreparedStatement.setBinaryStream. To store a CLOB, use PreparedStatement.setCharacterStream. To read a BLOB, use ResultSet.getBinaryStream, and to read a CLOB, use ResultSet.getCharacterStream. When using the client/server mode, large BLOB and CLOB data is stored in a temporary file on the client side.
advanced_1034_h2=Linked Tables
advanced_1035_p=This database supports linked tables, which means tables that don't exist in the current database but are just links to another database. To create such a link, use the CREATE LINKED TABLE statement\:
advanced_1036_p=You can then access the table in the usual way. Whenever the linked table is accessed, the database issues specific queries over JDBC. Using the example above, if you issue the query <code>SELECT * FROM LINK WHERE ID\=1</code> , then the following query is run against the PostgreSQL database\: <code>SELECT * FROM TEST WHERE ID\=?</code> . The same happens for insert and update statements. Only simple statements are executed against the target database, that means no joins. Prepared statements are used where possible.
advanced_1037_p=To view the statements that are executed against the target table, set the trace level to 3.
advanced_1038_p=There is a restriction\: When inserting into a linked table, and when updating a linked table, NULL and values that are not set are both inserted as NULL. This may not have the desired effect if the default value for this column in the target table is not NULL.
advanced_1039_p=If multiple linked tables point to the same database (using the same database URL), the connection is shared. To disable this, set the system property h2.shareLinkedConnections to false.
advanced_1040_p=The CREATE LINKED TABLE statement supports an optional schema name parameter. See the grammar for details.
advanced_1041_h2=Transaction Isolation
advanced_1042_p=This database supports the following transaction isolation levels\:
advanced_1043_b=Read Committed
advanced_1044_li=This is the default level.  Read locks are released immediately.  Higher concurrency is possible when using this level.
advanced_1045_li=To enable, execute the SQL statement    'SET LOCK_MODE 3'
advanced_1046_li=or append ;LOCK_MODE\=3 to the database URL\: jdbc\:h2\:~/test;LOCK_MODE\=3
advanced_1047_b=Serializable
advanced_1048_li=To enable, execute the SQL statement    'SET LOCK_MODE 1'
advanced_1049_li=or append ;LOCK_MODE\=1 to the database URL\: jdbc\:h2\:~/test;LOCK_MODE\=1
advanced_1050_b=Read Uncommitted
advanced_1051_li=This level means that transaction isolation is disabled.
advanced_1052_li=To enable, execute the SQL statement    'SET LOCK_MODE 0'
advanced_1053_li=or append ;LOCK_MODE\=0 to the database URL\: jdbc\:h2\:~/test;LOCK_MODE\=0
advanced_1054_p=When using the isolation level 'serializable', dirty reads, non-repeatable reads, and phantom reads are prohibited.
advanced_1055_b=Dirty Reads
advanced_1056_li=Means a connection can read uncommitted changes made by another connection.
advanced_1057_li=Possible with\: read uncommitted
advanced_1058_b=Non-Repeatable Reads
advanced_1059_li=A connection reads a row, another connection changes a row and commits,  and the first connection re-reads the same row and gets the new result.
advanced_1060_li=Possible with\: read uncommitted, read committed
advanced_1061_b=Phantom Reads
advanced_1062_li=A connection reads a set of rows using a condition, another connection  inserts a row that falls in this condition and commits, then the first connection  re-reads using the same condition and gets the new row.
advanced_1063_li=Possible with\: read uncommitted, read committed
advanced_1064_h3=Table Level Locking
advanced_1065_p=The database allows multiple concurrent connections to the same database. To make sure all connections only see consistent data, table level locking is used by default. This mechanism does not allow high concurrency, but is very fast. Shared locks and exclusive locks are supported. Before reading from a table, the database tries to add a shared lock to the table (this is only possible if there is no exclusive lock on the object by another connection). If the shared lock is added successfully, the table can be read. It is allowed that other connections also have a shared lock on the same object. If a connection wants to write to a table (update or delete a row), an exclusive lock is required. To get the exclusive lock, other connection must not have any locks on the object. After the connection commits, all locks are released. This database keeps all locks in memory.
advanced_1066_h3=Lock Timeout
advanced_1067_p=If a connection cannot get a lock on an object, the connection waits for some amount of time (the lock timeout). During this time, hopefully the connection holding the lock commits and it is then possible to get the lock. If this is not possible because the other connection does not release the lock for some time, the unsuccessful connection will get a lock timeout exception. The lock timeout can be set individually for each connection.
advanced_1068_h2=Multi-Version Concurrency Control (MVCC)
advanced_1069_p=The MVCC feature allows higher concurrency than using (table level or row level) locks. When using MVCC in this database, delete, insert and update operations will only issue a shared lock on the table. An exclusive lock is still used when adding or removing columns, when dropping the table, and when using SELECT ... FOR UPDATE. Connections only 'see' committed data, and own changes. That means, if connection A updates a row but doesn't commit this change yet, connection B will see the old value. Only when the change is committed, the new value is visible by other connections (read committed). If multiple connections concurrently try to update the same row, this database fails fast\: a concurrent update exception is thrown.
advanced_1070_p=To use the MVCC feature, append MVCC\=TRUE to the database URL\:
advanced_1071_p=MVCC can not be used at the same time as MULTI_THREADED. The MVCC feature is not fully tested yet.
advanced_1072_h2=Clustering / High Availability
advanced_1073_p=This database supports a simple clustering / high availability mechanism. The architecture is\: two database servers run on two different computers, and on both computers is a copy of the same database. If both servers run, each database operation is executed on both computers. If one server fails (power, hardware or network failure), the other server can still continue to work. From this point on, the operations will be executed only on one server until the other server is back up.
advanced_1074_p=Clustering can only be used in the server mode (the embedded mode does not support clustering). It is possible to restore the cluster without stopping the server, however it is critical that no other application is changing the data in the first database while the second database is restored, so restoring the cluster is currently a manual process.
advanced_1075_p=To initialize the cluster, use the following steps\:
advanced_1076_li=Create a database
advanced_1077_li=Use the CreateCluster tool to copy the database to another location and initialize the clustering.  Afterwards, you have two databases containing the same data.
advanced_1078_li=Start two servers (one for each copy of the database)
advanced_1079_li=You are now ready to connect to the databases with the client application(s)
advanced_1080_h3=Using the CreateCluster Tool
advanced_1081_p=To understand how clustering works, please try out the following example. In this example, the two databases reside on the same computer, but usually, the databases will be on different servers.
advanced_1082_li=Create two directories\: server1 and server2.  Each directory will simulate a directory on a computer.
advanced_1083_li=Start a TCP server pointing to the first directory.  You can do this using the command line\:
advanced_1084_li=Start a second TCP server pointing to the second directory.  This will simulate a server running on a second (redundant) computer.  You can do this using the command line\:
advanced_1085_li=Use the CreateCluster tool to initialize clustering.  This will automatically create a new, empty database if it does not exist.  Run the tool on the command line\:
advanced_1086_li=You can now connect to the databases using an application or the H2 Console using the JDBC URL jdbc\:h2\:tcp\://localhost\:9101,localhost\:9102/~/test
advanced_1087_li=If you stop a server (by killing the process), you will notice that the other machine continues to work, and therefore the database is still accessible.
advanced_1088_li=To restore the cluster, you first need to delete the database that failed, then restart the server that was stopped, and re-run the CreateCluster tool.
advanced_1089_h3=Clustering Algorithm and Limitations
advanced_1090_p=Read-only queries are only executed against the first cluster node, but all other statements are executed against all nodes. There is currently no load balancing made to avoid problems with transactions. The following functions may yield different results on different cluster nodes and must be executed with care\: RANDOM_UUID(), SECURE_RAND(), SESSION_ID(), MEMORY_FREE(), MEMORY_USED(), CSVREAD(), CSVWRITE(), RAND() [when not using a seed]. Those functions should not be used directly in modifying statements (for example INSERT, UPDATE, or MERGE). However, they can be used in read-only statements and the result can then be used for modifying statements.
advanced_1091_h2=Two Phase Commit
advanced_1092_p=The two phase commit protocol is supported. 2-phase-commit works as follows\:
advanced_1093_li=Autocommit needs to be switched off
advanced_1094_li=A transaction is started, for example by inserting a row
advanced_1095_li=The transaction is marked 'prepared' by executing the SQL statement <code>PREPARE COMMIT transactionName</code>
advanced_1096_li=The transaction can now be committed or rolled back
advanced_1097_li=If a problem occurs before the transaction was successfully committed or rolled back  (for example because a network problem occurred), the transaction is in the state 'in-doubt'
advanced_1098_li=When re-connecting to the database, the in-doubt transactions can be listed  with <code>SELECT * FROM INFORMATION_SCHEMA.IN_DOUBT</code>
advanced_1099_li=Each transaction in this list must now be committed or rolled back by executing <code>COMMIT TRANSACTION transactionName</code> or <code>ROLLBACK TRANSACTION transactionName</code>
advanced_1100_li=The database needs to be closed and re-opened to apply the changes
advanced_1101_h2=Compatibility
advanced_1102_p=This database is (up to a certain point) compatible to other databases such as HSQLDB, MySQL and PostgreSQL. There are certain areas where H2 is incompatible.
advanced_1103_h3=Transaction Commit when Autocommit is On
advanced_1104_p=At this time, this database engine commits a transaction (if autocommit is switched on) just before returning the result. For a query, this means the transaction is committed even before the application scans through the result set, and before the result set is closed. Other database engines may commit the transaction in this case when the result set is closed.
advanced_1105_h3=Keywords / Reserved Words
advanced_1106_p=There is a list of keywords that can't be used as identifiers (table names, column names and so on), unless they are quoted (surrounded with double quotes). The list is currently\:
advanced_1107_p=CROSS, CURRENT_DATE, CURRENT_TIME, CURRENT_TIMESTAMP, DISTINCT, EXCEPT, EXISTS, FALSE, FOR, FROM, FULL, GROUP, HAVING, INNER, INTERSECT, IS, JOIN, LIKE, LIMIT, MINUS, NATURAL, NOT, NULL, ON, ORDER, PRIMARY, ROWNUM, SELECT, SYSDATE, SYSTIME, SYSTIMESTAMP, TODAY, TRUE, UNION, WHERE
advanced_1108_p=Certain words of this list are keywords because they are functions that can be used without '()' for compatibility, for example CURRENT_TIMESTAMP.
advanced_1109_h2=Standards Compliance
advanced_1110_p=This database tries to be as much standard compliant as possible. For the SQL language, ANSI/ISO is the main standard. There are several versions that refer to the release date\: SQL-92, SQL\:1999, and SQL\:2003. Unfortunately, the standard documentation is not freely available. Another problem is that important features are not standardized. Whenever this is the case, this database tries to be compatible to other databases.
advanced_1111_h2=Run as Windows Service
advanced_1112_p=Using a native wrapper / adapter, Java applications can be run as a Windows Service. There are various tools available to do that. The Java Service Wrapper from Tanuki Software, Inc. ( <a href\="http\://wrapper.tanukisoftware.org">http\://wrapper.tanukisoftware.org</a> ) is included in the installation. Batch files are provided to install, start, stop and uninstall the H2 Database Engine Service. This service contains the TCP Server and the H2 Console web application. The batch files are located in the directory H2/service.
advanced_1113_h3=Install the Service
advanced_1114_p=The service needs to be registered as a Windows Service first. To do that, double click on 1_install_service.bat. If successful, a command prompt window will pop up and disappear immediately. If not, a message will appear.
advanced_1115_h3=Start the Service
advanced_1116_p=You can start the H2 Database Engine Service using the service manager of Windows, or by double clicking on 2_start_service.bat. Please note that the batch file does not print an error message if the service is not installed.
advanced_1117_h3=Connect to the H2 Console
advanced_1118_p=After installing and starting the service, you can connect to the H2 Console application using a browser. Double clicking on 3_start_browser.bat to do that. The default port (8082) is hard coded in the batch file.
advanced_1119_h3=Stop the Service
advanced_1120_p=To stop the service, double click on 4_stop_service.bat. Please note that the batch file does not print an error message if the service is not installed or started.
advanced_1121_h3=Uninstall the Service
advanced_1122_p=To uninstall the service, double click on 5_uninstall_service.bat. If successful, a command prompt window will pop up and disappear immediately. If not, a message will appear.
advanced_1123_h2=ODBC Driver
advanced_1124_p=This database does not come with its own ODBC driver at this time, but it supports the PostgreSQL network protocol. Therefore, the PostgreSQL ODBC driver can be used. Support for the PostgreSQL network protocol is quite new and should be viewed as experimental. It should not be used for production applications.
advanced_1125_p=To use the PostgreSQL ODBC driver on 64 bit versions of Windows, first run <code>c\:/windows/syswow64/odbcad32.exe</code> . At this point you set up your DSN just like you would on any other system. See also\: <a href\="http\://archives.postgresql.org/pgsql-odbc/2005-09/msg00125.php">Re\: ODBC Driver on Windows 64 bit</a>
advanced_1126_h3=ODBC Installation
advanced_1127_p=First, the ODBC driver must be installed. Any recent PostgreSQL ODBC driver should work, however version 8.2 (psqlodbc-08_02*) or newer is recommended. The Windows version of the PostgreSQL ODBC driver is available at <a href\="http\://www.postgresql.org/ftp/odbc/versions/msi">http\://www.postgresql.org/ftp/odbc/versions/msi</a> .
advanced_1128_h3=Starting the Server
advanced_1129_p=After installing the ODBC driver, start the H2 Server using the command line\:
advanced_1130_p=The PG Server (PG for PostgreSQL protocol) is started as well. By default, databases are stored in the current working directory where the server is started. Use -baseDir to save databases in another directory, for example the user home directory\:
advanced_1131_p=The PG server can be started and stopped from within a Java application as follows\:
advanced_1132_p=By default, only connections from localhost are allowed. To allow remote connections, use <code>-pgAllowOthers</code> when starting the server.
advanced_1133_h3=ODBC Configuration
advanced_1134_p=After installing the driver, a new Data Source must be added. In Windows, run <code>odbcad32.exe</code> to open the Data Source Administrator. Then click on 'Add...' and select the PostgreSQL Unicode driver. Then click 'Finish'. You will be able to change the connection properties\:
advanced_1135_th=Property
advanced_1136_th=Example
advanced_1137_th=Remarks
advanced_1138_td=Data Source
advanced_1139_td=H2 Test
advanced_1140_td=The name of the ODBC Data Source
advanced_1141_td=Database
advanced_1142_td=test
advanced_1143_td=The database name. Only simple names are supported at this time;
advanced_1144_td=relative or absolute path are not supported in the database name.
advanced_1145_td=By default, the database is stored in the current working directory
advanced_1146_td=where the Server is started except when the -baseDir setting is used.
advanced_1147_td=The name must be at least 3 characters.
advanced_1148_td=Server
advanced_1149_td=localhost
advanced_1150_td=The server name or IP address.
advanced_1151_td=By default, only remote connections are allowed
advanced_1152_td=User Name
advanced_1153_td=sa
advanced_1154_td=The database user name.
advanced_1155_td=SSL Mode
advanced_1156_td=disabled
advanced_1157_td=At this time, SSL is not supported.
advanced_1158_td=Port
advanced_1159_td=5435
advanced_1160_td=The port where the PG Server is listening.
advanced_1161_td=Password
advanced_1162_td=sa
advanced_1163_td=The database password.
advanced_1164_p=To improve performance, please enable 'server side prepare' under Options / Datasource / Page 2 / Server side prepare.
advanced_1165_p=Afterwards, you may use this data source.
advanced_1166_h3=PG Protocol Support Limitations
advanced_1167_p=At this time, only a subset of the PostgreSQL network protocol is implemented. Also, there may be compatibility problems on the SQL level, with the catalog, or with text encoding. Problems are fixed as they are found. Currently, statements can not be canceled when using the PG protocol.
advanced_1168_p=PostgreSQL ODBC Driver Setup requires a database password; that means it is not possible to connect to H2 databases without password. This is a limitation of the ODBC driver.
advanced_1169_h3=Security Considerations
advanced_1170_p=Currently, the PG Server does not support challenge response or encrypt passwords. This may be a problem if an attacker can listen to the data transferred between the ODBC driver and the server, because the password is readable to the attacker. Also, it is currently not possible to use encrypted SSL connections. Therefore the ODBC driver should not be used where security is important.
advanced_1171_h2=Using H2 in Microsoft .NET
advanced_1172_p=The database can be used from Microsoft .NET even without using Java, by using IKVM.NET. You can access a H2 database on .NET using the JDBC API, or using the ADO.NET interface.
advanced_1173_h3=Using the ADO.NET API on .NET
advanced_1174_p=An implementation of the ADO.NET interface is available in the open source project <a href\="http\://code.google.com/p/h2sharp">H2Sharp</a> .
advanced_1175_h3=Using the JDBC API on .NET
advanced_1176_li=Install the .NET Framework from <a href\="http\://www.microsoft.com">Microsoft</a> .  Mono has not yet been tested.
advanced_1177_li=Install <a href\="http\://www.ikvm.net">IKVM.NET</a> .
advanced_1178_li=Copy the h2*.jar file to ikvm/bin
advanced_1179_li=Run the H2 Console using\: <code>ikvm -jar h2*.jar</code>
advanced_1180_li=Convert the H2 Console to an .exe file using\: <code>ikvmc -target\:winexe h2*.jar</code> .  You may ignore the warnings.
advanced_1181_li=Create a .dll file using (change the version accordingly)\: <code>ikvmc.exe -target\:library -version\:1.0.69.0 h2*.jar</code>
advanced_1182_p=If you want your C\# application use H2, you need to add the h2.dll and the IKVM.OpenJDK.ClassLibrary.dll to your C\# solution. Here some sample code\:
advanced_1183_h2=ACID
advanced_1184_p=In the database world, ACID stands for\:
advanced_1185_li=Atomicity\: Transactions must be atomic, meaning either all tasks are performed or none.
advanced_1186_li=Consistency\: All operations must comply with the defined constraints.
advanced_1187_li=Isolation\: Transactions must be isolated from each other.
advanced_1188_li=Durability\: Committed transaction will not be lost.
advanced_1189_h3=Atomicity
advanced_1190_p=Transactions in this database are always atomic.
advanced_1191_h3=Consistency
advanced_1192_p=By default, this database is always in a consistent state. Referential integrity rules are enforced except when explicitly disabled.
advanced_1193_h3=Isolation
advanced_1194_p=For H2, as with most other database systems, the default isolation level is 'read committed'. This provides better performance, but also means that transactions are not completely isolated. H2 supports the transaction isolation levels 'serializable', 'read committed', and 'read uncommitted'.
advanced_1195_h3=Durability
advanced_1196_p=This database does not guarantee that all committed transactions survive a power failure. Tests show that all databases sometimes lose transactions on power failure (for details, see below). Where losing transactions is not acceptable, a laptop or UPS (uninterruptible power supply) should be used. If durability is required for all possible cases of hardware failure, clustering should be used, such as the H2 clustering mode.
advanced_1197_h2=Durability Problems
advanced_1198_p=Complete durability means all committed transaction survive a power failure. Some databases claim they can guarantee durability, but such claims are wrong. A durability test was run against H2, HSQLDB, PostgreSQL, and Derby. All of those databases sometimes lose committed transactions. The test is included in the H2 download, see org.h2.test.poweroff.Test.
advanced_1199_h3=Ways to (Not) Achieve Durability
advanced_1200_p=Making sure that committed transactions are not lost is more complicated than it seems first. To guarantee complete durability, a database must ensure that the log record is on the hard drive before the commit call returns. To do that, databases use different methods. One is to use the 'synchronous write' file access mode. In Java, RandomAccessFile supports the modes "rws" and "rwd"\:
advanced_1201_li=rwd\: Every update to the file's content is written synchronously to the underlying storage device.
advanced_1202_li=rws\: In addition to rwd, every update to the metadata is written synchronously.
advanced_1203_p=A test (org.h2.test.poweroff.TestWrite) with one of those modes achieves around 50 thousand write operations per second. Even when the operating system write buffer is disabled, the write rate is around 50 thousand operations per second. This feature does not force changes to disk because it does not flush all buffers. The test updates the same byte in the file again and again. If the hard drive was able to write at this rate, then the disk would need to make at least 50 thousand revolutions per second, or 3 million RPM (revolutions per minute). There are no such hard drives. The hard drive used for the test is about 7200 RPM, or about 120 revolutions per second. There is an overhead, so the maximum write rate must be lower than that.
advanced_1204_p=Calling fsync flushes the buffers. There are two ways to do that in Java\:
advanced_1205_li=FileDescriptor.sync(). The documentation says that this forces all system buffers to synchronize with the underlying device. Sync is supposed to return after all in-memory modified copies of buffers associated with this FileDescriptor have been written to the physical medium.
advanced_1206_li=FileChannel.force() (since JDK 1.4). This method is supposed to force any updates to this channel's file to be written to the storage device that contains it.
advanced_1207_p=By default, MySQL calls fsync for each commit. When using one of those methods, only around 60 write operations per second can be achieved, which is consistent with the RPM rate of the hard drive used. Unfortunately, even when calling FileDescriptor.sync() or FileChannel.force(), data is not always persisted to the hard drive, because most hard drives do not obey fsync()\: see <a href\="http\://hardware.slashdot.org/article.pl?sid\=05/05/13/0529252">Your Hard Drive Lies to You</a> . In Mac OS X, fsync does not flush hard drive buffers. See <a href\="http\://lists.apple.com/archives/darwin-dev/2005/Feb/msg00072.html">Bad fsync?</a> . So the situation is confusing, and tests prove there is a problem.
advanced_1208_p=Trying to flush hard drive buffers is hard, and if you do the performance is very bad. First you need to make sure that the hard drive actually flushes all buffers. Tests show that this can not be done in a reliable way. Then the maximum number of transactions is around 60 per second. Because of those reasons, the default behavior of H2 is to delay writing committed transactions.
advanced_1209_p=In H2, after a power failure, a bit more than one second of committed transactions may be lost. To change the behavior, use SET WRITE_DELAY and CHECKPOINT SYNC. Most other databases support commit delay as well. In the performance comparison, commit delay was used for all databases that support it.
advanced_1210_h3=Running the Durability Test
advanced_1211_p=To test the durability / non-durability of this and other databases, you can use the test application in the package org.h2.test.poweroff. Two computers with network connection are required to run this test. One computer just listens, while the test application is run (and power is cut) on the other computer. The computer with the listener application opens a TCP/IP port and listens for an incoming connection. The second computer first connects to the listener, and then created the databases and starts inserting records. The connection is set to 'autocommit', which means after each inserted record a commit is performed automatically. Afterwards, the test computer notifies the listener that this record was inserted successfully. The listener computer displays the last inserted record number every 10 seconds. Now, switch off the power manually, then restart the computer, and run the application again. You will find out that in most cases, none of the databases contains all the records that the listener computer knows about. For details, please consult the source code of the listener and test application.
advanced_1212_h2=Using the Recover Tool
advanced_1213_p=The recover tool can be used to extract the contents of a data file, even if the database is corrupted. It also extracts the content of the log file or large objects (CLOB or BLOB). To run the tool, type on the command line\:
advanced_1214_p=For each database in the current directory, a text file will be created. This file contains raw insert statements (for the data) and data definition (DDL) statements to recreate the schema of the database. This file can be executed using the RunScript tool or a <code>RUNSCRIPT FROM</code> SQL statement. The script includes at least one CREATE USER statement. If you run the script against a database that was created with the same user, or if there are conflicting users, running the script will fail. Consider running the script against a database that was created with a user name that is not in the script.
advanced_1215_h2=File Locking Protocols
advanced_1216_p=Whenever a database is opened, a lock file is created to signal other processes that the database is in use. If the database is closed, or if the process that opened the database terminates, this lock file is deleted.
advanced_1217_p=In special cases (if the process did not terminate normally, for example because there was a power failure), the lock file is not deleted by the process that created it. That means the existence of the lock file is not a safe protocol for file locking. However, this software uses a challenge-response protocol to protect the database files. There are two methods (algorithms) implemented to provide both security (that is, the same database files cannot be opened by two processes at the same time) and simplicity (that is, the lock file does not need to be deleted manually by the user). The two methods are 'file method' and 'socket methods'.
advanced_1218_h3=File Locking Method 'File'
advanced_1219_p=The default method for database file locking is the 'File Method'. The algorithm is\:
advanced_1220_li=When the lock file does not exist, it is created (using the atomic operation File.createNewFile). Then, the process waits a little bit (20ms) and checks the file again. If the file was changed during this time, the operation is aborted. This protects against a race condition when a process deletes the lock file just after one create it, and a third process creates the file again. It does not occur if there are only two writers.
advanced_1221_li=If the file can be created, a random number is inserted together with the locking method ('file'). Afterwards, a watchdog thread is started that checks regularly (every second once by default) if the file was deleted or modified by another (challenger) thread / process. Whenever that occurs, the file is overwritten with the old data. The watchdog thread runs with high priority so that a change to the lock file does not get through undetected even if the system is very busy. However, the watchdog thread does use very little resources (CPU time), because it waits most of the time. Also, the watchdog only reads from the hard disk and does not write to it.
advanced_1222_li=If the lock file exists, and it was modified in the 20 ms, the process waits for some time (up to 10 times). If it was still changed, an exception is thrown (database is locked). This is done to eliminate race conditions with many concurrent writers. Afterwards, the file is overwritten with a new version (challenge). After that, the thread waits for 2 seconds. If there is a watchdog thread protecting the file, he will overwrite the change and this process will fail to lock the database. However, if there is no watchdog thread, the lock file will still be as written by this thread. In this case, the file is deleted and atomically created again. The watchdog thread is started in this case and the file is locked.
advanced_1223_p=This algorithm is tested with over 100 concurrent threads. In some cases, when there are many concurrent threads trying to lock the database, they block each other (meaning the file cannot be locked by any of them) for some time. However, the file never gets locked by two threads at the same time. However using that many concurrent threads / processes is not the common use case. Generally, an application should throw an error to the user if it cannot open a database, and not try again in a (fast) loop.
advanced_1224_h3=File Locking Method 'Socket'
advanced_1225_p=There is a second locking mechanism implemented, but disabled by default. To use it, append <code>;FILE_LOCK\=SOCKET</code> to the database URL. The algorithm is\:
advanced_1226_li=If the lock file does not exist, it is created. Then a server socket is opened on a defined port, and kept open. The port and IP address of the process that opened the database is written into the lock file.
advanced_1227_li=If the lock file exists, and the lock method is 'file', then the software switches to the 'file' method.
advanced_1228_li=If the lock file exists, and the lock method is 'socket', then the process checks if the port is in use. If the original process is still running, the port is in use and this process throws an exception (database is in use). If the original process died (for example due to a power failure, or abnormal termination of the virtual machine), then the port was released. The new process deletes the lock file and starts again.
advanced_1229_p=This method does not require a watchdog thread actively polling (reading) the same file every second. The problem with this method is, if the file is stored on a network share, two processes (running on different computers) could still open the same database files, if they do not have a direct TCP/IP connection.
advanced_1230_h2=Protection against SQL Injection
advanced_1231_h3=What is SQL Injection
advanced_1232_p=This database engine provides a solution for the security vulnerability known as 'SQL Injection'. Here is a short description of what SQL injection means. Some applications build SQL statements with embedded user input such as\:
advanced_1233_p=If this mechanism is used anywhere in the application, and user input is not correctly filtered or encoded, it is possible for a user to inject SQL functionality or statements by using specially built input such as (in this example) this password\: ' OR ''\='. In this case the statement becomes\:
advanced_1234_p=Which is always true no matter what the password stored in the database is. For more information about SQL Injection, see Glossary and Links.
advanced_1235_h3=Disabling Literals
advanced_1236_p=SQL Injection is not possible if user input is not directly embedded in SQL statements. A simple solution for the problem above is to use a PreparedStatement\:
advanced_1237_p=This database provides a way to enforce usage of parameters when passing user input to the database. This is done by disabling embedded literals in SQL statements. To do this, execute the statement\:
advanced_1238_p=Afterwards, SQL statements with text and number literals are not allowed any more. That means, SQL statement of the form WHERE NAME\='abc' or WHERE CustomerId\=10 will fail. It is still possible to use PreparedStatements and parameters as described above. Also, it is still possible to generate SQL statements dynamically, and use the Statement API, as long as the SQL statements do not include literals. There is also a second mode where number literals are allowed\: SET ALLOW_LITERALS NUMBERS. To allow all literals, execute SET ALLOW_LITERALS ALL (this is the default setting). Literals can only be enabled or disabled by an administrator.
advanced_1239_h3=Using Constants
advanced_1240_p=Disabling literals also means disabling hard-coded 'constant' literals. This database supports defining constants using the CREATE CONSTANT command. Constants can be defined only when literals are enabled, but used even when literals are disabled. To avoid name clashes with column names, constants can be defined in other schemas\:
advanced_1241_p=Even when literals are enabled, it is better to use constants instead of hard-coded number or text literals in queries or views. With constants, typos are found at compile time, the source code is easier to understand and change.
advanced_1242_h3=Using the ZERO() Function
advanced_1243_p=It is not required to create a constant for the number 0 as there is already a built-in function ZERO()\:
advanced_1244_h2=Restricting Class Loading and Usage
advanced_1245_p=By default there is no restriction on loading classes and executing Java code for admins. That means an admin may call system functions such as System.setProperty by executing\:
advanced_1246_p=To restrict users (including admins) from loading classes and executing code, the list of allowed classes can be set in the system property h2.allowedClasses in the form of a comma separated list of classes or patterns (items ending with '*'). By default all classes are allowed. Example\:
advanced_1247_p=This mechanism is used for all user classes, including database event listeners, trigger classes, user-defined functions, user-defined aggregate functions, and JDBC driver classes (with the exception of the H2 driver) when using the H2 Console.
advanced_1248_h2=Security Protocols
advanced_1249_p=The following paragraphs document the security protocols used in this database. These descriptions are very technical and only intended for security experts that already know the underlying security primitives.
advanced_1250_h3=User Password Encryption
advanced_1251_p=When a user tries to connect to a database, the combination of user name, @, and password are hashed using SHA-256, and this hash value is transmitted to the database. This step does not protect against an attacker that re-uses the value if he is able to listen to the (unencrypted) transmission between the client and the server. But, the passwords are never transmitted as plain text, even when using an unencrypted connection between client and server. That means if a user reuses the same password for different things, this password is still protected up to some point. See also 'RFC 2617 - HTTP Authentication\: Basic and Digest Access Authentication' for more information.
advanced_1252_p=When a new database or user is created, a new cryptographically secure random salt value is generated. The size of the salt is 64 bits. Using the random salt reduces the risk of an attacker pre-calculating hash values for many different (commonly used) passwords.
advanced_1253_p=The combination of user-password hash value (see above) and salt is hashed using SHA-256. The resulting value is stored in the database. When a user tries to connect to the database, the database combines user-password hash value with the stored salt value and calculates the hash value. Other products use multiple iterations (hash the hash value again and again), but this is not done in this product to reduce the risk of denial of service attacks (where the attacker tries to connect with bogus passwords, and the server spends a lot of time calculating the hash value for each password). The reasoning is\: if the attacker has access to the hashed passwords, he also has access to the data in plain text, and therefore does not need the password any more. If the data is protected by storing it on another computer and only accessible remotely, then the iteration count is not required at all.
advanced_1254_h3=File Encryption
advanced_1255_p=The database files can be encrypted using two different algorithms\: AES-128 and XTEA (using 32 rounds). The reasons for supporting XTEA is performance (XTEA is about twice as fast as AES) and to have an alternative algorithm if AES is suddenly broken.
advanced_1256_p=When a user tries to connect to an encrypted database, the combination of the word 'file', @, and the file password is hashed using SHA-256. This hash value is transmitted to the server.
advanced_1257_p=When a new database file is created, a new cryptographically secure random salt value is generated. The size of the salt is 64 bits. The combination of the file password hash and the salt value is hashed 1024 times using SHA-256. The reason for the iteration is to make it harder for an attacker to calculate hash values for common passwords.
advanced_1258_p=The resulting hash value is used as the key for the block cipher algorithm (AES-128 or XTEA with 32 rounds). Then, an initialization vector (IV) key is calculated by hashing the key again using SHA-256. This is to make sure the IV is unknown to the attacker. The reason for using a secret IV is to protect against watermark attacks.
advanced_1259_p=Before saving a block of data (each block is 8 bytes long), the following operations are executed\: First, the IV is calculated by encrypting the block number with the IV key (using the same block cipher algorithm). This IV is combined with the plain text using XOR. The resulting data is encrypted using the AES-128 or XTEA algorithm.
advanced_1260_p=When decrypting, the operation is done in reverse. First, the block is decrypted using the key, and then the IV is calculated combined with the decrypted text using XOR.
advanced_1261_p=Therefore, the block cipher mode of operation is CBC (cipher-block chaining), but each chain is only one block long. The advantage over the ECB (electronic codebook) mode is that patterns in the data are not revealed, and the advantage over multi block CBC is that flipped cipher text bits are not propagated to flipped plaintext bits in the next block.
advanced_1262_p=Database encryption is meant for securing the database while it is not in use (stolen laptop and so on). It is not meant for cases where the attacker has access to files while the database is in use. When he has write access, he can for example replace pieces of files with pieces of older versions and manipulate data like this.
advanced_1263_p=File encryption slows down the performance of the database engine. Compared to unencrypted mode, database operations take about 2.2 times longer when using XTEA, and 2.5 times longer using AES (embedded mode).
advanced_1264_h3=Wrong Password / User Name Delay
advanced_1265_p=To protect against remote brute force password attacks, the delay after each unsuccessful login gets double as long. Use the system properties h2.delayWrongPasswordMin and h2.delayWrongPasswordMax to change the minimum (the default is 250 milliseconds) or maximum delay (the default is 4000 milliseconds, or 4 seconds). The delay only applies for those using the wrong password. Normally there is no delay for a user that knows the correct password, with one exception\: after using the wrong password, there is a delay of up to (randomly distributed) the same delay as for a wrong password. This is to protect against parallel brute force attacks, so that an attacker needs to wait for the whole delay. Delays are synchronized. This is also required to protect against parallel attacks.
advanced_1266_p=There is only one exception message for both wrong user and for wrong password, to make it harder to get the list of user names. It is not possible from the stack trace to see if the user name was wrong or the password.
advanced_1267_h3=HTTPS Connections
advanced_1268_p=The web server supports HTTP and HTTPS connections using SSLServerSocket. There is a default self-certified certificate to support an easy starting point, but custom certificates are supported as well.
advanced_1269_h2=SSL/TLS Connections
advanced_1270_p=Remote SSL/TLS connections are supported using the Java Secure Socket Extension (SSLServerSocket / SSLSocket). By default, anonymous SSL is enabled. The default cipher suite is <code>SSL_DH_anon_WITH_RC4_128_MD5</code> .
advanced_1271_p=To use your own keystore, set the system properties <code>javax.net.ssl.keyStore</code> and <code>javax.net.ssl.keyStorePassword</code> before starting the H2 server and client. See also <a href\="http\://java.sun.com/javase/6/docs/technotes/guides/security/jsse/JSSERefGuide.html\#CustomizingStores">Customizing the Default Key and Trust Stores, Store Types, and Store Passwords</a> for more information.
advanced_1272_p=To disable anonymous SSL, set the system property <code>h2.enableAnonymousSSL</code> to false.
advanced_1273_h2=Universally Unique Identifiers (UUID)
advanced_1274_p=This database supports the UUIDs. Also supported is a function to create new UUIDs using a cryptographically strong pseudo random number generator. With random UUIDs, the chance of two having the same value can be calculated using the probability theory. See also 'Birthday Paradox'. Standardized randomly generated UUIDs have 122 random bits. 4 bits are used for the version (Randomly generated UUID), and 2 bits for the variant (Leach-Salz). This database supports generating such UUIDs using the built-in function RANDOM_UUID(). Here is a small program to estimate the probability of having two identical UUIDs after generating a number of values\:
advanced_1275_p=Some values are\:
advanced_1276_p=To help non-mathematicians understand what those numbers mean, here a comparison\: One's annual risk of being hit by a meteorite is estimated to be one chance in 17 billion, that means the probability is about 0.000'000'000'06.
advanced_1277_h2=Settings Read from System Properties
advanced_1278_p=Some settings of the database can be set on the command line using -DpropertyName\=value. It is usually not required to change those settings manually. The settings are case sensitive. Example\:
advanced_1279_p=The current value of the settings can be read in the table INFORMATION_SCHEMA.SETTINGS.
advanced_1280_p=For a complete list of settings, see <a href\="../javadoc/org/h2/constant/SysProperties.html">SysProperties</a> .
advanced_1281_h2=Setting the Server Bind Address
advanced_1282_p=Usually server sockets accept connections on any/all local addresses. This may be a problem on multi-homed hosts. To bind only to one address, use the system property h2.bindAddress. This setting is used for both regular server sockets and for SSL server sockets. IPv4 and IPv6 address formats are supported.
advanced_1283_h2=Limitations
advanced_1284_p=This database has the following known limitations\:
advanced_1285_li=The maximum file size is currently 256 GB for the data, and 256 GB for the index. This number is excluding BLOB and CLOB data\: Every CLOB or BLOB can be up to 256 GB as well.
advanced_1286_li=The maximum file size for FAT or FAT32 file systems is 4 GB. That means when using FAT or FAT32, the limit is 4 GB for the data. This is the limitation of the file system. The database does provide a workaround for this problem, it is to use the file name prefix 'split\:'. In that case files are split into files of 1 GB by default. An example database URL is\: <code>jdbc\:h2\:split\:~/test</code> .
advanced_1287_li=There is a limit on the complexity of SQL statements. Statements of the following form will result in a stack overflow exception\:
advanced_1288_li=There is no limit for the following entities, except the memory and storage capacity\:  maximum identifier length, maximum number of tables, maximum number of columns,  maximum number of indexes, maximum number of parameters,  maximum number of triggers, and maximum number of other database objects.
advanced_1289_li=For limitations on data types, see the documentation of the respective Java data type  or the data type documentation of this database.
advanced_1290_h2=Glossary and Links
advanced_1291_th=Term
advanced_1292_th=Description
advanced_1293_td=AES-128
advanced_1294_td=A block encryption algorithm. See also\: <a\n            href\="http\://en.wikipedia.org/wiki/Advanced_Encryption_Standard">Wikipedia\:   AES</a>
advanced_1295_td=Birthday Paradox
advanced_1296_td=Describes the higher than expected probability that two   persons in a room have the same birthday. Also valid for randomly   generated UUIDs. See also\: <a\n            href\="http\://en.wikipedia.org/wiki/Birthday_paradox">Wikipedia\:   Birthday Paradox</a>
advanced_1297_td=Digest
advanced_1298_td=Protocol to protect a password (but not to protect data).   See also\: <a href\="http\://www.faqs.org/rfcs/rfc2617.html">RFC   2617\: HTTP Digest Access Authentication</a>
advanced_1299_td=GCJ
advanced_1300_td=Compiler for Java. <a href\="http\://gcc.gnu.org/java">GNU   Compiler for the Java</a> and <a\n            href\="http\://www.dobysoft.com/products/nativej">NativeJ   (commercial)</a>
advanced_1301_td=HTTPS
advanced_1302_td=A protocol to provide security to HTTP connections. See   also\: <a href\="http\://www.ietf.org/rfc/rfc2818.txt">RFC 2818\:   HTTP Over TLS</a>
advanced_1303_td=Modes of Operation
advanced_1304_a=Wikipedia\:   Block cipher modes of operation
advanced_1305_td=Salt
advanced_1306_td=Random number to increase the security of passwords. See   also\: <a href\="http\://en.wikipedia.org/wiki/Key_derivation_function">Wikipedia\:   Key derivation function</a>
advanced_1307_td=SHA-256
advanced_1308_td=A cryptographic one-way hash function. See also\: <a\n            href\="http\://en.wikipedia.org/wiki/SHA_family">Wikipedia\: SHA   hash functions</a>
advanced_1309_td=SQL Injection
advanced_1310_td=A security vulnerability where an application embeds SQL   statements or expressions in user input. See also\: <a\n            href\="http\://en.wikipedia.org/wiki/SQL_injection">Wikipedia\:   SQL Injection</a>
advanced_1311_td=Watermark Attack
advanced_1312_td=Security problem of certain encryption programs where the   existence of certain data can be proven without decrypting. For more   information, search in the internet for 'watermark attack   cryptoloop'
advanced_1313_td=SSL/TLS
advanced_1314_td=Secure Sockets Layer / Transport Layer Security. See also\: <a href\="http\://java.sun.com/products/jsse/">Java Secure Socket   Extension (JSSE)</a>
advanced_1315_td=XTEA
advanced_1316_td=A block encryption algorithm. See also\: <a\n            href\="http\://en.wikipedia.org/wiki/XTEA">Wikipedia\: XTEA</a>
build_1000_h1=Build
build_1001_a=Portability
build_1002_a=Environment
build_1003_a=Building the Software
build_1004_a=Build Targets
build_1005_a=Using Maven 2
build_1006_a=Translating
build_1007_a=Providing Patches
build_1008_a=Automated Build
build_1009_h2=Portability
build_1010_p=This database is written in Java and therefore works on many platforms. It can also be compiled to a native executable using GCJ.
build_1011_h2=Environment
build_1012_p=A Java Runtime Environment (JRE) version 1.4 or higher is required to run this database.
build_1013_p=To build the database executables, the following software stack was used. Newer version or compatible software works too.
build_1014_li=Mac OS X and Windows XP
build_1015_a=Sun JDK Version 1.4, 1.5, and 1.6
build_1016_a=Eclipse Version 3.4
build_1017_li=Eclipse Plugins\: <a href\="http\://subclipse.tigris.org">Subclipse 1.4.6</a> , <a href\="http\://eclipse-cs.sourceforge.net">Eclipse Checkstyle Plug-in 4.4.2</a> , <a href\="http\://www.eclemma.org">EclEmma Java Code Coverage 1.3.0</a>
build_1018_a=Emma Java Code Coverage
build_1019_a=Mozilla Firefox 3.0
build_1020_a=OpenOffice 3.0
build_1021_a=NSIS 2.38
build_1022_li=(Nullsoft Scriptable Install System)
build_1023_a=Maven 2.0.9
build_1024_h2=Building the Software
build_1025_p=You need to install a JDK, for example the Sun JDK version 1.4, 1.5 or 1.6. On the command line, go to the directory h2 and execute the following command\:
build_1026_p=For Linux and OS X, use <code>./build.sh</code> instead of <code>build</code> .
build_1027_p=You will get a list of targets. If you want to build the jar file, execute (Windows)\:
build_1028_h3=Switching the Source Code
build_1029_p=By default the source code uses Java 1.5 features, however Java 1.4 and 1.5 are supported as well. To switch the source code to the install version of Java, run\:
build_1030_h2=Build Targets
build_1031_p=The build system can generate smaller jar files as well. The following targets are currently supported\:
build_1032_li=jarClient\: Create the h2client.jar. This only contains the JDBC client.
build_1033_li=jarSmall\: Create the file h2small.jar. This only contains the embedded database. Debug information is disabled.
build_1034_li=jarJaqu\: Create the file h2jaqu.jar. This only contains the JaQu (Java Query) implementation. All other jar files do not include JaQu.
build_1035_li=javadocImpl\: Create the Javadocs of the implementation.
build_1036_p=To create the h2client.jar file, go to the directory h2 and execute the following command\:
build_1037_h2=Using Maven 2
build_1038_h3=Using a Central Repository
build_1039_p=You can include the database in your Maven 2 project as a dependency. Example\:
build_1040_p=New versions of this database are first uploaded to http\://hsql.sourceforge.net/m2-repo/ and then automatically synchronized with the main maven repository; however after a new release it may take a few hours before they are available there.
build_1041_h3=Using Snapshot Version
build_1042_p=To build a 'snapshot' H2 .jar file and upload it the to the local Maven 2 repository, execute the following command\:
build_1043_p=Afterwards, you can include the database in your Maven 2 project as a dependency\:
build_1044_h2=Translating
build_1045_p=The translation of this software is split into the following parts\:
build_1046_li=H2 Console\: src/main/org/h2/server/web/res/_text_*.properties
build_1047_li=Error messages\: src/main/org/h2/res/_messages_*.properties
build_1048_li=Web site\: src/docsrc/text/_docs_*.utf8.txt
build_1049_p=To translate the H2 Console, start it and select Preferences / Translate. The conversion between UTF-8 and Java encoding (using the \\u syntax), as well as the HTML entities (&amp;\#..;) is automated by running the tool PropertiesToUTF8. The web site translation is automated as well, using <code>build docs</code> .
build_1050_h2=Providing Patches
build_1051_p=If you like to provide patches, please consider the following guidelines to simplify merging them\:
build_1052_li=Only use Java 1.4 features (do not use Java 1.5 or 1.6) (see Environment).
build_1053_li=Follow the coding style used in the project, and use Checkstyle (see above) to verify.  For example, do not use tabs (use spaces instead).  The checkstyle configuration is in <code>src/installer/checkstyle.xml</code> .
build_1054_li=Please provide test cases and integrate them into the test suite.  For Java level tests, see <code>src/test/org/h2/test/TestAll.java</code> .  For SQL level tests, see <code>src/test/org/h2/test/test.in.txt</code> or <code>testSimple.in.txt</code> .
build_1055_li=The test cases should cover at least 90% of the changed and new code; use a code coverage tool to verify that (see above).  or use the build target 'coverage'.
build_1056_li=Verify that you did not break other features\: Run the test cases by executing <code>build test</code> .
build_1057_li=Provide end user documentation if required ( <code>src/docsrc/html/*</code> ).
build_1058_li=Document grammar changes in <code>src/main/org/h2/res/help.csv</code>
build_1059_li=Provide a change log entry ( <code>src/docsrc/html/changelog.html</code> ).
build_1060_li=Verify the spelling using <code>build spellcheck</code> . If required  add the new words to <code>src/tools/org/h2/build/doc/dictionary.txt</code> .
build_1061_li=Verify the formatting using <code>build docs</code> and <code>build javadoc</code> .
build_1062_li=Submit patches as .patch files (compressed if big). To create a patch using Eclipse, use Team / Create Patch.
build_1063_h2=Automated Build
build_1064_p=This build process is automated and runs regularly. The build process includes running the tests and code coverage, using the command line <code>./build.sh clean jar coverage -Dh2.ftpPassword\=... uploadBuild</code> . The last results are available here\:
build_1065_a=Test Output
build_1066_a=Code Coverage Summary
build_1067_a=Code Coverage Details (download, 1.3 MB)
build_1068_a=Build Newsfeed
build_1069_a=Latest Jar File (download, 1 MB)
changelog_1000_h1=Change Log
changelog_1001_h2=Next Version (unreleased)
changelog_1002_li=Shell tool\: the built-in commands EXIT, HELP, ?, LIST, and so on didn't  work with a semicolon at the end.
changelog_1003_li=JDK 1.5 is now required to build the jar file. However it is still possible to create  a jar file for Java 1.4. For details, see buildRelease.sh and buildRelease.bat.  As an alternative, compile using JDK 1.5 or 1.6 and use Retrotranslator to create a Java 1.4  version (http\://retrotranslator.sourceforge.net/).
changelog_1004_li=When deleting or updating many rows in a table, the space in the index  file was not re-used in the default mode (persistent database, b-tree index,  LOG\=1). This caused the index file to grow over time. Workarounds were to  delete and re-created the index file, alter the table (add a remove a column),  or append ;LOG\=2 to the database URL. To disable the change, set the system  property h2.reuseSpaceBtreeIndex to false.
changelog_1005_li=Identifiers with a digit and then a dollar sign didn't work. Example\: A1$B.
changelog_1006_li=MS SQL Server compatibility\: support for linked tables with  NVARCHAR, NCHAR, NCLOB, and LONGNVARCHAR.
changelog_1007_li=Android\: Workaround for a problem when using read-only databases in zip files  (skip seems to be implemented incorrectly on the Android system).
changelog_1008_li=Calling execute() or prepareStatement() with null as the SQL statement  now throws an exception.
changelog_1009_li=Benchmark\: the number of executed statements was incorrect. The H2 database  was loaded at the beginning of the test to collect results, now it is loaded at the very end.  Thanks to Fred Toussi from HSQLDB for reporting those problems. However the changed  do not affect the relative performance.
changelog_1010_li=H2 Console\: command line settings are now longer stored in the properties file.  They are now only used for the current process, except if they are explicitly saved.
changelog_1011_li=Cache\: support for a second level soft-references cache.  To enable it, append ;CACHE_TYPE\=SOFT_LRU (or SOFT_TQ) to the database URL, or  set the system property h2.cacheTypeDefault to "SOFT_LRU" / "SOFT_TQ".  Enabling the second level cache reduces performance for  small databases, but speeds up large databases. It makes sense to use it  if the available memory size is unknown. Thanks a lot to Jan Kotek\!
changelog_1012_h2=Version 1.1.112 (2009-05-01)
changelog_1013_li=JdbcPreparedStatement.toString() could throw a NullPointerException.
changelog_1014_li=EclipseLink\: Added H2Platform.supportsIdentity().
changelog_1015_li=Connection pool\: the default login timeout is now 5 minutes.
changelog_1016_li=After truncating tables, opening large databases could become slow  because indexes were always re-built unnecessarily when opening.
changelog_1017_li=More bugs in the server-less multi-connection mode have been fixed\:  Sometimes parameters of prepared statements were lost when a reconnecting.  Concurrent read operations were slow.  To improve performance, executeQuery(..) must be used for queries  (execute(..) switches to the write mode, which is slow).
changelog_1018_li=GROUP BY queries with a self-join (join to the same table) that were grouped by  columns with indexes returned the wrong result in some cases.
changelog_1019_li=Improved error message when the .lock.db file modification time is in the future.
changelog_1020_li=The MERGE statement now returns 0 as the generated key if the row was updated.
changelog_1021_li=Running code coverage is now automated.
changelog_1022_li=A file system implementation can now be registered using FileSystem.register.
changelog_1023_li=The database file system is no longer included in the jar file, it moved to the test section.
changelog_1024_h2=Version 1.1.111 (2009-04-10)
changelog_1025_li=In-memory databases can now run inside the Google App Engine.
changelog_1026_li=Queries that are ordered by an indexed column returned no rows in certain cases  (if all rows were deleted from the table previously, and there is a low number of rows  in the table, and when not using other conditions, and when using the default b tree index).
changelog_1027_li=The wrong exception was thrown when using unquoted text for  the SQL statements COMMENT, ALTER USER, and SET PASSWORD.
changelog_1028_li=The built-in connection pool did not roll back transactions and  enable autocommit enabled after closing a connection.
changelog_1029_li=Sometimes a StackOverflow occurred when checking for deadlock. See also  http\://code.google.com/p/h2database/issues/detail?id\=61
changelog_1030_li=The Shell tool no longer truncates results with only one column, and displays  a message if data was truncated.
changelog_1031_h2=Version 1.1.110 (2009-04-03)
changelog_1032_li=Support for not persistent in-memory tables in regular (persistent) databases  using CREATE MEMORY TABLE(..) NOT PERSISTENT. Thanks a lot to Sergi Vladykin for the patch\!
changelog_1033_li=The H2 Console trimmed the password (removed leading and trailing spaces).  This is no longer the case, to support encrypted H2 database with an empty user password.
changelog_1034_li=The data type of a SUBSTRING method was wrong.
changelog_1035_li=ResultSet.findColumn and get methods with column label parameters  now also check for matching column names (like most databases except MySQL).
changelog_1036_li=H2 Console\: the browser system property now supports a list of arguments.  Example\: java -Dh2.browser\="open,-a,Safari,%url" ...
changelog_1037_li=Improved Javadoc navigation (similar to Scaladoc).
changelog_1038_li=H2 Console\: auto-complete of identifiers did not work correctly  for H2 databases in MySQL mode.
changelog_1039_li=DISTINCT and GROUP BY on a CLOB column was broken.
changelog_1040_li=The FTP server moved to the tools section and is no longer included in the h2*.jar file.
changelog_1041_li=Improved error message for unsupported features\:  now the message says what exactly is not supported.
changelog_1042_li=Improved OSGi support.
changelog_1043_li=Some internal caches did not use the LRU mechanism. Fixed  (LOB file list, optimizer cost cache, trace system, view indexes, collection keys,  compressed in-memory file system).
changelog_1044_li=The API of the tools changed a bit (each tool now returns an exit code).
changelog_1045_li=Command line help of the tools now match the javadocs.  The build converts the javadocs to a resource that is read by the tool at runtime.  This should not have an effect on using the database, but it reduces duplicate  and out-of-sync documentation.
changelog_1046_li=CREATE TABLE\: improved compatibility (support for UNIQUE NOT NULL).
changelog_1047_li=DatabaseMetaData.getSQLKeywords now returns the correct list.
changelog_1048_li=Deterministic user defined functions did not work when the parameter was a column. Fixed.
changelog_1049_li=JdbcConnectionPool.setLoginTimeout with 0 now uses the default timeout.
changelog_1050_li=Creating a JdbcConnectionPool has been simplified a bit.
changelog_1051_li=The built-in connection pool did not re-use connections.  Getting a connection using the built-in JdbcConnectionPool is now about 70 times faster  than opening connections using DriverManager.getConnection.
changelog_1052_li=More bugs in the server-less multi-connection mode have been fixed\:  If a process terminated while writing, other open connections were blocked.  If two processes were writing to the database, sometimes the database was corrupt after closing.
changelog_1053_li=Linked tables to SQLite database can now be created.
changelog_1054_li=Nested IN(IN(...)) didn't work.
changelog_1055_li=NIO storage\: the nio\: prefix was using memory mapped files instead of FileChannel.
changelog_1056_h2=Version 1.1.109 (2009-03-14)
changelog_1057_li=The optimization for IN(...) is now only used if comparing a column with an index.
changelog_1058_li=User defined functions can now be deterministic (see CREATE ALIAS documentation).
changelog_1059_li=Multiple nested queries in the FROM clause with parameters did not always work.
changelog_1060_li=When converting CLOB to BINARY, each character resulted in one byte.  Now, the text is parsed as a hex as when converting VARCHAR.
changelog_1061_li=New experimental NIO storage mechanism with both FileChannel and  memory mapped files. To use it, use the file name prefix nio\: or nioMapped\:  as in jdbc\:h2\:nio\:~/test. So far it looks like NIO storage is faster on Mac OS  but slower on some Windows systems. Thanks a lot to Jan Kotek for the patch\!
changelog_1062_li=The functions BITOR, BITAND, BITXOR, and MOD now accept  and return BIGINT instead of INT.
changelog_1063_li=Could not use the same linked table multiple times in the same query.
changelog_1064_li=Bugs in the server-less multi-connection mode have been fixed.
changelog_1065_li=Column names could not be named "UNIQUE" (with the quotes).
changelog_1066_li=New system function TRANSACTION_ID() to get the current transaction  identifier for a session.
changelog_1067_h2=Version 1.1.108 (2009-02-28)
changelog_1068_li=When the shutdown hook closed the database, the last log file  was deleted too early. This could cause uncommitted changes to be persisted.  In some cases, this could cause data corruption.
changelog_1069_li=JdbcConnectionPool\: it was possible to set a negative connection pool size.
changelog_1070_li=Fulltext search did not support table names with a backslash.
changelog_1071_li=The internal IntArray class did not work correctly when initialized with a zero length array.
changelog_1072_li=The H2 Console web application (war file) did only support ASCII characters.  Now UTF-8 is supported.
changelog_1073_li=DATEADD does no longer require that the argument is a timestamp.
changelog_1074_li=The database file locking mechanism didn't work correctly on Mac OS.
changelog_1075_li=Some built-in functions reported the wrong precision, scale, and display size.
changelog_1076_li=MySQL compatibility for CREATE TABLE is improved (UNSIGNED, KEY).
changelog_1077_li=Recovery did not work if there were more than 255 lobs stored as files.
changelog_1078_li=New experimental mode to support multiple read-write connections without starting  a server. To enable this mode, append ;FILE_LOCK\=SERIALIZED;OPEN_NEW\=TRUE to the database URL.  Don't expect high performance when multiple concurrent writers.
changelog_1079_li=In a web application, the database classes are not unloaded if a connection is open.  This may cause out of memory when re-deploying a web application.  The DbStarter is changed to close all connections to the configured database  (by executing SHUTDOWN).
changelog_1080_li=The WebServlet did not close the database when un-deploying the web application.
changelog_1081_li=The exception message of failed INSERT or MERGE statements now includes all values and the row number.
changelog_1082_li=If opening a database failed with an out of memory exception, some files were not closed.
changelog_1083_li=Optimizer\: the expected runtime calculation was incorrect. The fixed calculation  should give slightly better query plans when using many joins.
changelog_1084_li=Improved exception message when connecting to a just started server fails.
changelog_1085_li=Connection.isValid is a bit faster.
changelog_1086_li=H2 Console\: The autocomplete feature has been improved a bit. It can now better  parse conditions.
changelog_1087_li=When restarting a web application in Tomcat, an exception was thrown sometimes.  In most cases this was a NullPointerException. A workaround in H2 has been implemented.  The root cause of the problem is now documented in the FAQ\:  Tomcat sets all static fields (final or non-final) to null when unloading a web application.  A workaround is to put the h2.jar in the lib directory, or set the system property  org.apache.catalina.loader.WebappClassLoader.ENABLE_CLEAR_REFERENCES  to false.
changelog_1088_h2=Version 1.1.107 (2009-01-24)
changelog_1089_li=Some DatabaseMetaData operations did not work for non-admin users for versions 1.1.x.
changelog_1090_li=The MySQL compatibility extension fromUnixTime now used the English locale.
changelog_1091_li=When using LOG\=2 and repeatedly updating the last row rows of a table, the index file grew quickly.
changelog_1092_li=In versions 1.1.105 and 1.1.106, encrypted script files of earlier versions could not be processed.  This is now again possible. The problem was that such script files were stored in a special format  (STORAGE\=TEXT) but support for this format was removed in version 1.1.105.
changelog_1093_li=Enabling the trace mechanism by creating a specially named file is no longer supported.
changelog_1094_h2=Version 1.1.106 (2009-01-04)
changelog_1095_li=Statement.setQueryTimeout did not work correctly for some statements.
changelog_1096_li=CREATE DOMAIN\: Built-in data types can now only be changed if no tables exist.
changelog_1097_li=Linked tables\: a workaround for Oracle DATE columns has been implemented.
changelog_1098_li=DatabaseMetaData.getPrimaryKeys\: The column PK_NAME now contains the  constraint name instead of the index name (compatibility for PostgreSQL and Derby).
changelog_1099_li=Using IN(..) inside a IN(SELECT..) did not always work.
changelog_1100_li=Views with IN(..) that used a view itself did not work.
changelog_1101_li=Union queries with LIMIT or ORDER BY that are used in a view or subquery did not work.
changelog_1102_li=The license change a bit\: so far the license was modified to say  'Swiss law'. This is now changed back to the original 'US law'.  This was requested by a user, and I don't see a problem.
changelog_1103_li=Constraints for local temporary tables now session scoped. So far they were global.  Thanks a lot to Eric Faulhaber for finding and fixing this problem\!
changelog_1104_li=When using the auto-server mode, and if the lock file was modified in the future,  the wrong exception was thrown ('Connection is broken' instead of 'Error opening database\: Lock file modified in the future').
changelog_1105_h2=Version 1.1.105 (2008-12-19)
changelog_1106_li=The setting STORAGE\=TEXT is no longer supported.
changelog_1107_li=Deleting a database using the tool DeleteDbFiles deleted LOB files  of other databases in the same directory.
changelog_1108_li=When used in a subquery, LIKE and IN(..) did not work correctly sometimes.
changelog_1109_li=The fulltext search documentation has been improved.
changelog_1110_li=ARRAY_GET returned the wrong data type (ARRAY). Now it returns VARCHAR.
changelog_1111_li=Natural join\: the joined columns are not repeated any more when using SELECT *.
changelog_1112_li=User defined aggregate functions\: the method getType expected internal data types  instead of SQL types.
changelog_1113_li=User defined aggregate functions did not work if there was no group by expression.
changelog_1114_li=MySQL compatibility\: support for \:\= assignment as in @sum\:\=@sum+x
changelog_1115_li=INSERT INTO TEST(SELECT * FROM TEST) is now supported.
changelog_1116_li=Each session threw an invisible exception when garbage collected.
changelog_1117_li=Foreign key constraints that refer to a quoted column did not work.
changelog_1118_li=New meta data column INFORMATION_SCHEMA.TABLES.LAST_MODIFICATION to get  the table modification counter.
changelog_1119_li=Shell\: line comments didn't work correctly.
changelog_1120_li=H2 Console\: Columns are now listed for up to 500 tables instead of 100.
changelog_1121_li=H2 Console\: Cmd+Enter executes the current statement, Alt+Space for autocomplete.
changelog_1122_li=JaQu\: the maximum length of a column can now be defined using maxLength.  For an example, see Product.java (maxLength(category, 255)).
changelog_1123_li=R&\\\#305;dvan A&\\\#287;ar has completed the Turkish translation of the H2 Console. Thanks a lot\!
changelog_1124_h2=Version 1.1.104 (2008-11-28)
changelog_1125_li=If a query that was used like a table contained group by and was ordered by an expression that  is not in the column list, an exception was thrown.
changelog_1126_li=JaQu\: tables are now auto-created when running a query.
changelog_1127_li=The optimizer had problems with function tables (for example CSVREAD and FTL_SEARCH).  A new system property h2.estimatedFunctionTableRows (default 1000) defines how many rows  can be expected in the table.
changelog_1128_li=The function SUM could overflow when using large values. It returns now a data type that is safe.
changelog_1129_li=The function AVG could overflow when using large values. Fixed.
changelog_1130_li=The emergency reserve file has been removed. It didn't provide an appropriate  solution for the problem. It is still possible for an application to detect and deal with  the low disk space problem (deleting temporary files for example)  using DatabaseEventListener.diskSpaceIsLow, but this method is now always called  with stillAvailable\=0.
changelog_1131_li=Build\: JAVA_HOME is now automatically detected on Mac OS X.
changelog_1132_li=Testing for local connections was very slow on some systems.
changelog_1133_li=The cache memory usage calculation is more conservative.
changelog_1134_li=Allocating space got slower and slower the larger the database.
changelog_1135_li=ALTER TABLE ALTER COLUMN could throw the wrong exception in the last version  (Table not found).
changelog_1136_li=Updatable result sets\: the key columns can now be updated.
changelog_1137_li=The H2DatabaseProvider for ActiveObjects is now included in the tools section.
changelog_1138_li=The H2Platform for Oracle Toplink Essential has been improved a bit.
changelog_1139_li=The Windows service to start H2 didn't work in version 1.1.
changelog_1140_li=File systems with a maximum file size (for example FAT) are now supported using  the file prefix 'split\:'. In this case the files are split in parts of 1 GB.  Example URL\: jdbc\:h2\:split\:~/db/test. If you want to split into parts of 1 MB, use  jdbc\:h2\:split\:20\:~/db/test (the part size is 1 &lt;&lt; x, the default is 30 meaning 1 GB).
changelog_1141_li=The database now tries to detect if the classloader or virtual machine has  almost shut down by checking if static final variables are set to null.  This should help reduce exceptions when stopping the web application.
changelog_1142_li=Compatibility for MS SQL Server DATEDIFF(YYYY, .., ..)
changelog_1143_li=ResultSet.getObject for CLOB or BLOB will return a java.sql.Clob / java.sql.Blob object instead of  a java.io.Reader / java.io.InputStream as in version 1.0. This behavior can be changed using the system  property h2.returnLobObjects (true by default for version 1.1).
changelog_1144_li=The interface CloseListener has a new method 'remove' that is called when the trigger is dropped.
changelog_1145_li=Fulltext search\: there was a memory leak when creating and dropping fulltext indexes in a loop.
changelog_1146_h2=Version 1.1.103 (2008-11-07)
changelog_1147_li=Could not order by a formula when the formula was in the group by list  but not in the select list.
changelog_1148_li=Date values that match the daylight saving time end were not allowed in  times zones were the daylight saving time ends at midnight, for years larger than 2037.  Example\: timezone Brasilia, date 2042-10-12. This is a problem of Java, however a  workaround is implemented in H2 that solves most problems (except the problems of  java.util.Date itself).
changelog_1149_li=ALTER TABLE used a lot of memory when using multi-version concurrency.
changelog_1150_li=Referential integrity for in-memory databases didn't work in some cases in version 1.1.102.
changelog_1151_li=New column INFORMATION_SCHEMA.COLUMNS.SEQUENCE_NAME to get the name  of the sequence for auto-increment columns.
changelog_1152_li=Aliases for built-in data types (such as MEDIUMBLOB which is an alias for BLOB)  can now be re-mapped to another data type using CREATE DOMAIN. However  main built-in data types (such as INTEGER) can not be re-mapped.
changelog_1153_li=The Japanese translation has been completed by Masahiro Ikemoto.  Thanks a lot\!
changelog_1154_li=Improved PostgreSQL compatibility for NEXTVAL and CURRVAL.
changelog_1155_li=Less heap memory is needed when multiple databases are open at the same time\: The memory reserve  (used to rollback after out of memory) is now global and no longer allocated for each database separately.
changelog_1156_li=New system property h2.browser to set the browser to use.
changelog_1157_li=To start the browser, java.awt.Desktop.browse is now used if available.
changelog_1158_h2=Version 1.1.102 (2008-10-24)
changelog_1159_li=The French translation of the H2 Console has been improved by Olivier Parent.  Thanks a lot\!
changelog_1160_li=There was a memory leak when creating and dropping tables and  indexes in a loop (persistent database only).
changelog_1161_li=SET LOG 2 was not effective if executed after opening the database.
changelog_1162_li=Translating the H2 Console is now simpler.
changelog_1163_li=Common exception (error code 23*) are no longer written to the .trace.db file by default.
changelog_1164_li=In-memory databases don't write LOBs to files any longer.
changelog_1165_li=Self referencing constraints didn't restrict deleting rows that reference  itself if there is another row that references it.
changelog_1166_li=ResultSetMetaData.getColumnName now returns the alias name except for columns.
changelog_1167_li=Temporary files are now deleted when the database is closed, even  if they were not garbage collected so far.
changelog_1168_h2=Version 1.1.101 (2008-10-17)
changelog_1169_li=Errors with code 42000 - 42999 are no longer written to the trace file by default.
changelog_1170_li=Queries with more than 10 tables are now faster.
changelog_1171_li=Opening a connection with AUTO_SERVER\=TRUE is now fast  when the database is already open in another process (less than 0.01 seconds  instead of 2 seconds).
changelog_1172_li=IF [NOT] EXISTS is supported for named constraints in  ALTER TABLE ... ADD/DROP CONSTRAINT.
changelog_1173_li=The error messages have been translated to Spanish by Dario V. Fassi.  Thanks a lot\!
changelog_1174_li=Linked tables\: the automatic connection sharing didn't work. Actually the  system property h2.shareLinkedConnections was working in the opposite direction\:  it was disabled when set to true. Now it works as expected.
changelog_1175_li=Opening large database is now faster.
changelog_1176_li=New system property h2.socketConnectTimeout, the timeout in milliseconds  to connect to a server. The default is 2000 (2 seconds).
changelog_1177_li=The wrong parameters were bound to subqueries with parameters, specially  when using IN(SELECT ...) and IN(...).
changelog_1178_li=Unset parameters were not detected when the query was re-compiled.
changelog_1179_li=New functions ISO_YEAR, ISO_WEEK, ISO_DAY_OF_WEEK.  Thanks a lot to Robert Rathsack for implementing those\!
changelog_1180_li=The date functions DAYOFYEAR, DAYOFMONTH, DAYOFWEEK are now called  DAY_OF_YEAR, DAY_OF_MONTH, DAY_OF_WEEK (the old names still work).
changelog_1181_li=An out of memory error while deleting or updating many rows could  result in a strange exception.
changelog_1182_li=Linked tables\: compatibility with MS SQL Server has been improved.
changelog_1183_li=Renaming tables that have foreign keys with cascade didn't work correctly.
changelog_1184_li=The auto-reconnect feature didn't work when using the auto-server mode. Fixed.
changelog_1185_li=Fulltext search\: new method FT_DROP_INDEX.
changelog_1186_li=The optimization to group using an index didn't work in some cases in version 1.1  (see also system property h2.optimizeGroupSorted).
changelog_1187_li=OSGi meta data is included in the manifest file.  An OSGi BundleActivator is included\: it loads the database driver when starting the bundle,  and unloads it when stopping the bundle.
changelog_1188_li=The default value for MAX_MEMORY_UNDO is now 50000.
changelog_1189_li=For alias columns, ResultSetMetaData.getTableName() and getColumnName() now   return the real table and column name in the default mode.
changelog_1190_li=In SQL scripts created with SCRIPT TO, schemas are now only created if they don't exist yet.
changelog_1191_li=After re-connecting to a database, the database event listener (if set) is informed about it.
changelog_1192_li=Local temporary tables now support indexes. Thanks a lot to Matt Roy\!
changelog_1193_li=RUNSCRIPT no longer uses a temporary file.
changelog_1194_li=New system table INFORMATION_SCHEMA.SESSION_STATE containing the  SQL statements that make up the session state. The list currently contains  variables (SET @..) and local temporary tables (without data).
changelog_1195_li=After an automatic re-connect, part of the session state stays (the part  that is stored in the SESSION_STATE table).
changelog_1196_li=The build didn't work if the directory temp didn't exist before.
changelog_1197_li=New system property h2.maxReconnect (default 3) to limit the number of re-connects  for the same SQL statement (this is usually only important for SHUTDOWN).
changelog_1198_li=WHERE .. IN (SELECT ...) could throw a NullPointerException.
changelog_1199_li=Improved Glassfish / Toplink support in H2Platform  thanks to Marcio Borges from Brazil. Thanks a lot\!
changelog_1200_h2=Version 1.1.100 (2008-10-04)
changelog_1201_li=In version 1.1, the following system properties are now enabled by default\:  h2.lobFilesInDirectories, h2.optimizeGroupSorted, h2.optimizeInJoin, h2.shareLinkedConnections
changelog_1202_li=The H2 Console tool now works with the JDBC-ODBC bridge.
changelog_1203_li=The H2 Console tool now supports command line options to start things separately.
changelog_1204_li=Large objects did not work for in-memory databases in server mode in Linux.
changelog_1205_li=Connections from a local address other than 'localhost' were not allowed if remote  connections were disabled. This was always a problem, but only got visible in the last release  because the server no longer connects to 'localhost' if networked.
changelog_1206_li=The h2console.war can now be built using the Java build.
changelog_1207_li=By default, databases are shared in the same process. For read-only databases  this causes unnecessary synchronization, but safes memory. If you want that each connection  opens its own database, append ;OPEN_NEW\=TRUE to the database URL.
changelog_1208_li=New auto-reconnect feature will cause the JDBC driver to reconnect to  the database if the connection is lost. To enable, append ;AUTO_RECONNECT\=TRUE to the database URL.  This is specially helpful when using AUTO_SERVER. AUTO_SERVER automatically uses auto-reconnect.
changelog_1209_li=CreateCluster\: the property 'serverlist' is now called 'serverList'.
changelog_1210_li=The ConvertTraceFile tool could not parse some files because the trace  mechanism did not encode prepared statement parameters.
changelog_1211_li=Databases names can now be one character long  (the minimum size used to be 2 characters).
changelog_1212_h2=Version 1.0.79 (2008-09-26)
changelog_1213_li=Linked tables that point to the same database can now share the connection  within the same database. Access to the same connection is serialized. To enable this feature,  set the system property h2.shareLinkedConnections to true.
changelog_1214_li=Multiple processes can now access the same database without having to explicitly  start the server. To do that, append ;AUTO_SERVER\=TRUE to the database URL.  In this case, the server is started automatically if the connection is in embedded mode,  and the server mode is used if a server is running. If the process that opened the first  connection is closed, the other client need to reconnect (there is no automatic re-connect so far).  Remote connections are allowed, but only to this database.
changelog_1215_li=The server tool now displays the correct IP address if networked.
changelog_1216_li=Can now start a TCP server with port 0 (automatically select a port).
changelog_1217_li=Result sets with just a unique index can now be updated (previously a primary key was required).
changelog_1218_li=LINKED TABLE\: the schema name can now be set. When multiple tables exist in different schema,  and the schema name is not set, an exception is thrown.
changelog_1219_li=LINKED TABLE\: worked around a bug in Oracle with the CHAR data type.
changelog_1220_li=Faster hash code calculation for large binary arrays.
changelog_1221_li=Faster storage re-use algorithm thanks to Greg Dhuse from cleversafe.com.
changelog_1222_li=The database supports the SHOW command for better MySQL and PostgreSQL compatibility.
changelog_1223_li=The H2 Console now abbreviates large texts in results.
changelog_1224_li=Multiple UNION queries could not be used in derived tables.
changelog_1225_li=Linked tables can now be read-only.
changelog_1226_li=Temporary linked tables are now supported.
changelog_1227_li=It was possible to create tables in read-only databases.
changelog_1228_li=SET SCHEMA_SEARCH_PATH is now documented.
changelog_1229_li=SET SCHEMA did not work for views.
changelog_1230_li=Row level locking for MVCC is now enabled. The exception  'Concurrent update in table ...' is still thrown, but only after the lock timeout.
changelog_1231_li=The maximum log file size setting was ignored for large databases.
changelog_1232_li=Multi-Version Concurrency (MVCC) may no longer be used when using  the multi-threaded kernel feature (MULTI_THREADED). An exception is thrown  when trying to connect with both settings. Additional synchronization  is required before those features can be used together.
changelog_1233_li=The data type JAVA_OBJECT could not be used in updatable result sets.
changelog_1234_li=The system property h2.optimizeInJoin did not work correctly.
changelog_1235_li=Conditions such as ID\=? AND ID>? were slow.
changelog_1236_h2=Version 1.0.78 (2008-08-28)
changelog_1237_li=The documentation no longer uses a frameset (except the Javadocs).
changelog_1238_li=When using DB_CLOSE_DELAY, sometimes a NullPointerException is thrown when  the database is opened almost at the same time as it is closed automatically.  Thanks a lot to Dmitry Pekar for finding this\!
changelog_1239_li=Java methods with variable number of parameters can now be used (for Java 1.5 or newer).
changelog_1240_li=The Japanese translation has been improved by Masahiro Ikemoto. Thanks a lot\!
changelog_1241_li=The H2 Console replaced an empty user name with a single space.
changelog_1242_li=The build target 'build jarSmall' now includes the embedded database.
changelog_1243_li=JdbcDataSource now keeps the password in a char array where possible.
changelog_1244_li=ResultSet.absolute did not always work with large result sets.
changelog_1245_li=Column aliases can now be used in GROUP BY and HAVING.
changelog_1246_li=Jason Brittain has contributed MySQL date functions. Thanks a lot\!  They are not in the h2.jar file currently, but in src/tools/org/h2/mode/FunctionsMySQL.java.  To install, add this class to the classpath and call FunctionsMySQL.register(conn) in the Java code.
changelog_1247_h2=Version 1.0.77 (2008-08-16)
changelog_1248_li=JaQu is now using prepared statements and supports Date, Time, Timestamp.
changelog_1249_li=When using remote in-memory databases, large LOB objects did not work.
changelog_1250_li=Timestamp columns such as TIMESTAMP(6) were not compatible to other database.
changelog_1251_li=Opening a large database was slow if there was a problem opening the previous time.
changelog_1252_li=NOT IN(SELECT ...) was incorrect if the subquery returns no rows.
changelog_1253_li=CREATE TABLE AS SELECT did not work correctly in the multi-version concurrency mode.
changelog_1254_li=Support a comma before closing a list, as in\: create table test(id int,)
changelog_1255_li=MySQL compatibility\: linked tables had lower case column names on some systems.
changelog_1256_li=DB2 compatibility\: the DB2 fetch-first-clause is supported.
changelog_1257_li=Oracle compatibility\: old style outer join syntax using (+) did work correctly sometimes.
changelog_1258_li=ResultSet.setFetchSize is now supported.
changelog_1259_li=It has been reported that when using Install4j on some Linux systems and enabling the 'pack200' option,  the h2.jar becomes corrupted by the install process, causing application failure.  A workaround is to add an empty file h2.jar.nopack next to the h2.jar file.  The reason for this problem is not known.
changelog_1260_h2=Version 1.0.76 (2008-07-27)
changelog_1261_li=The comment of a domain (user defined data type) is now used as the  default column comment when creating a column with this domain.
changelog_1262_li=Invalid database names are now detected and a better error message is thrown.
changelog_1263_li=ResultSetMetaData.getColumnClassName now returns the correct  class name for BLOB and CLOB.
changelog_1264_li=Fixed the Oracle mode\: Oracle allows multiple rows only where  all columns of the unique index are NULL.
changelog_1265_li=There is a problem with Hibernate when using Boolean columns.  A patch for Hibernate has been submitted at  http\://opensource.atlassian.com/projects/hibernate/browse/HHH-3401
changelog_1266_li=ORDER BY on tableName.columnName didn't work correctly if the column  name was also used as an alias.
changelog_1267_li=H2 Console\: The progress display when opening a database has been improved.
changelog_1268_li=The error message when the server doesn't start has been improved.
changelog_1269_li=Key values can now be changed in updatable result sets.
changelog_1270_li=Changes in updatable result sets are now visible even when resetting the result set.
changelog_1271_li=Temporary files were sometimes deleted too late when executing large insert, update,  or delete operations.
changelog_1272_li=The database file was growing after deleting many rows, and after large update operations.
changelog_1273_h2=Version 1.0.75 (2008-07-14)
changelog_1274_li=Multi version concurrency (MVCC)\: when a row was updated or deleted, but this change was rolled back,  the row was not visible by other sessions if no index was used to access it. Fixed.
changelog_1275_li=Views with multiple joined tables (where one was an outer join) couldn't be used in some cases. Fixed.
changelog_1276_li=The CSVREAD method did not process NULL correctly when using a whitespace field separator.
changelog_1277_li=Fixed the Oracle mode\: Oracle allows multiple rows with NULL in a unique index.
changelog_1278_li=Running out of memory could result in incomplete transactions or corrupted databases. Fixed.
changelog_1279_li=When using order by in a query that uses the same table multiple times, the order could  be incorrect. Fixed.
changelog_1280_li=Referential constraint checking improvement\: now the constraint is only checked  if the key column values change.
changelog_1281_li=Some database metadata calls returned the wrong data type for DATA_TYPE columns.
changelog_1282_li=The Lucene fulltext index was empty when opening a database with fulltext  index enabled, and re-indexing it didn't work. Fixed.
changelog_1283_li=The character '$' could not be used in identifier names (table name,  column names and so on). Fixed.
changelog_1284_li=The new method org.h2.tools.Server.startWebServer(conn) starts the H2 Console  to inspect a database while debugging.
changelog_1285_li=Stopping a WebServer didn't always work. Fixed.
changelog_1286_h2=Version 1.0.74 (2008-06-21)
changelog_1287_li=Work on row level locking has been started (but there is nothing usable yet).
changelog_1288_li=JaQu (Java Query), a tool similar to LINQ (Language Integrated Query; from Microsoft)  is now included under src/tools/org/h2/jaqu. A small sample application is included under  src/test/org/h2/test/jaqu.
changelog_1289_li=The source code is now switched to Java 1.6 by default. To switch back to Java 1.4, run 'build compile'.  The h2.jar file is still Java 1.4.
changelog_1290_li=The ChangePassword tool is now called ChangeFileEncryption.
changelog_1291_li=It is no longer allowed to create columns with the data type NULL.  Also, it is no longer allowed to convert a column to the data type NULL.  This was possible before but caused data loss.
changelog_1292_li=When using computed columns or default values with a different data type than the column data type,  a class cast exception could occur. Fixed.
changelog_1293_li=Opening databases larger than 1 GB was sometimes very slow if a lot of data was deleted previously. Fixed.
changelog_1294_li=RUNSCRIPT could throw a NullPointerException if the script name was an expression.
changelog_1295_li=Improved compatibility. New compatibility modes for Oracle and Derby.  New compatibility flag uniqueIndexNullDistinct to only allow one row with 'NULL' in a unique  index. This flag is enabled for Derby, Oracle, MSSQLServer, and HSQLDB.
changelog_1296_li=Linked tables\: To view the statements that are executed against the target table, set the trace level to 3.
changelog_1297_li=RunScript tool\: new options to show and check the results of queries.
changelog_1298_li=Deadlocks are now detected. One transaction is rolled back automatically.
changelog_1299_li=The Lucene fulltext index was always re-created when opening a  database with fulltext index enabled.
changelog_1300_li=Support for overloaded Java methods. A user defined function can  now be bound to multiple Java methods, if the Java methods have the same  name but a different number of parameters. Thanks to Gary Tong for  providing a patch\!
changelog_1301_h2=Version 1.0.73 (2008-05-31)
changelog_1302_li=ParameterMetaData now returns the right data type for most   conditions, as in WHERE ID\=?.
changelog_1303_li=The table SYSTEM_RANGE now supports expressions and parameters.
changelog_1304_li=New column INFORMATION_SCHEMA.CONSTRAINTS.UNIQUE_INDEX_NAME   that contains the name of the unique index used to enforce this   constraint, if there is such an index.
changelog_1305_li=SET QUERY_TIMEOUT and Statement.setQueryTimeout no longer commits   a transaction. The same applies to SET @VARIABLE, SET LOCK_TIMEOUT,   SET TRACE_LEVEL_*, SET THROTTLE, and SET PATH.
changelog_1306_li=The SCRIPT command does now emit IF NOT EXISTS for CREATE ROLE.
changelog_1307_li=MySQL compatibility\: auto_increment column are no longer automatically   converted to primary key columns.
changelog_1308_li=PostgreSQL compatibility\: support for BOOL_OR and BOOL_AND   aggregate functions.
changelog_1309_li=Negative scale values for DECIMAL or NUMBER columns are now supported   in regular tables and in linked tables.
changelog_1310_li=A role or right can now be granted or revoked multiple times without   getting an exception.
changelog_1311_li=Infinite numbers in SQL scripts are listed as POWER(0, -1)), negative   infinite as (-POWER(0, -1)), and NaN (not a number) as SQRT(-1).
changelog_1312_li=The special double and float values 'NaN' (not a number) did not work   correctly when sorting or comparing.
changelog_1313_li=The fulltext search did not support CLOB data types.
changelog_1314_li=If the drive with the database files was disconnected or unmounted   while writing, sometimes a stack overflow exception was thrown   instead of a IO exception.
changelog_1315_li=The H2 Console could not be shut down from within the tool if the   browser supports keepAlive (most browsers do).
changelog_1316_li=If the password was passed as a char array, it was kept in an internal buffer   longer than required. Theoretically the password could have been stolen   if the main memory was swapped to disk before the garbage collection was run.
changelog_1317_h2=Version 1.0.72 (2008-05-10)
changelog_1318_li=Some databases could not be opened when appending   ;RECOVER\=1 to the database URL.
changelog_1319_li=The Japanese translation of the error messages and the H2 Console   has been completed by Masahiro Ikemoto (Arizona Design Inc.)
changelog_1320_li=Updates made to updatable rows are now visible within the same result set.   DatabaseMetaData.ownUpdatesAreVisible now returns true.
changelog_1321_li=ParameterMetaData now returns the correct data   for INSERT and UPDATE statements.
changelog_1322_li=H2 Shell\: DESCRIBE now supports an schema name.
changelog_1323_li=A subset of the PostgreSQL 'dollar quoting' feature is now supported.
changelog_1324_li=SLF4J is now supported by using adding TRACE_LEVEL_FILE\=4   to the database URL.
changelog_1325_li=The recovery tool did not work if the table name contained spaces   or if there was a comment on the table.
changelog_1326_li=Triggers are no longer executed when changing the table   structure (ALTER TABLE).
changelog_1327_li=When setting BLOB or CLOB values larger than 65 KB using   a remote connection, temporary files were kept on the client   longer than required (until the connection was closed or the   object is garbage collected). Now they are removed as soon   as the PreparedStatement is closed, or when the value is   overwritten.
changelog_1328_li=Statements can now be canceled remotely   (when using remote connections).
changelog_1329_li=The Shell tool now uses java.io.Console to read the password   when using JDK 1.6
changelog_1330_li=When using read-only databases and setting LOG\=2, an exception   was written to the trace file when closing the database. Fixed.
changelog_1331_h2=Version 1.0.71 (2008-04-25)
changelog_1332_li=H2 is now dual-licensed under the Eclipse Public License (EPL) and the  old 'H2 License' (which is basically MPL).
changelog_1333_li=Sometimes an exception 'File ID mismatch' or 'try to add a record twice'  occurred after large records (8 KB or larger) are updated or deleted.  See also http\://code.google.com/p/h2database/issues/detail?id\=22
changelog_1334_li=H2 Console\: The tools can now be translated  (it didn't work in the last release).
changelog_1335_li=New traditional Chinese translation. Thanks a lot to Derek Chao\!
changelog_1336_li=Indexes were not used when enabling the optimization for  IN(SELECT...) (system property h2.optimizeInJoin).
changelog_1337_h2=Version 1.0.70 (2008-04-20)
changelog_1338_li=The plan is to dual-license H2. The additional license is EPL (Eclipse Public License).  The current license (MPL, Mozilla Public License) will stay.  Current users are not affected because they can keep MPL.  EPL is very similar to MPL, the only bigger difference is related to patents  (EPL is a bit more business friendly in this regard).  See also http\://opensource.org/licenses/eclipse-1.0.php,  http\://www.eclipse.org/legal/eplfaq.php (FAQ),  http\://blogs.zdnet.com/Burnette/?p\=131
changelog_1339_li=Multi version concurrency (MVCC)\: when a row was updated,  and the updated column was not indexed, this update was visible sometimes  for other sessions even if it was not committed.
changelog_1340_li=Calling SHUTDOWN on one connection and starting a query on  another connection concurrently could result in a Java level deadlock.
changelog_1341_li=New system property h2.enableAnonymousSSL (default\: true) to enable  anonymous SSL connections.
changelog_1342_li=The precision if SUBSTR is now calculated if possible.
changelog_1343_li=The autocomplete in the H2 Console has been improved a bit.
changelog_1344_li=The tools in the H2 Console are now translatable.
changelog_1345_li=The servlet and lucene jar files are now automatically downloaded when building.
changelog_1346_li=The code switch tool has been replaced by a simpler tool called  SwitchSource that just uses find and replace.
changelog_1347_li=Started to write a Ant replacement ('JAnt') that uses pure Java  build definitions. Advantages\: ability to debug the build, extensible,  flexible, no XML, a bit faster. Future plan\: support creating custom h2  distributions (for embedded use). Maybe create a new project 'Jant'  or 'Javen' if other people are interested.
changelog_1348_li=The jar file is now about 10% smaller because the variable debugging info  is no longer included. The source file and line number debugging info  is still included. If required, the jar file size of the full version can  be further reduced to about 720 KB using 'build jarSmall' or even  more by removing unneeded components.
changelog_1349_li=Added shell scripts run.sh and build.sh. chmod +x is required,  but otherwise it should work. Feedback or improvements are welcome\!
changelog_1350_li=Databases in zip files\: large queries are now supported. Temp files are created in  the temp directory if required. The documentation how to create  the zip file has been corrected.
changelog_1351_li=Invalid inline views threw confusing SQL exceptions.
changelog_1352_li=The Japanese translation of the error messages and the  H2 Console has been improved. Thanks a lot to Masahiro IKEMOTO.
changelog_1353_li=Optimization for MIN() and MAX() when using MVCC.
changelog_1354_li=To protect against remote brute force password attacks,  the delay after each unsuccessful login now gets double as long.  New system properties h2.delayWrongPasswordMin  and h2.delayWrongPasswordMax.
changelog_1355_li=After setting the query timeout and then resetting it, the next query  would still timeout. Fixed.
changelog_1356_li=Adding a IDENTITY column to a table with data threw a lock timeout.
changelog_1357_li=OutOfMemoryError could occur when using EXISTS or IN(SELECT ..).
changelog_1358_li=The built-in connection pool is not called JdbcConnectionPool.  The API and documentation has been changed.
changelog_1359_li=The ConvertTraceFile tool now generates SQL statement statistics  at the end of the SQL script file (similar to the profiling data  generated when using java -Xrunhprof).
changelog_1360_li=Nested joins are now supported (A JOIN B JOIN C ON .. ON ..)
download_1000_h1=Downloads
download_1001_h3=Version 1.1.112 (2009-05-01)
download_1002_a=Windows Installer
download_1003_a=Platform-Independent Zip
download_1004_h3=Version 1.1.111 (2009-04-10, Last Stable)
download_1005_a=Windows Installer
download_1006_a=Platform-Independent Zip
download_1007_h3=Download Mirror and Older Versions
download_1008_a=Platform-Independent Zip
download_1009_h3=Jar File
download_1010_a=Maven.org
download_1011_a=Sourceforge.net
download_1012_a=Latest Automated Build (not released)
download_1013_h3=Subversion Source Repository
download_1014_a=Google Code
download_1015_p=For details about changes, see the <a href\="changelog.html">Change Log</a> .
faq_1000_h1=Frequently Asked Questions
faq_1001_a=Are there Known Bugs? When is the Next Release?
faq_1002_a=Is this Database Engine Open Source?
faq_1003_a=My Query is Slow
faq_1004_a=How to Create a New Database?
faq_1005_a=How to Connect to a Database?
faq_1006_a=Where are the Database Files Stored?
faq_1007_a=What is the Size Limit (Maximum Size) of a Database?
faq_1008_a=Is it Reliable?
faq_1009_a=Why is Opening my Database Slow?
faq_1010_a=Is the GCJ Version Stable? Faster?
faq_1011_a=How to Translate this Project?
faq_1012_h3=Are there Known Bugs? When is the Next Release?
faq_1013_p=Usually, bugs get fixes as they are found. There is a release every few weeks. Here is the list of known and confirmed issues\:
faq_1014_li=Tomcat and Glassfish 3 set most static fields (final or non-final) to null when  unloading a web application. This can cause a NullPointerException in H2 versions  1.1.107 and older, and may still not work in newer versions. Please report it if you  run into this issue. In Tomcat >\= 6.0 this behavior can be disabled by setting the  system property org.apache.catalina.loader.WebappClassLoader.ENABLE_CLEAR_REFERENCES  to false, however Tomcat may then run out of memory. A known workaround is to  put the h2.jar file in a shared <code>lib</code> directory (common/lib).
faq_1015_li=Some problems have been found with right outer join. Internally, it is converted  to left outer join, which does not always produce the same results as other databases  when used in combination with other joins.
faq_1016_li=When using Install4j before 4.1.4 on Linux and enabling 'pack200',  the h2*.jar becomes corrupted by the install process, causing application failure.  A workaround is to add an empty file h2*.jar.nopack next to the h2*.jar file.  This problem is solved in Install4j 4.1.4.
faq_1017_h3=Is this Database Engine Open Source?
faq_1018_p=Yes. It is free to use and distribute, and the source code is included. See also under license.
faq_1019_h3=My Query is Slow
faq_1020_p=Slow SELECT (or DELETE, UPDATE, MERGE) statement can have multiple reasons. Follow this checklist\:
faq_1021_li=Run ANALYZE (see documentation for details).
faq_1022_li=Run the query with EXPLAIN and check if indexes are used (see documentation for details).
faq_1023_li=If required, create additional indexes and try again using ANALYZE and EXPLAIN.
faq_1024_li=If it doesn't help please report the problem.
faq_1025_h3=How to Create a New Database?
faq_1026_p=By default, a new database is automatically created if it does not yet exist.
faq_1027_h3=How to Connect to a Database?
faq_1028_p=The database driver is <code>org.h2.Driver</code> , and the database URL starts with <code>jdbc\:h2\:</code> . To connect to a database using JDBC, use the following code\:
faq_1029_h3=Where are the Database Files Stored?
faq_1030_p=When using database URLs like jdbc\:h2\:~/test, the database is stored in the user directory. For Windows, this is usually "C\:\\Documents and Settings\\&lt;userName&gt;". If the base directory is not set (as in jdbc\:h2\:test), the database files are stored in the directory where the application is started (the current working directory). When using the H2 Console application from the start menu, this is "&lt;Installation Directory&gt;/bin". The base directory can be set in the database URL. A fixed or relative path can be used. When using the URL jdbc\:h2\:file\:data/sample, the database is stored in the directory "data" (relative to the current working directory). The directory is created automatically if it does not yet exist. It is also possible to use the fully qualified directory name (and for Windows, drive name). Example\: jdbc\:h2\:file\:C\:/data/test
faq_1031_h3=What is the Size Limit (Maximum Size) of a Database?
faq_1032_p=The theoretical limit is currently 256 GB for the data. This number is excluding BLOB and CLOB data\: every CLOB or BLOB can be up to 256 GB as well. The size limit of the index data is 256 GB as well.
faq_1033_p=The maximum number of rows per table is 2'147'483'648.
faq_1034_p=The maximum file size for FAT or FAT32 file systems is usually 4 GB. The database does provide a workaround for this problem, it is to use the file name prefix 'split\:'. See also Advanced / Limitations.
faq_1035_p=The larger the database, the more main memory is required. Currently the minimum main memory required for a 12 GB database is around 240 MB.
faq_1036_h3=Is it Reliable?
faq_1037_p=That is not easy to say. It is still a quite new product. A lot of tests have been written, and the code coverage of these tests is very high. Randomized stress tests are run regularly. But there are probably still bug that have not yet been found (as with most software). Some features are known to be dangerous, they are only supported for situations where performance is more important than reliability. Those dangerous features are\:
faq_1038_li=Disabling the transaction log mechanism using SET LOG 0.
faq_1039_li=Using the transaction isolation level READ_UNCOMMITTED (LOCK_MODE 0) while at the same time using multiple  connections.
faq_1040_li=Disabling database file protection using FILE_LOCK\=NO in the database URL.
faq_1041_li=Disabling referential integrity using SET REFERENTIAL_INTEGRITY FALSE.
faq_1042_p=In addition to that, running out of memory should be avoided. In older versions, OutOfMemory errors while using the database could corrupt a databases.
faq_1043_p=Areas that are not fully tested\:
faq_1044_li=Platforms other than Windows XP, Linux, Mac OS X, or JVMs other than Sun 1.4 - 1.6
faq_1045_li=The features AUTO_SERVER and AUTO_RECONNECT
faq_1046_li=The MVCC (multi version concurrency) mode
faq_1047_li=Cluster mode, 2-phase commit, savepoints
faq_1048_li=24/7 operation
faq_1049_li=Some operations on databases larger than 500 MB may be slower than expected
faq_1050_li=The optimizer may not always select the best plan
faq_1051_p=Areas considered Experimental\:
faq_1052_li=The PostgreSQL server
faq_1053_li=Compatibility modes for other databases (only some features are implemented)
faq_1054_h3=Why is Opening my Database Slow?
faq_1055_p=If it takes a long time to open a database, in most cases it was not closed the last time. This is specially a problem for larger databases. To close a database, close all connections to it before the application ends, or execute the command SHUTDOWN. The database is also closed when the virtual machine exits normally by using a shutdown hook. However killing a Java process or calling Runtime.halt will prevent this. The reason why opening is slow in this situations is that indexes are re-created. If you can not guarantee the database is closed, consider using SET LOG 2 (see SQL Grammar).
faq_1056_p=To find out what the problem is, open the database in embedded mode using the H2 Console. This will print progress information. If you have many 'Creating index' lines it is an indication that the database was not closed the last time.
faq_1057_p=Other possible reasons are\: the database is very big (many GB), or contains linked tables that are slow to open.
faq_1058_h3=Is the GCJ Version Stable? Faster?
faq_1059_p=The GCJ version is not as stable as the Java version. When running the regression test with the GCJ version, sometimes the application just stops at what seems to be a random point without error message. Currently, the GCJ version is also slower than when using the Sun VM. However, the startup of the GCJ version is faster than when using a VM.
faq_1060_h3=How to Translate this Project?
faq_1061_p=For more information, see <a href\="build.html\#translating">Build/Translating</a> .
features_1000_h1=Features
features_1001_a=Feature List
features_1002_a=Limitations
features_1003_a=Comparison to Other Database Engines
features_1004_a=H2 in Use
features_1005_a=Connection Modes
features_1006_a=Database URL Overview
features_1007_a=Connecting to an Embedded (Local) Database
features_1008_a=Memory-Only Databases
features_1009_a=Database Files Encryption
features_1010_a=Database File Locking
features_1011_a=Opening a Database Only if it Already Exists
features_1012_a=Closing a Database
features_1013_a=Ignore Unknown Settings
features_1014_a=Changing Other Settings when Opening a Connection
features_1015_a=Log Index Changes
features_1016_a=Custom File Access Mode
features_1017_a=Multiple Connections
features_1018_a=Database File Layout
features_1019_a=Logging and Recovery
features_1020_a=Compatibility
features_1021_a=Auto-Reconnect
features_1022_a=Automatic Mixed Mode
features_1023_a=Using the Trace Options
features_1024_a=Using Other Logging APIs
features_1025_a=Read Only Databases
features_1026_a=Read Only Databases in Zip or Jar File
features_1027_a=Graceful Handling of Low Disk Space Situations
features_1028_a=Computed Columns / Function Based Index
features_1029_a=Multi-Dimensional Indexes
features_1030_a=Using Passwords
features_1031_a=User-Defined Functions and Stored Procedures
features_1032_a=Triggers
features_1033_a=Compacting a Database
features_1034_a=Cache Settings
features_1035_h2=Feature List
features_1036_h3=Main Features
features_1037_li=Very fast database engine
features_1038_li=Open source
features_1039_li=Written in Java
features_1040_li=Supports standard SQL, JDBC API
features_1041_li=Embedded and Server mode, Clustering support
features_1042_li=Strong security features
features_1043_li=The PostgreSQL ODBC driver can be used
features_1044_li=Multi version concurrency
features_1045_h3=Additional Features
features_1046_li=Disk based or in-memory databases and tables, read-only database support, temporary tables
features_1047_li=Transaction support (read committed and serializable transaction isolation), 2-phase-commit
features_1048_li=Multiple connections, table level locking
features_1049_li=Cost based optimizer, using a genetic algorithm for complex queries, zero-administration
features_1050_li=Scrollable and updatable result set support, large result set, external result sorting, functions can return a result set
features_1051_li=Encrypted database (AES or XTEA), SHA-256 password encryption, encryption functions, SSL
features_1052_h3=SQL Support
features_1053_li=Support for multiple schemas, information schema
features_1054_li=Referential integrity / foreign key constraints with cascade, check constraints
features_1055_li=Inner and outer joins, subqueries, read only views and inline views
features_1056_li=Triggers and Java functions / stored procedures
features_1057_li=Many built-in functions, including XML and lossless data compression
features_1058_li=Wide range of data types including large objects (BLOB/CLOB) and arrays
features_1059_li=Sequence and autoincrement columns, computed columns (can be used for function based indexes)
features_1060_li=ORDER BY, GROUP BY, HAVING, UNION, LIMIT, TOP
features_1061_li=Collation support, users, roles
features_1062_li=Compatibility modes for IBM DB2, Apache Derby, HSQLDB, MS SQL Server, MySQL, Oracle, and PostgreSQL.
features_1063_h3=Security Features
features_1064_li=Includes a solution for the SQL injection problem
features_1065_li=User password authentication uses SHA-256 and salt
features_1066_li=For server mode connections, user passwords are never transmitted in plain text over the network (even when using insecure connections; this only applies to the TCP server and not to the H2 Console however; it also doesn't apply if you set the password in the database URL)
features_1067_li=All database files (including script files that can be used to backup data) can be encrypted using AES-256 and XTEA encryption algorithms
features_1068_li=The remote JDBC driver supports TCP/IP connections over SSL/TLS
features_1069_li=The built-in web server supports connections over SSL/TLS
features_1070_li=Passwords can be sent to the database using char arrays instead of Strings
features_1071_h3=Other Features and Tools
features_1072_li=Small footprint (smaller than 1 MB), low memory requirements
features_1073_li=Multiple index types (b-tree, tree, hash)
features_1074_li=Support for multi-dimensional indexes
features_1075_li=CSV (comma separated values) file support
features_1076_li=Support for linked tables, and a built-in virtual 'range' table
features_1077_li=EXPLAIN PLAN support, sophisticated trace options
features_1078_li=Database closing can be delayed or disabled to improve the performance
features_1079_li=Web-based Console application (translated to many languages) with autocomplete
features_1080_li=The database can generate SQL script files
features_1081_li=Contains a recovery tool that can dump the contents of the database
features_1082_li=Support for variables (for example to calculate running totals)
features_1083_li=Automatic re-compilation of prepared statements
features_1084_li=Uses a small number of database files
features_1085_li=Uses a checksum for each record and log entry for data integrity
features_1086_li=Well tested (high code coverage, randomized stress tests)
features_1087_h2=Limitations
features_1088_p=For the list of limitations, please have a look at the road map page at\: <a href\="http\://www.h2database.com/html/roadmap.html">http\://www.h2database.com/html/roadmap.html</a>
features_1089_h2=Comparison to Other Database Engines
features_1090_th=Feature
features_1091_th=H2
features_1092_a=Derby
features_1093_a=HSQLDB
features_1094_a=MySQL
features_1095_a=PostgreSQL
features_1096_td=Pure Java
features_1097_td=Yes
features_1098_td=Yes
features_1099_td=Yes
features_1100_td=No
features_1101_td=No
features_1102_td=Embedded Mode (Java)
features_1103_td=Yes
features_1104_td=Yes
features_1105_td=Yes
features_1106_td=No
features_1107_td=No
features_1108_td=Performance (Embedded)
features_1109_td=Fast
features_1110_td=Slow
features_1111_td=Fast
features_1112_td=N/A
features_1113_td=N/A
features_1114_td=In-Memory Mode
features_1115_td=Yes
features_1116_td=No
features_1117_td=Yes
features_1118_td=No
features_1119_td=No
features_1120_td=Transaction Isolation
features_1121_td=Yes
features_1122_td=Yes
features_1123_td=No
features_1124_td=Yes
features_1125_td=Yes
features_1126_td=Cost Based Optimizer
features_1127_td=Yes
features_1128_td=Yes
features_1129_td=No
features_1130_td=Yes
features_1131_td=Yes
features_1132_td=Explain Plan
features_1133_td=Yes
features_1134_td=No
features_1135_td=Yes
features_1136_td=Yes
features_1137_td=Yes
features_1138_td=Clustering
features_1139_td=Yes
features_1140_td=No
features_1141_td=No
features_1142_td=Yes
features_1143_td=Yes
features_1144_td=Encrypted Database
features_1145_td=Yes
features_1146_td=Yes
features_1147_td=No
features_1148_td=No
features_1149_td=No
features_1150_td=Linked Tables
features_1151_td=Yes
features_1152_td=No
features_1153_td=Partially *1
features_1154_td=Partially *2
features_1155_td=No
features_1156_td=ODBC Driver
features_1157_td=Yes
features_1158_td=No
features_1159_td=No
features_1160_td=Yes
features_1161_td=Yes
features_1162_td=Fulltext Search
features_1163_td=Yes
features_1164_td=No
features_1165_td=No
features_1166_td=Yes
features_1167_td=Yes
features_1168_td=User-Defined Datatypes
features_1169_td=Yes
features_1170_td=No
features_1171_td=No
features_1172_td=Yes
features_1173_td=Yes
features_1174_td=Files per Database
features_1175_td=Few
features_1176_td=Many
features_1177_td=Few
features_1178_td=Many
features_1179_td=Many
features_1180_td=Table Level Locking
features_1181_td=Yes
features_1182_td=Yes
features_1183_td=No
features_1184_td=Yes
features_1185_td=Yes
features_1186_td=Row Level Locking
features_1187_td=Yes *9
features_1188_td=Yes
features_1189_td=No
features_1190_td=Yes
features_1191_td=Yes
features_1192_td=Multi Version Concurrency
features_1193_td=Yes
features_1194_td=No
features_1195_td=No
features_1196_td=No
features_1197_td=Yes
features_1198_td=Role Based Security
features_1199_td=Yes
features_1200_td=Yes *3
features_1201_td=Yes
features_1202_td=Yes
features_1203_td=Yes
features_1204_td=Updatable Result Sets
features_1205_td=Yes
features_1206_td=Yes *7
features_1207_td=No
features_1208_td=Yes
features_1209_td=Yes
features_1210_td=Sequences
features_1211_td=Yes
features_1212_td=No
features_1213_td=Yes
features_1214_td=No
features_1215_td=Yes
features_1216_td=Limit and Offset
features_1217_td=Yes
features_1218_td=No
features_1219_td=Yes
features_1220_td=Yes
features_1221_td=Yes
features_1222_td=Temporary Tables
features_1223_td=Yes
features_1224_td=Yes *4
features_1225_td=Yes
features_1226_td=Yes
features_1227_td=Yes
features_1228_td=Information Schema
features_1229_td=Yes
features_1230_td=No *8
features_1231_td=No *8
features_1232_td=Yes
features_1233_td=Yes
features_1234_td=Computed Columns
features_1235_td=Yes
features_1236_td=No
features_1237_td=No
features_1238_td=No
features_1239_td=Yes *6
features_1240_td=Case Insensitive Columns
features_1241_td=Yes
features_1242_td=No
features_1243_td=Yes
features_1244_td=Yes
features_1245_td=Yes *6
features_1246_td=Custom Aggregate Functions
features_1247_td=Yes
features_1248_td=No
features_1249_td=No
features_1250_td=Yes
features_1251_td=Yes
features_1252_td=Footprint (jar/dll size)
features_1253_td=~1 MB *5
features_1254_td=~2 MB
features_1255_td=~600 KB
features_1256_td=~4 MB
features_1257_td=~6 MB
features_1258_p=*1 HSQLDB supports text tables.
features_1259_p=*2 MySQL supports linked MySQL tables under the name 'federated tables'.
features_1260_p=*3 Derby support for roles based security and password checking as an option.
features_1261_p=*4 Derby only supports global temporary tables.
features_1262_p=*5 The default H2 jar file contains debug information, jar files for other databases do not.
features_1263_p=*6 PostgreSQL supports functional indexes.
features_1264_p=*7 Derby only supports updatable result sets if the query is not sorted.
features_1265_p=*8 Derby and HSQLDB don't support standard compliant information schema tables.
features_1266_p=*9 H2 supports row level locks when using multi version concurrency.
features_1267_h3=Derby and HSQLDB
features_1268_p=After an unexpected process termination (for example power failure), H2 can recover safely and automatically without any user interaction. For Derby and HSQLDB, some manual steps are required ('Another instance of Derby may have already booted the database' / 'The database is already in use by another process').
features_1269_h3=DaffodilDb and One$Db
features_1270_p=It looks like the development of this database has stopped. The last release was February 2006.
features_1271_h3=McKoi
features_1272_p=It looks like the development of this database has stopped. The last release was August 2004
features_1273_h2=H2 in Use
features_1274_p=For a list of applications that work with or use H2, see\: <a href\="links.html">Links</a> .
features_1275_h2=Connection Modes
features_1276_p=The following connection modes are supported\:
features_1277_li=Embedded mode (local connections using JDBC)
features_1278_li=Server mode (remote connections using JDBC or ODBC over TCP/IP)
features_1279_li=Mixed mode (local and remote connections at the same time)
features_1280_h3=Embedded Mode
features_1281_p=In embedded mode, an application opens a database from within the same JVM using JDBC. This is the fastest and easiest connection mode. The disadvantage is that a database may only be open in one virtual machine (and class loader) at any time. As in all modes, both persistent and in-memory databases are supported. There is no limit on the number of database open concurrently, or on the number of open connections.
features_1282_h3=Server Mode
features_1283_p=When using the server mode (sometimes called remote mode or client/server mode), an application opens a database remotely using the JDBC or ODBC API. A server needs to be started within the same or another virtual machine, or on another computer. Many applications can connect to the same database at the same time. The server mode is slower than the embedded mode, because all data is transferred over TCP/IP. As in all modes, both persistent and in-memory databases are supported. There is no limit on the number of database open concurrently, or on the number of open connections.
features_1284_h3=Mixed Mode
features_1285_p=The mixed mode is a combination of the embedded and the server mode. The first application that connects to a database does that in embedded mode, but also starts a server so that other applications (running in different processes or virtual machines) can concurrently access the same data. The local connections are as fast as if the database is used in just the embedded mode, while the remote connections are a bit slower.
features_1286_p=The server can be started and stopped from within the application (using the server API), or automatically (automatic mixed mode). When using the <a href\="\#auto_mixed_mode">automatic mixed mode</a> , all clients that want to connect to the database (no matter if it's an local or remote connection) can do so using the exact same database URL.
features_1287_h2=Database URL Overview
features_1288_p=This database supports multiple connection modes and connection settings. This is achieved using different database URLs. Settings in the URLs are not case sensitive.
features_1289_th=Topic
features_1290_th=URL Format and Examples
features_1291_a=Embedded (local) connection
features_1292_td=jdbc\:h2\:[file\:][&lt;path&gt;]&lt;databaseName&gt;
features_1293_td=jdbc\:h2\:~/test
features_1294_td=jdbc\:h2\:file\:/data/sample
features_1295_td=jdbc\:h2\:file\:C\:/data/sample (Windows only)
features_1296_a=In-memory (private)
features_1297_td=jdbc\:h2\:mem\:
features_1298_a=In-memory (named)
features_1299_td=jdbc\:h2\:mem\:&lt;databaseName&gt;
features_1300_td=jdbc\:h2\:mem\:test_mem
features_1301_a=Server mode (remote connections)
features_1302_a=using TCP/IP
features_1303_td=jdbc\:h2\:tcp\://&lt;server&gt;[\:&lt;port&gt;]/[&lt;path&gt;]&lt;databaseName&gt;
features_1304_td=jdbc\:h2\:tcp\://localhost/~/test
features_1305_td=jdbc\:h2\:tcp\://dbserv\:8084/~/sample
features_1306_a=Server mode (remote connections)
features_1307_a=using SSL/TLS
features_1308_td=jdbc\:h2\:ssl\://&lt;server&gt;[\:&lt;port&gt;]/&lt;databaseName&gt;
features_1309_td=jdbc\:h2\:ssl\://secureserv\:8085/~/sample;
features_1310_a=Using encrypted files
features_1311_td=jdbc\:h2\:&lt;url&gt;;CIPHER\=[AES|XTEA]
features_1312_td=jdbc\:h2\:ssl\://secureserv/~/testdb;CIPHER\=AES
features_1313_td=jdbc\:h2\:file\:~/secure;CIPHER\=XTEA
features_1314_a=File locking methods
features_1315_td=jdbc\:h2\:&lt;url&gt;;FILE_LOCK\={NO|FILE|SOCKET}
features_1316_td=jdbc\:h2\:file\:~/quickAndDirty;FILE_LOCK\=NO
features_1317_td=jdbc\:h2\:file\:~/private;CIPHER\=XTEA;FILE_LOCK\=SOCKET
features_1318_a=Only open if it already exists
features_1319_td=jdbc\:h2\:&lt;url&gt;;IFEXISTS\=TRUE
features_1320_td=jdbc\:h2\:file\:~/sample;IFEXISTS\=TRUE
features_1321_a=Don't close the database when the VM exits
features_1322_td=jdbc\:h2\:&lt;url&gt;;DB_CLOSE_ON_EXIT\=FALSE
features_1323_a=User name and/or password
features_1324_td=jdbc\:h2\:&lt;url&gt;[;USER\=&lt;username&gt;][;PASSWORD\=&lt;value&gt;]
features_1325_td=jdbc\:h2\:file\:~/sample;USER\=sa;PASSWORD\=123
features_1326_a=Log index changes
features_1327_td=jdbc\:h2\:&lt;url&gt;;LOG\=2
features_1328_td=jdbc\:h2\:file\:~/sample;LOG\=2
features_1329_a=Debug trace settings
features_1330_td=jdbc\:h2\:&lt;url&gt;;TRACE_LEVEL_FILE\=&lt;level 0..3&gt;
features_1331_td=jdbc\:h2\:file\:~/sample;TRACE_LEVEL_FILE\=3
features_1332_a=Ignore unknown settings
features_1333_td=jdbc\:h2\:&lt;url&gt;;IGNORE_UNKNOWN_SETTINGS\=TRUE
features_1334_a=Custom file access mode
features_1335_td=jdbc\:h2\:&lt;url&gt;;ACCESS_MODE_LOG\=rws;ACCESS_MODE_DATA\=rws
features_1336_a=Database in a zip file
features_1337_td=jdbc\:h2\:zip\:&lt;zipFileName&gt;\!/&lt;databaseName&gt;
features_1338_td=jdbc\:h2\:zip\:~/db.zip\!/test
features_1339_a=Compatibility mode
features_1340_td=jdbc\:h2\:&lt;url&gt;;MODE\=&lt;databaseType&gt;
features_1341_td=jdbc\:h2\:~/test;MODE\=MYSQL
features_1342_a=Auto-reconnect
features_1343_td=jdbc\:h2\:&lt;url&gt;;AUTO_RECONNECT\=TRUE
features_1344_td=jdbc\:h2\:tcp\://localhost/~/test;AUTO_RECONNECT\=TRUE
features_1345_a=Automatic mixed mode
features_1346_td=jdbc\:h2\:&lt;url&gt;;AUTO_SERVER\=TRUE
features_1347_td=jdbc\:h2\:~/test;AUTO_SERVER\=TRUE
features_1348_a=Changing other settings
features_1349_td=jdbc\:h2\:&lt;url&gt;;&lt;setting&gt;\=&lt;value&gt;[;&lt;setting&gt;\=&lt;value&gt;...]
features_1350_td=jdbc\:h2\:file\:~/sample;TRACE_LEVEL_SYSTEM_OUT\=3
features_1351_h2=Connecting to an Embedded (Local) Database
features_1352_p=The database URL for connecting to a local database is <code>jdbc\:h2\:[file\:][&lt;path&gt;]&lt;databaseName&gt;</code> . The prefix <code>file\:</code> is optional. If no or only a relative path is used, then the current working directory is used as a starting point. The case sensitivity of the path and database name depend on the operating system, however it is recommended to use lowercase letters only. The database name must be at least three characters long (a limitation of File.createTempFile). To point to the user home directory, use ~/, as in\: jdbc\:h2\:~/test.
features_1353_h2=Memory-Only Databases
features_1354_p=For certain use cases (for example\: rapid prototyping, testing, high performance operations, read-only databases), it may not be required to persist data, or persist changes to the data. This database supports the memory-only mode, where the data is not persisted.
features_1355_p=In some cases, only one connection to a memory-only database is required. This means the database to be opened is private. In this case, the database URL is <code>jdbc\:h2\:mem\:</code> Opening two connections within the same virtual machine means opening two different (private) databases.
features_1356_p=Sometimes multiple connections to the same memory-only database are required. In this case, the database URL must include a name. Example\: <code>jdbc\:h2\:mem\:db1</code> . Accessing the same database in this way only works within the same virtual machine and class loader environment.
features_1357_p=It is also possible to access a memory-only database remotely (or from multiple processes in the same machine) using TCP/IP or SSL/TLS. An example database URL is\: <code>jdbc\:h2\:tcp\://localhost/mem\:db1</code> .
features_1358_p=By default, closing the last connection to a database closes the database. For an in-memory database, this means the content is lost. To keep the database open, add ;DB_CLOSE_DELAY\=-1 to the database URL. To keep the content of an in-memory database as long as the virtual machine is alive, use <code>jdbc\:h2\:mem\:test;DB_CLOSE_DELAY\=-1</code> .
features_1359_h2=Database Files Encryption
features_1360_p=The database files can be encrypted. Two encryption algorithms are supported\: AES and XTEA. To use file encryption, you need to specify the encryption algorithm (the 'cipher') and the file password (in addition to the user password) when connecting to the database.
features_1361_h3=Creating a New Database with File Encryption
features_1362_p=By default, a new database is automatically created if it does not exist yet. To create an encrypted database, connect to it as it would already exist.
features_1363_h3=Connecting to an Encrypted Database
features_1364_p=The encryption algorithm is set in the database URL, and the file password is specified in the password field, before the user password. A single space separates the file password and the user password; the file password itself may not contain spaces. File passwords and user passwords are case sensitive. Here is an example to connect to a password-encrypted database\:
features_1365_h3=Encrypting or Decrypting a Database
features_1366_p=To encrypt an existing database, use the ChangeFileEncryption tool. This tool can also decrypt an encrypted database, or change the file encryption key. The tool is available from within the H2 Console in the Tools section, or you can run it from the command line. The following command line will encrypt the database 'test' in the user home directory with the file password 'filepwd' and the encryption algorithm AES\:
features_1367_h2=Database File Locking
features_1368_p=Whenever a database is opened, a lock file is created to signal other processes that the database is in use. If database is closed, or if the process that opened the database terminates, this lock file is deleted.
features_1369_p=The following file locking methods are implemented\:
features_1370_li=The default method is 'file' and uses a watchdog thread to protect the database file. The watchdog reads the lock file each second.
features_1371_li=The second method is 'socket' and opens a server socket. The socket method does not require reading the lock file every second. The socket method should only be used if the database files are only accessed by one (and always the same) computer.
features_1372_li=It is also possible to open the database without file locking; in this case it is up to the application to protect the database files.
features_1373_p=To open the database with a different file locking method, use the parameter 'FILE_LOCK'. The following code opens the database with the 'socket' locking method\:
features_1374_p=The following code forces the database to not create a lock file at all. Please note that this is unsafe as another process is able to open the same database, possibly leading to data corruption\:
features_1375_p=For more information about the algorithms, see <a href\="advanced.html\#file_locking_protocols">Advanced / File Locking Protocols</a> .
features_1376_h2=Opening a Database Only if it Already Exists
features_1377_p=By default, when an application calls <code>DriverManager.getConnection(url, ...)</code> and the database specified in the URL does not yet exist, a new (empty) database is created. In some situations, it is better to restrict creating new databases, and only allow to open existing databases. To do this, add <code>;ifexists\=true</code> to the database URL. In this case, if the database does not already exist, an exception is thrown when trying to connect. The connection only succeeds when the database already exists. The complete URL may look like this\:
features_1378_h2=Closing a Database
features_1379_h3=Delayed Database Closing
features_1380_p=Usually, a database is closed when the last connection to it is closed. In some situations this slows down the application, for example when it is not possible to keep at least one connection open. The automatic closing of a database can be delayed or disabled with the SQL statement SET DB_CLOSE_DELAY &lt;seconds&gt;. The parameter &lt;seconds&gt; specifies the number of seconds to keep a database open after the last connection to it was closed. The following statement will keep a database open for 10 seconds after the last connection was closed\:
features_1381_p=The value -1 means the database is not closed automatically. The value 0 is the default and means the database is closed when the last connection is closed. This setting is persistent and can be set by an administrator only. It is possible to set the value in the database URL\: <code>jdbc\:h2\:~/test;DB_CLOSE_DELAY\=10</code> .
features_1382_h3=Don't Close a Database when the VM Exits
features_1383_p=By default, a database is closed when the last connection is closed. However, if it is never closed, the database is closed when the virtual machine exits normally, using a shutdown hook. In some situations, the database should not be closed in this case, for example because the database is still used at virtual machine shutdown (to store the shutdown process in the database for example). For those cases, the automatic closing of the database can be disabled in the database URL. The first connection (the one that is opening the database) needs to set the option in the database URL (it is not possible to change the setting afterwards). The database URL to disable database closing on exit is\:
features_1384_h2=Log Index Changes
features_1385_p=Usually, changes to the index file are not logged for performance. If the index file is corrupt or missing when opening a database, it is re-created from the data. The index file can get corrupt when the database is not shut down correctly, because of power failure or abnormal program termination. In some situations, for example when using very large databases (over a few hundred MB), re-creating the index file takes very long. In these situations it may be better to log changes to the index file, so that recovery from a corrupted index file is fast. To enable log index changes, add LOG\=2 to the URL, as in <code>jdbc\:h2\:~/test;LOG\=2</code> . This setting should be specified when connecting. The update performance of the database will be reduced when using this option.
features_1386_h2=Ignore Unknown Settings
features_1387_p=Some applications (for example OpenOffice.org Base) pass some additional parameters when connecting to the database. Why those parameters are passed is unknown. The parameters PREFERDOSLIKELINEENDS and IGNOREDRIVERPRIVILEGES are such examples; they are simply ignored to improve the compatibility with OpenOffice.org. If an application passes other parameters when connecting to the database, usually the database throws an exception saying the parameter is not supported. It is possible to ignored such parameters by adding ;IGNORE_UNKNOWN_SETTINGS\=TRUE to the database URL.
features_1388_h2=Changing Other Settings when Opening a Connection
features_1389_p=In addition to the settings already described, other database settings can be passed in the database URL. Adding <code>;setting\=value</code> at the end of a database URL is the same as executing the statement <code>SET setting value</code> just after connecting. For a list of supported settings, see <a href\="grammar.html">SQL Grammar</a> .
features_1390_h2=Custom File Access Mode
features_1391_p=Usually, the database opens log, data and index files with the access mode 'rw', meaning read-write (except for read only databases, where the mode 'r' is used). To open a database in read-only mode if the files are not read-only, use ACCESS_MODE_DATA\=r. Also supported are 'rws' and 'rwd'. The access mode used for log files is set via ACCESS_MODE_LOG; for data and index files use ACCESS_MODE_DATA. These settings must be specified in the database URL\:
features_1392_p=For more information see <a href\="advanced.html\#durability_problems">Durability Problems</a> . On many operating systems the access mode 'rws' does not guarantee that the data is written to the disk.
features_1393_h2=Multiple Connections
features_1394_h3=Opening Multiple Databases at the Same Time
features_1395_p=An application can open multiple databases at the same time, including multiple connections to the same database. The number of open database is only limited by the memory available.
features_1396_h3=Multiple Connections to the Same Database\: Client/Server
features_1397_p=If you want to access the same database at the same time from different processes or computers, you need to use the client / server mode. In this case, one process acts as the server, and the other processes (that could reside on other computers as well) connect to the server via TCP/IP (or SSL/TLS over TCP/IP for improved security).
features_1398_h3=Multithreading Support
features_1399_p=This database is multithreading-safe. That means, if an application is multi-threaded, it does not need to worry about synchronizing access to the database. Internally, most requests to the same database are synchronized. That means an application can use multiple threads that access the same database at the same time, however if one thread executes a long running query, the other threads need to wait.
features_1400_h3=Locking, Lock-Timeout, Deadlocks
features_1401_p=The database uses table level locks to give each connection a consistent state of the data. There are two kinds of locks\: read locks (shared locks) and write locks (exclusive locks). All locks are released when the transaction commits or rolls back. When using the default transaction isolation level 'read committed', read locks are already released after each statement.
features_1402_p=If a connection wants to reads from a table, and there is no write lock on the table, then a read lock is added to the table. If there is a write lock, then this connection waits for the other connection to release the lock. If a connection cannot get a lock for a specified time, then a lock timeout exception is thrown.
features_1403_p=Usually, SELECT statements will generate read locks. This includes subqueries. Statements that modify data use write locks. It is also possible to lock a table exclusively without modifying data, using the statement SELECT ... FOR UPDATE. The statements COMMIT and ROLLBACK releases all open locks. The commands SAVEPOINT and ROLLBACK TO SAVEPOINT don't affect locks. The locks are also released when the autocommit mode changes, and for connections with autocommit set to true (this is the default), locks are released after each statement. The following statements generate locks\:
features_1404_th=Type of Lock
features_1405_th=SQL Statement
features_1406_td=Read
features_1407_td=SELECT * FROM TEST;
features_1408_td=CALL SELECT MAX(ID) FROM TEST;
features_1409_td=SCRIPT;
features_1410_td=Write
features_1411_td=SELECT * FROM TEST WHERE 1\=0 FOR UPDATE;
features_1412_td=Write
features_1413_td=INSERT INTO TEST VALUES(1, 'Hello');
features_1414_td=INSERT INTO TEST SELECT * FROM TEST;
features_1415_td=UPDATE TEST SET NAME\='Hi';
features_1416_td=DELETE FROM TEST;
features_1417_td=Write
features_1418_td=ALTER TABLE TEST ...;
features_1419_td=CREATE INDEX ... ON TEST ...;
features_1420_td=DROP INDEX ...;
features_1421_p=The number of seconds until a lock timeout exception is thrown can be set separately for each connection using the SQL command SET LOCK_TIMEOUT &lt;milliseconds&gt;. The initial lock timeout (that is the timeout used for new connections) can be set using the SQL command SET DEFAULT_LOCK_TIMEOUT &lt;milliseconds&gt;. The default lock timeout is persistent.
features_1422_h2=Database File Layout
features_1423_p=There are a number of files created for persistent databases. Unlike some other databases, not every table and/or index is stored in its own file. Instead, usually only the following files are created\: A data file, an index file, a log file, and a database lock file (exists only while the database is in use). In addition to that, a file is created for each large object (CLOB/BLOB) larger than a certain size, and temporary files for large result sets. If the database trace option is enabled, trace files are created. The following files can be created by the database\:
features_1424_th=File Name
features_1425_th=Description
features_1426_th=Number of Files
features_1427_td=test.data.db
features_1428_td=Data file.
features_1429_td=Contains the data for all tables.
features_1430_td=Format\: &lt;database&gt;.data.db
features_1431_td=1 per database
features_1432_td=test.index.db
features_1433_td=Index file.
features_1434_td=Contains the data for all (b tree) indexes.
features_1435_td=Format\: &lt;database&gt;.index.db
features_1436_td=1 per database
features_1437_td=test.0.log.db
features_1438_td=Transaction log file.
features_1439_td=The transaction log is used for recovery.
features_1440_td=Format\: &lt;database&gt;.&lt;id&gt;.log.db
features_1441_td=0 or more per database
features_1442_td=test.lock.db
features_1443_td=Database lock file.
features_1444_td=Exists only while the database is open.
features_1445_td=Format\: &lt;database&gt;.lock.db
features_1446_td=1 per database
features_1447_td=test.trace.db
features_1448_td=Trace file.
features_1449_td=Contains trace information.
features_1450_td=Format\: &lt;database&gt;.trace.db
features_1451_td=If the file is too big, it is renamed to &lt;database&gt;.trace.db.old
features_1452_td=1 per database
features_1453_td=test.lobs.db/1.t15.lob.db
features_1454_td=Large object.
features_1455_td=Contains the data for BLOB or CLOB values.
features_1456_td=Format\: &lt;id&gt;.t&lt;tableId&gt;.lob.db
features_1457_td=1 per value
features_1458_td=test.123.temp.db
features_1459_td=Temporary file.
features_1460_td=Contains a temporary blob or a large result set.
features_1461_td=Format\: &lt;database&gt;.&lt;id&gt;.temp.db
features_1462_td=1 per object
features_1463_h3=Moving and Renaming Database Files
features_1464_p=Database name and location are not stored inside the database files.
features_1465_p=While a database is closed, the files can be moved to another directory, and they can be renamed as well (as long as all files start with the same name).
features_1466_p=As there is no platform specific data in the files, they can be moved to other operating systems without problems.
features_1467_h3=Backup
features_1468_p=When the database is closed, it is possible to backup the database files. Please note that index files do not need to be backed up, because they contain redundant data, and will be recreated automatically if they don't exist.
features_1469_p=To backup data while the database is running, the SQL command SCRIPT can be used.
features_1470_h2=Logging and Recovery
features_1471_p=Whenever data is modified in the database and those changes are committed, the changes are logged to disk (except for in-memory objects). The changes to the data file itself are usually written later on, to optimize disk access. If there is a power failure, the data and index files are not up-to-date. But because the changes are in the log file, the next time the database is opened, the changes that are in the log file are re-applied automatically.
features_1472_p=Please note that index file updates are not logged by default. If the database is opened and recovery is required, the index file is rebuilt from scratch.
features_1473_p=There is usually only one log file per database. This file grows until the database is closed successfully, and is then deleted. Or, if the file gets too big, the database switches to another log file (with a higher id). It is possible to force the log switching by using the CHECKPOINT command.
features_1474_p=If the database file is corrupted, because the checksum of a record does not match (for example, if the file was edited with another application), the database can be opened in recovery mode. In this case, errors in the database are logged but not thrown. The database should be backed up to a script and re-built as soon as possible. To open the database in the recovery mode, use a database URL must contain RECOVER\=1, as in jdbc\:h2\:~/test;RECOVER\=1. Indexes are rebuilt in this case, and the summary (object allocation table) is not read in this case, so opening the database takes longer.
features_1475_h2=Compatibility
features_1476_p=All database engines behave a little bit different. Where possible, H2 supports the ANSI SQL standard, and tries to be compatible to other databases. There are still a few differences however\:
features_1477_p=In MySQL text columns are case insensitive by default, while in H2 they are case sensitive. However H2 supports case insensitive columns as well. To create the tables with case insensitive texts, append IGNORECASE\=TRUE to the database URL (example\: <code>jdbc\:h2\:~/test;IGNORECASE\=TRUE</code> ).
features_1478_h3=Compatibility Modes
features_1479_p=For certain features, this database can emulate the behavior of specific databases. Not all features or differences of those databases are implemented. Here is the list of currently supported modes and the differences to the regular mode\:
features_1480_h3=DB2 Compatibility Mode
features_1481_p=To use the IBM DB2 mode, use the database URL <code>jdbc\:h2\:~/test;MODE\=DB2</code> or the SQL statement <code>SET MODE DB2</code> .
features_1482_li=For aliased columns, ResultSetMetaData.getColumnName() returns the alias name  and getTableName() returns null.
features_1483_li=Support for the syntax [OFFSET .. ROW] [FETCH ... ONLY]  as an alternative for LIMIT .. OFFSET.
features_1484_h3=Derby Compatibility Mode
features_1485_p=To use the Apache Derby mode, use the database URL <code>jdbc\:h2\:~/test;MODE\=Derby</code> or the SQL statement <code>SET MODE Derby</code> .
features_1486_li=For aliased columns, ResultSetMetaData.getColumnName() returns the alias name  and getTableName() returns null.
features_1487_li=For unique indexes, NULL is distinct. That means only one row with NULL  in one of the columns is allowed.
features_1488_h3=HSQLDB Compatibility Mode
features_1489_p=To use the HSQLDB mode, use the database URL <code>jdbc\:h2\:~/test;MODE\=HSQLDB</code> or the SQL statement <code>SET MODE HSQLDB</code> .
features_1490_li=For aliased columns, ResultSetMetaData.getColumnName() returns the alias name  and getTableName() returns null.
features_1491_li=When converting the scale of decimal data, the number is only converted if the new scale is  smaller than the current scale. Usually, the scale is converted and 0s are added if required.
features_1492_li=Concatenation with NULL results in NULL. Usually, NULL is treated as an empty  string if only one of the operands is NULL, and NULL is only returned if both operands are NULL.
features_1493_li=For unique indexes, NULL is distinct. That means only one row with NULL  in one of the columns is allowed.
features_1494_h3=MS SQL Server Compatibility Mode
features_1495_p=To use the MS SQL Server mode, use the database URL <code>jdbc\:h2\:~/test;MODE\=MSSQLServer</code> or the SQL statement <code>SET MODE MSSQLServer</code> .
features_1496_li=For aliased columns, ResultSetMetaData.getColumnName() returns the alias name  and getTableName() returns null.
features_1497_li=Identifiers may be quoted using square brackets as in [Test].
features_1498_li=For unique indexes, NULL is distinct. That means only one row with NULL  in one of the columns is allowed.
features_1499_h3=MySQL Compatibility Mode
features_1500_p=To use the MySQL mode, use the database URL <code>jdbc\:h2\:~/test;MODE\=MySQL</code> or the SQL statement <code>SET MODE MySQL</code> .
features_1501_li=When inserting data, if a column is defined to be NOT NULL and NULL is inserted,  then a 0 (or empty string, or the current timestamp for timestamp columns) value is used.  Usually, this operation is not allowed and an exception is thrown.
features_1502_li=Creating indexes in the CREATE TABLE statement is allowed.
features_1503_li=Meta data calls return identifiers in lower case.
features_1504_li=When converting a floating point number to an integer, the fractional  digits are not truncated, but the value is rounded.
features_1505_h3=Oracle Compatibility Mode
features_1506_p=To use the Oracle mode, use the database URL <code>jdbc\:h2\:~/test;MODE\=Oracle</code> or the SQL statement <code>SET MODE Oracle</code> .
features_1507_li=For aliased columns, ResultSetMetaData.getColumnName() returns the alias name  and getTableName() returns null.
features_1508_li=When using unique indexes, multiple rows with NULL in all columns  are allowed, however it is not allowed to have multiple rows with the  same values otherwise.
features_1509_h3=PostgreSQL Compatibility Mode
features_1510_p=To use the PostgreSQL mode, use the database URL <code>jdbc\:h2\:~/test;MODE\=PostgreSQL</code> or the SQL statement <code>SET MODE PostgreSQL</code> .
features_1511_li=For aliased columns, ResultSetMetaData.getColumnName() returns the alias name  and getTableName() returns null.
features_1512_li=Concatenation with NULL results in NULL. Usually, NULL is treated as an empty  string if only one of the operands is NULL, and NULL is only returned if both operands are NULL.
features_1513_li=When converting a floating point number to an integer, the fractional  digits are not be truncated, but the value is rounded.
features_1514_li=The system columns 'CTID' and 'OID' are supported.
features_1515_h2=Auto-Reconnect
features_1516_p=The auto-reconnect feature causes the JDBC driver to reconnect to the database if the connection is lost. The automatic re-connect only occurs when auto-commit is enabled; if auto-commit is disabled, an exception is thrown.
features_1517_p=Re-connecting will open a new session. After an automatic re-connect, variables and local temporary tables definitions (excluding data) are re-created. The contents of the system table INFORMATION_SCHEMA.SESSION_STATE contains all client side state that is re-created.
features_1518_h2=Automatic Mixed Mode
features_1519_p=Multiple processes can access the same database without having to start the server manually. To do that, append <code>;AUTO_SERVER\=TRUE</code> to the database URL. You can use the same database URL no matter if the database is already open or not.
features_1520_p=When using this mode, the first connection to the database is made in embedded mode, and additionally a server is started internally. If the database is already open in another process, the server mode is used automatically.
features_1521_p=The application that opens the first connection to the database uses the embedded mode, which is faster than the server mode. Therefore the main application should open the database first if possible. The first connection automatically starts a server on a random port. This server allows remote connections, however only to this database (to ensure that, the client reads .lock.db file and sends the the random key that is stored there to the server). When the first connection is closed, the server stops. If other (remote) connections are still open, one of them will then start a server (auto-reconnect is enabled automatically).
features_1522_p=This mode has three disadvantages\: All processes need to have access to the database files. Then, if the first connection is closed (the connection that started the server), open transactions of other connections will be rolled back. Also, explicit client/server connections (using jdbc\:h2\:tcp\:// or ssl\://) are not supported.
features_1523_p=Here is an example how to use this mode. Application 1 and 2 are not necessarily started on the same computer, but they need to have access to the database files. Application 1 and 2 are typically two different processes (however they could run within the same process).
features_1524_h2=Using the Trace Options
features_1525_p=To find problems in an application, it is sometimes good to see what database operations where executed. This database offers the following trace features\:
features_1526_li=Trace to System.out and/or a file
features_1527_li=Support for trace levels OFF, ERROR, INFO, and DEBUG
features_1528_li=The maximum size of the trace file can be set
features_1529_li=It is possible to generate Java source code from the trace file
features_1530_li=Trace can be enabled at runtime by manually creating a file
features_1531_h3=Trace Options
features_1532_p=The simplest way to enable the trace option is setting it in the database URL. There are two settings, one for System.out (TRACE_LEVEL_SYSTEM_OUT) tracing, and one for file tracing (TRACE_LEVEL_FILE). The trace levels are 0 for OFF, 1 for ERROR (the default), 2 for INFO and 3 for DEBUG. A database URL with both levels set to DEBUG is\:
features_1533_p=The trace level can be changed at runtime by executing the SQL command <code>SET TRACE_LEVEL_SYSTEM_OUT level</code> (for System.out tracing) or <code>SET TRACE_LEVEL_FILE level</code> (for file tracing). Example\:
features_1534_h3=Setting the Maximum Size of the Trace File
features_1535_p=When using a high trace level, the trace file can get very big quickly. The default size limit is 16 MB, if the trace file exceeds this limit, it is renamed to .old and a new file is created. If another .old file exists, it is deleted. The size limit can be changed using the SQL statement <code>SET TRACE_MAX_FILE_SIZE maximumFileSizeInMB</code> . Example\:
features_1536_h3=Java Code Generation
features_1537_p=When setting the trace level to INFO or DEBUG, Java source code is generated as well. This allows to reproduce problems more easily. The trace file looks like this\:
features_1538_p=To filter the Java source code, use the ConvertTraceFile tool as follows\:
features_1539_p=The generated file <code>Test.java</code> will contain the Java source code. The generated source code may be too large to compile (the size of a Java method is limited). If this is the case, the source code needs to be split in multiple methods. The password is not listed in the trace file and therefore not included in the source code.
features_1540_h2=Using Other Logging APIs
features_1541_p=By default, this database uses its own native 'trace' facility. This facility is called 'trace' and not 'log' within this database to avoid confusion with the transaction log. Trace messages can be written to both file and System.out. In most cases, this is sufficient, however sometimes it is better to use the same facility as the application, for example Log4j. To do that, this database support SLF4J.
features_1542_a=SLF4J
features_1543_p=is a simple facade for various logging APIs and allows to plug in the desired implementation at deployment time. SLF4J supports implementations such as Logback, Log4j, Jakarta Commons Logging (JCL), JDK 1.4 logging, x4juli, and Simple Log.
features_1544_p=To enable SLF4J, set the file trace level to 4 in the database URL\:
features_1545_p=Changing the log mechanism is not possible after the database is open, that means executing the SQL statement SET TRACE_LEVEL_FILE 4 when the database is already open will not have the desired effect. To use SLF4J, all required jar files need to be in the classpath. If it does not work, check the file &lt;database&gt;.trace.db for error messages.
features_1546_h2=Read Only Databases
features_1547_p=If the database files are read-only, then the database is read-only as well. It is not possible to create new tables, add or modify data in this database. Only SELECT and CALL statements are allowed. To create a read-only database, close the database so that the log file gets smaller. Do not delete the log file. Then, make the database files read-only using the operating system. When you open the database now, it is read-only. There are two ways an application can find out whether database is read-only\: By calling Connection.isReadOnly() or by executing the SQL statement CALL READONLY().
features_1548_h2=Read Only Databases in Zip or Jar File
features_1549_p=To create a read-only database in a zip file, first create a regular persistent database, and then create a backup. If you are using a database named 'test', an easy way to do that is using the Backup tool or the BACKUP SQL statement\:
features_1550_p=The database must not have pending changes, that means you need to close all connections to the database, open one single connection, and then execute the statement. Afterwards, you can log out, and directly open the database in the zip file using the following database URL\:
features_1551_p=Databases in zip files are read-only. The performance for some queries will be slower than when using a regular database, because random access in zip files is not supported (only streaming). How much this affects the performance depends on the queries and the data. The database is not read in memory; therefore large databases are supported as well. The same indexes are used as when using a regular database.
features_1552_h2=Graceful Handling of Low Disk Space Situations
features_1553_p=If the database needs more disk space, it calls the database event listener if one is installed. The application may then delete temporary files, or display a message and wait until the user has resolved the problem. To install a listener, run the SQL statement SET DATABASE_EVENT_LISTENER or use a database URL of the form jdbc\:h2\:~/test;DATABASE_EVENT_LISTENER\='com.acme.DbListener' (the quotes around the class name are required). See also the DatabaseEventListener API.
features_1554_h3=Opening a Corrupted Database
features_1555_p=If a database cannot be opened because the boot info (the SQL script that is run at startup) is corrupted, then the database can be opened by specifying a database event listener. The exceptions are logged, but opening the database will continue.
features_1556_h2=Computed Columns / Function Based Index
features_1557_p=Function indexes are not directly supported by this database, but they can be emulated by using computed columns. For example, if an index on the upper-case version of a column is required, create a computed column with the upper-case version of the original column, and create an index for this column\:
features_1558_p=When inserting data, it is not required (and not allowed) to specify a value for the upper-case version of the column, because the value is generated. But you can use the column when querying the table\:
features_1559_h2=Multi-Dimensional Indexes
features_1560_p=A tool is provided to execute efficient multi-dimension (spatial) range queries. This database does not support a specialized spatial index (R-Tree or similar). Instead, the B-Tree index is used. For each record, the multi-dimensional key is converted (mapped) to a single dimensional (scalar) value. This value specifies the location on a space-filling curve.
features_1561_p=Currently, Z-order (also called N-order or Morton-order) is used; Hilbert curve could also be used, but the implementation is more complex. The algorithm to convert the multi-dimensional value is called bit-interleaving. The scalar value is indexed using a B-Tree index (usually using a computed column).
features_1562_p=The method can result in a drastic performance improvement over just using an index on the first column. Depending on the data and number of dimensions, the improvement is usually higher than factor 5. The tool generates a SQL query from a specified multi-dimensional range. The method used is not database dependent, and the tool can easily be ported to other databases. For an example how to use the tool, please have a look at the sample code provided in TestMultiDimension.java.
features_1563_h2=Using Passwords
features_1564_h3=Using Secure Passwords
features_1565_p=Remember that weak passwords can be broken no matter of the encryption and security protocol. Don't use passwords that can be found in a dictionary. Also appending numbers does not make them secure. A way to create good passwords that can be remembered is, take the first letters of a sentence, use upper and lower case characters, and creatively include special characters. Example\:
features_1566_p=i'sE2rtPiUKtT (it's easy to remember this password if you know the trick)
features_1567_h3=Passwords\: Using Char Arrays instead of Strings
features_1568_p=Java Strings are immutable objects and cannot be safely 'destroyed' by the application. After creating a String, it will remain in the main memory of the computer at least until it is garbage collected. The garbage collection cannot be controlled by the application, and even if it is garbage collected the data may still remain in memory. It might also be possible that the part of memory containing the password is swapped to disk (because not enough main memory is available).
features_1569_p=An attacker might have access to the swap file of the operating system. It is therefore a good idea to use char arrays instead of Strings to store passwords. Char arrays can be cleared (filled with zeros) after use, and therefore the password will not be stored in the swap file.
features_1570_p=This database supports using char arrays instead of String to pass user and file passwords. The following code can be used to do that\:
features_1571_p=This example requires Java 1.6. When using Swing, use javax.swing.JPasswordField.
features_1572_h3=Passing the User Name and/or Password in the URL
features_1573_p=Instead of passing the user name as a separate parameter as in <code>Connection conn \= DriverManager.  getConnection("jdbc\:h2\:~/test", "sa", "123");</code> the user name (and/or password) can be supplied in the URL itself\: <code>Connection conn \= DriverManager.  getConnection("jdbc\:h2\:~/test;USER\=sa;PASSWORD\=123");</code> The settings in the URL override the settings passed as a separate parameter.
features_1574_h2=User-Defined Functions and Stored Procedures
features_1575_p=In addition to the built-in functions, this database supports user-defined Java functions. In this database, Java functions can be used as stored procedures as well. A function must be declared (registered) before it can be used. Only static Java methods are supported; both the class and the method must be public. Example Java method\:
features_1576_p=The Java function must be registered in the database by calling CREATE ALIAS\:
features_1577_p=For a complete sample application, see src/test/org/h2/samples/Function.java.
features_1578_h3=Function Data Type Mapping
features_1579_p=Functions that accept non-nullable parameters such as 'int' will not be called if one of those parameters is NULL. Instead, the result of the function is NULL. If the function should be called if a parameter is NULL, you need to use 'java.lang.Integer' instead of 'int'.
features_1580_h3=Functions that require a Connection
features_1581_p=If the first parameter of a Java function is a java.sql.Connection, then the connection to database is provided. This connection does not need to be closed before returning. When calling the method from within the SQL statement, this connection parameter does not need to be (can not be) specified.
features_1582_h3=Functions throwing an Exception
features_1583_p=If a function throws an Exception, then the current statement is rolled back and the exception is thrown to the application.
features_1584_h3=Functions returning a Result Set
features_1585_p=Functions may returns a result set. Such a function can be called with the CALL statement\:
features_1586_h3=Using SimpleResultSet
features_1587_p=A function can create a result set using the SimpleResultSet tool\:
features_1588_h3=Using a Function as a Table
features_1589_p=A function that returns a result set can be used like a table. However, in this case the function is called at least twice\: First while parsing the statement to collect the column names (with parameters set to null where not known at compile time). And then, while executing the statement to get the data (maybe multiple times if this is a join). If the function is called just to get the column list, the URL of the connection passed to the function is <code>jdbc\:columnlist\:connection</code> . Otherwise, the URL of the connection is <code>jdbc\:default\:connection</code> .
features_1590_h2=Triggers
features_1591_p=This database supports Java triggers that are called before or after a row is updated, inserted or deleted. Triggers can be used for complex consistency checks, or to update related data in the database. It is also possible to use triggers to simulate materialized views. For a complete sample application, see src/test/org/h2/samples/TriggerSample.java. A Java trigger must implement the interface org.h2.api.Trigger\:
features_1592_p=The connection can be used to query or update data in other tables. The trigger then needs to be defined in the database\:
features_1593_p=The trigger can be used to veto a change, by throwing a SQLException.
features_1594_h2=Compacting a Database
features_1595_p=Empty space in the database file is re-used automatically. To re-build the indexes, the simplest way is to delete the .index.db file while the database is closed. However in some situations (for example after deleting a lot of data in a database), one sometimes wants to shrink the size of the database (compact a database). Here is a sample function to do this\:
features_1596_p=See also the sample application org.h2.samples.Compact. The commands SCRIPT / RUNSCRIPT can be used as well to create a backup of a database and re-build the database from the script.
features_1597_h2=Cache Settings
features_1598_p=The database keeps most frequently used data and index pages in the main memory. The amount of memory used for caching can be changed using the setting CACHE_SIZE. This setting can be set in the database connection URL (jdbc\:h2\:~/test;CACHE_SIZE\=131072), or it can be changed at runtime using SET CACHE_SIZE size.
features_1599_p=This database supports two cache page replacement algorithms\: LRU (the default) and TQ. For LRU, the pages that were least frequently used are removed from the cache if it becomes full. The TQ (Two Queue, also called 2Q) algorithm is a bit more complicated\: basically two queues are used. It is more resistant to table scans, however the overhead is a bit higher compared to the LRU. To use the cache algorithm TQ, use a database URL of the form jdbc\:h2\:~/test;CACHE_TYPE\=TQ. The cache algorithm cannot be changed once the database is open.
features_1600_p=Also supported is a second level soft reference cache. Rows in this cache are only garbage collected on low memory. By default the second level cache is disabled. To enable it, use the prefix SOFT_. Example\: jdbc\:h2\:~/test;CACHE_TYPE\=SOFT_LRU .
features_1601_p=To get information about page reads and writes, and the current caching algorithm in use, call SELECT * FROM INFORMATION_SCHEMA.SETTINGS. The number of pages read / written is listed for the data and index file.
fragments_1000_b=Search\:
fragments_1001_td=Highlight keyword(s)
fragments_1002_a=Home
fragments_1003_a=Quickstart
fragments_1004_a=Installation
fragments_1005_a=Tutorial
fragments_1006_a=Features
fragments_1007_a=Performance
fragments_1008_a=Advanced Topics
fragments_1009_a=JaQu
fragments_1010_a=Download
fragments_1011_b=Reference
fragments_1012_a=SQL Grammar
fragments_1013_a=Functions
fragments_1014_a=Data Types
fragments_1015_a=Javadoc
fragments_1016_a=Docs as PDF (1 MB)
fragments_1017_a=Error Analyzer
fragments_1018_b=Appendix
fragments_1019_a=Build
fragments_1020_a=History &amp; Roadmap
fragments_1021_a=Links
fragments_1022_a=FAQ
fragments_1023_a=License
fragments_1024_td=&nbsp;
frame_1000_h1=H2 Database Engine
frame_1001_p=Welcome to H2, the free SQL database. The main feature of H2 are\:
frame_1002_li=It is free to use for everybody, source code is included
frame_1003_li=Written in Java, but also available as native executable
frame_1004_li=JDBC and (partial) ODBC API
frame_1005_li=Embedded and client/server modes
frame_1006_li=Clustering is supported
frame_1007_li=A web client is included
frame_1008_h2=No Javascript
frame_1009_p=If you are not automatically redirected to the main page, then Javascript is currently disabled or your browser does not support Javascript. Some features (for example the integrated search) require Javascript.
frame_1010_p=Please enable Javascript, or go ahead without it\: <a href\="main.html" style\="font-size\: 16px; font-weight\: bold">H2 Database Engine</a>
history_1000_h1=History and Roadmap
history_1001_a=Change Log
history_1002_a=Roadmap
history_1003_a=History of this Database Engine
history_1004_a=Why Java
history_1005_a=Supporters
history_1006_h2=Change Log
history_1007_p=The up-to-date change log is available at <a href\="http\://www.h2database.com/html/changelog.html">http\://www.h2database.com/html/changelog.html</a>
history_1008_h2=Roadmap
history_1009_p=The current roadmap is available at <a href\="http\://www.h2database.com/html/roadmap.html">http\://www.h2database.com/html/roadmap.html</a>
history_1010_h2=History of this Database Engine
history_1011_p=The development of H2 was started in May 2004, but it was first published on December 14th 2005. The main author of H2, Thomas Mueller, is also the original developer of Hypersonic SQL. In 2001, he joined PointBase Inc. where he created PointBase Micro. At that point, he had to discontinue Hypersonic SQL, but then the HSQLDB Group was formed to continued to work on the Hypersonic SQL codebase. The name H2 stands for Hypersonic 2; however H2 does not share any code with Hypersonic SQL or HSQLDB. H2 is built from scratch.
history_1012_h2=Why Java
history_1013_p=A few reasons using a Java database are\:
history_1014_li=Very simple to integrate in Java applications
history_1015_li=Support for many different platforms
history_1016_li=More secure than native applications (no buffer overflows)
history_1017_li=User defined functions (or triggers) run very fast
history_1018_li=Unicode support
history_1019_p=Some people think that Java is still too slow for low level operations, but this is not the case (not any more). In general, the code can be written a lot faster than using C or C++. Like that, it is possible to concentrate on improving the algorithms (that make the application faster) rather than porting the code and dealing with low level stuff (such as memory management or dealing with threads). Garbage collection is now probably faster than manual memory management.
history_1020_p=A lot of features are already built in (for example Unicode, network libraries). It is very easy to write secure code because buffer overflows can not occur. Some features such as the reflection mechanism can be used for randomized testing.
history_1021_p=Java is also future proof\: A lot of companies support Java, and it is now open source.
history_1022_p=This software does not rely on many Java libraries or other software, to increase the portability and ease of use, and for performance reasons. For example, the encryption algorithms and many library functions are implemented in the database instead of using the existing libraries. Libraries that are not available in open source Java implementations (such as Swing) are not used or only used for specific features.
history_1023_h2=Supporters
history_1024_p=Many thanks for those who helped by finding and reporting bugs, gave valuable feedback, spread the word and have translated this project. Also many thanks to the donors who contributed via PayPal\:
history_1025_a=SkyCash, Poland
history_1026_li=Donald Bleyl, USA
history_1027_li=lumber-mill.co.jp, Japan
history_1028_li=Frank Berger, Germany
history_1029_li=Ashwin Jayaprakash, USA
history_1030_li=Florent Ramiere, France
history_1031_li=Jun Iyama, Japan
history_1032_li=Antonio Casqueiro, Portugal
history_1033_li=Oliver Computing LLC, USA
history_1034_li=Harpal Grover Consulting Inc., USA
history_1035_li=Elisabetta Berlini, Italy
history_1036_li=William Gilbert, USA
history_1037_li=Antonio Dieguez, Chile
history_1038_a=Ontology Works, USA
history_1039_li=Pete Haidinyak, USA
history_1040_li=William Osmond, USA
history_1041_li=Joachim Ansorg, Germany
history_1042_li=Oliver Soerensen, Germany
installation_1000_h1=Installation
installation_1001_a=Requirements
installation_1002_a=Supported Platforms
installation_1003_a=Installing the Software
installation_1004_a=Directory Structure
installation_1005_h2=Requirements
installation_1006_p=To run the database, the following minimum software stack is known to work\:
installation_1007_li=Windows XP, Mac OS X, or Linux
installation_1008_li=Recommended Windows file system\: NTFS (FAT32 supports files up to 4 GB)
installation_1009_li=Sun JDK 1.4 or newer
installation_1010_li=Mozilla Firefox 1.5 or newer
installation_1011_h2=Supported Platforms
installation_1012_p=As this database is written in Java, it can run on many different platforms. It is tested with Java 1.4, 1.5, and 1.6 but can also be compiled to native code using GCJ. The source code does not use features of Java 1.5. Currently, the database is developed and tested on Windows XP and Mac OS X using the Sun JDK 1.5, but it also works in many other operating systems and using other Java runtime environments.
installation_1013_h2=Installing the Software
installation_1014_p=To install the software, run the installer or unzip it to a directory of your choice.
installation_1015_h2=Directory Structure
installation_1016_p=After installing, you should get the following directory structure\:
installation_1017_th=Directory
installation_1018_th=Contents
installation_1019_td=bin
installation_1020_td=JAR and batch files
installation_1021_td=docs
installation_1022_td=Documentation
installation_1023_td=docs/html
installation_1024_td=HTML pages
installation_1025_td=docs/javadoc
installation_1026_td=Javadoc files
installation_1027_td=ext
installation_1028_td=External dependencies (downloaded when building)
installation_1029_td=service
installation_1030_td=Tools to run the database as a Windows Service
installation_1031_td=src
installation_1032_td=Source files
jaqu_1000_h1=JaQu
jaqu_1001_h2=What is JaQu
jaqu_1002_p=JaQu stands for Java Query and allows to access databases using pure Java. JaQu provides a fluent interface (or internal DSL) for building SQL statements. JaQu replaces SQL, JDBC, and persistence frameworks such as Hibernate. JaQu is something like LINQ for Java (LINQ stands for "language integrated query" and is a Microsoft .NET technology). The following JaQu code\:
jaqu_1003_p=stands for the SQL statement\:
jaqu_1004_h2=Advantages and Differences to Other Data Access Tools
jaqu_1005_p=Unlike SQL, JaQu can be easily integrated in Java applications. Because JaQu is pure Java, auto-complete in the IDE and Javadoc and are supported. Type checking is performed by the compiler. JaQu fully protects against SQL injection.
jaqu_1006_p=JaQu is much smaller than persistence frameworks such as Hibernate. Unlike iBatis and Hibernate, no XML or annotation based configuration is required; instead the configuration (if required at all) is done in pure Java, in the application itself.
jaqu_1007_p=JaQu does not require or contain any data caching mechanism. Like JDBC and iBatis, JaQu provides full control over when and what SQL statements are executed.
jaqu_1008_h3=Restrictions
jaqu_1009_p=Primitive types (eg. boolean, int, long, double) are not supported. Use Boolean, Integer, Long, and Double instead.
jaqu_1010_h3=Why in Java?
jaqu_1011_p=Most people use Java in their application. Mixing Java and another language (for example Scala or Groovy) in the same application is complicated\: You would need to split the application and database code.
jaqu_1012_h2=Current State
jaqu_1013_p=JaQu is not yet stable, and not part of the h2 jar file. However the source code is included in H2, under\:
jaqu_1014_li=src/test/org/h2/test/jaqu/* (samples and tests)
jaqu_1015_li=src/tools/org/h2/jaqu/* (framework)
jaqu_1016_h2=Building the JaQu library
jaqu_1017_p=To create the JaQu jar file, run\: <code>build jarJaqu</code> . This will create the file <code>bin/h2jaqu.jar</code> .
jaqu_1018_h2=Requirements
jaqu_1019_p=JaQu requires Java 1.5. Annotations are not need. Currently, JaQu is only tested with the H2 database engine, however in theory it should work with any database that supports the JDBC API.
jaqu_1020_h2=Example Code
jaqu_1021_h2=Configuration
jaqu_1022_p=JaQu does not require any configuration when using the default mapping. To define table indices, or if you want to map a class to a table with a different name, or a field to a column with another name, create a function called 'define' in the data class. Example\:
jaqu_1023_p=The method 'define()' contains the mapping definition. It is called once when the class is used for the first time. Like annotations, the mapping is defined in the class itself. Unlike when using annotations, the compiler can check the syntax even for multi-column objects (multi-column indexes, multi-column primary keys and so on). Because the definition is written in regular Java, the configuration can depend on the environment. This is not possible using annotations. Unlike XML mapping configuration, the configuration is integrated in the class itself.
jaqu_1024_h2=Ideas
jaqu_1025_p=This project has just been started, and nothing is fixed yet. Some ideas for what to implement are\:
jaqu_1026_li=Support queries on collections (instead of using a database).
jaqu_1027_li=Provide API level compatibility with JPA (so that JaQu can be used as an extension of JPA).
jaqu_1028_li=Internally use a JPA implementation (for example Hibernate) instead of SQL directly.
jaqu_1029_li=Use PreparedStatements and cache them.
jaqu_1030_h2=Related Projects
jaqu_1031_a=Dreamsource ORM
jaqu_1032_a=Empire-db
jaqu_1033_a=JEQUEL\: Java Embedded QUEry Language
jaqu_1034_a=Joist
jaqu_1035_a=JoSQL
jaqu_1036_a=LIQUidFORM
jaqu_1037_a=Quaere (Alias implementation)
jaqu_1038_a=Quaere
jaqu_1039_a=Querydsl
jaqu_1040_a=Squill
license_1000_h1=License
license_1001_h2=Summary and License FAQ
license_1002_p=H2 is dual licensed and available under a modified version of the MPL 1.1 ( <a href\="http\://www.mozilla.org/MPL">Mozilla Public License</a> ) or under the (unmodified) EPL 1.0 ( <a href\="http\://opensource.org/licenses/eclipse-1.0.php">Eclipse Public License</a> ). The changes to the MPL are
license_1003_em=underlined</em> . There is a License FAQ for both the MPL and the EPL, most of that is applicable to the H2 License as well.
license_1004_li=You can use H2 for free. You can integrate it into your application (including commercial applications),  and you can distribute it.
license_1005_li=Files containing only your code are not covered by this license (it is 'commercial friendly').
license_1006_li=Modifications to the H2 source code must be published.
license_1007_li=You don't need to provide the source code of H2 if you did not modify anything.
license_1008_p=However, nobody is allowed to rename H2, modify it a little, and sell it as a database engine without telling the customers it is in fact H2. This happened to HSQLDB\: A company called 'bungisoft' copied HSQLDB, renamed it to 'RedBase', and tried to sell it, hiding the fact that it was in fact just HSQLDB. It seems 'bungisoft' does not exist any more, but you can use the Wayback Machine of http\://www.archive.org and visit old web pages of http\://www.bungisoft.com .
license_1009_p=About porting the source code to another language (for example C\# or C++)\: Converted source code (even if done manually) stays under the same copyright and license as the original code. The copyright of the ported source code does not (automatically) go to the person who ported the code.
license_1010_h2=H2 License, Version 1.0
license_1011_h3=1. Definitions
license_1012_b=1.0.1. "Commercial Use"
license_1013_p=means distribution or otherwise making the Covered Code available to a third party.
license_1014_b=1.1. "Contributor"
license_1015_p=means each entity that creates or contributes to the creation of Modifications.
license_1016_b=1.2. "Contributor Version"
license_1017_p=means the combination of the Original Code, prior Modifications used by a Contributor, and the Modifications made by that particular Contributor.
license_1018_b=1.3. "Covered Code"
license_1019_p=means the Original Code or Modifications or the combination of the Original Code and Modifications, in each case including portions thereof.
license_1020_b=1.4. "Electronic Distribution Mechanism"
license_1021_p=means a mechanism generally accepted in the software development community for the electronic transfer of data.
license_1022_b=1.5. "Executable"
license_1023_p=means Covered Code in any form other than Source Code.
license_1024_b=1.6. "Initial Developer"
license_1025_p=means the individual or entity identified as the Initial Developer in the Source Code notice required by <a href\="\#exhibit-a">Exhibit A</a> .
license_1026_b=1.7. "Larger Work"
license_1027_p=means a work which combines Covered Code or portions thereof with code not governed by the terms of this License.
license_1028_b=1.8. "License"
license_1029_p=means this document.
license_1030_b=1.8.1. "Licensable"
license_1031_p=means having the right to grant, to the maximum extent possible, whether at the time of the initial grant or subsequently acquired, any and all of the rights conveyed herein.
license_1032_b=1.9. "Modifications"
license_1033_p=means any addition to or deletion from the substance or structure of either the Original Code or any previous Modifications. When Covered Code is released as a series of files, a Modification is\:
license_1034_p=1.9.a. Any addition to or deletion from the contents of a file containing Original Code or previous Modifications.
license_1035_p=1.9.b. Any new file that contains any part of the Original Code or previous Modifications.
license_1036_b=1.10. "Original Code"
license_1037_p=means Source Code of computer software code which is described in the Source Code notice required by <a href\="\#exhibit-a">Exhibit A</a> as Original Code, and which, at the time of its release under this License is not already Covered Code governed by this License.
license_1038_b=1.10.1. "Patent Claims"
license_1039_p=means any patent claim(s), now owned or hereafter acquired, including without limitation, method, process, and apparatus claims, in any patent Licensable by grantor.
license_1040_b=1.11. "Source Code"
license_1041_p=means the preferred form of the Covered Code for making modifications to it, including all modules it contains, plus any associated interface definition files, scripts used to control compilation and installation of an Executable, or source code differential comparisons against either the Original Code or another well known, available Covered Code of the Contributor's choice. The Source Code can be in a compressed or archival form, provided the appropriate decompression or de-archiving software is widely available for no charge.
license_1042_b=1.12. "You" (or "Your")
license_1043_p=means an individual or a legal entity exercising rights under, and complying with all of the terms of, this License or a future version of this License issued under <a href\="\#section-6.1">Section 6.1.</a> For legal entities, "You" includes any entity which controls, is controlled by, or is under common control with You. For purposes of this definition, "control" means (a) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (b) ownership of more than fifty percent (50%) of the outstanding shares or beneficial ownership of such entity.
license_1044_h3=2. Source Code License
license_1045_h4=2.1. The Initial Developer Grant
license_1046_p=The Initial Developer hereby grants You a world-wide, royalty-free, non-exclusive license, subject to third party intellectual property claims\:
license_1047_p=2.1.a. under intellectual property rights (other than patent or trademark) Licensable by Initial Developer to use, reproduce, modify, display, perform, sublicense and distribute the Original Code (or portions thereof) with or without Modifications, and/or as part of a Larger Work; and
license_1048_p=2.1.b. under Patents Claims infringed by the making, using or selling of Original Code, to make, have made, use, practice, sell, and offer for sale, and/or otherwise dispose of the Original Code (or portions thereof).
license_1049_p=2.1.c. the licenses granted in this Section 2.1 ( <a href\="\#section-2.1-a">a</a> ) and ( <a href\="\#section-2.1-b">b</a> ) are effective on the date Initial Developer first distributes Original Code under the terms of this License.
license_1050_p=2.1.d. Notwithstanding Section 2.1 ( <a href\="\#section-2.1-b">b</a> ) above, no patent license is granted\: 1) for code that You delete from the Original Code; 2) separate from the Original Code; or 3) for infringements caused by\: i) the modification of the Original Code or ii) the combination of the Original Code with other software or devices.
license_1051_h4=2.2. Contributor Grant
license_1052_p=Subject to third party intellectual property claims, each Contributor hereby grants You a world-wide, royalty-free, non-exclusive license
license_1053_p=2.2.a. under intellectual property rights (other than patent or trademark) Licensable by Contributor, to use, reproduce, modify, display, perform, sublicense and distribute the Modifications created by such Contributor (or portions thereof) either on an unmodified basis, with other Modifications, as Covered Code and/or as part of a Larger Work; and
license_1054_p=2.2.b. under Patent Claims infringed by the making, using, or selling of Modifications made by that Contributor either alone and/or in combination with its Contributor Version (or portions of such combination), to make, use, sell, offer for sale, have made, and/or otherwise dispose of\: 1) Modifications made by that Contributor (or portions thereof); and 2) the combination of Modifications made by that Contributor with its Contributor Version (or portions of such combination).
license_1055_p=2.2.c. the licenses granted in Sections 2.2 ( <a href\="\#section-2.2-a">a</a> ) and 2.2 ( <a href\="\#section-2.2-b">b</a> ) are effective on the date Contributor first makes Commercial Use of the Covered Code.
license_1056_p=2.2.c. Notwithstanding Section 2.2 ( <a href\="\#section-2.2-b">b</a> ) above, no patent license is granted\: 1) for any code that Contributor has deleted from the Contributor Version; 2) separate from the Contributor Version; 3) for infringements caused by\: i) third party modifications of Contributor Version or ii) the combination of Modifications made by that Contributor with other software (except as part of the Contributor Version) or other devices; or 4) under Patent Claims infringed by Covered Code in the absence of Modifications made by that Contributor.
license_1057_h3=3. Distribution Obligations
license_1058_h4=3.1. Application of License
license_1059_p=The Modifications which You create or to which You contribute are governed by the terms of this License, including without limitation Section <a href\="\#section-2.2">2.2</a> . The Source Code version of Covered Code may be distributed only under the terms of this License or a future version of this License released under Section <a href\="\#section-6.1">6.1</a> , and You must include a copy of this License with every copy of the Source Code You distribute. You may not offer or impose any terms on any Source Code version that alters or restricts the applicable version of this License or the recipients' rights hereunder. However, You may include an additional document offering the additional rights described in Section <a href\="\#section-3.5">3.5</a> .
license_1060_h4=3.2. Availability of Source Code
license_1061_p=Any Modification which You create or to which You contribute must be made available in Source Code form under the terms of this License either on the same media as an Executable version or via an accepted Electronic Distribution Mechanism to anyone to whom you made an Executable version available; and if made available via Electronic Distribution Mechanism, must remain available for at least twelve (12) months after the date it initially became available, or at least six (6) months after a subsequent version of that particular Modification has been made available to such recipients. You are responsible for ensuring that the Source Code version remains available even if the Electronic Distribution Mechanism is maintained by a third party.
license_1062_h4=3.3. Description of Modifications
license_1063_p=You must cause all Covered Code to which You contribute to contain a file documenting the changes You made to create that Covered Code and the date of any change. You must include a prominent statement that the Modification is derived, directly or indirectly, from Original Code provided by the Initial Developer and including the name of the Initial Developer in (a) the Source Code, and (b) in any notice in an Executable version or related documentation in which You describe the origin or ownership of the Covered Code.
license_1064_h4=3.4. Intellectual Property Matters
license_1065_b=3.4.a. Third Party Claims\:
license_1066_p=If Contributor has knowledge that a license under a third party's intellectual property rights is required to exercise the rights granted by such Contributor under Sections <a href\="\#section-2.1">2.1</a> or <a href\="\#section-2.2">2.2</a> , Contributor must include a text file with the Source Code distribution titled "LEGAL" which describes the claim and the party making the claim in sufficient detail that a recipient will know whom to contact. If Contributor obtains such knowledge after the Modification is made available as described in Section <a href\="\#section-3.2">3.2</a> , Contributor shall promptly modify the LEGAL file in all copies Contributor makes available thereafter and shall take other steps (such as notifying appropriate mailing lists or newsgroups) reasonably calculated to inform those who received the Covered Code that new knowledge has been obtained.
license_1067_b=3.4.b. Contributor APIs\:
license_1068_p=If Contributor's Modifications include an application programming interface and Contributor has knowledge of patent licenses which are reasonably necessary to implement that API, Contributor must also include this information in the legal file.
license_1069_b=3.4.c. Representations\:
license_1070_p=Contributor represents that, except as disclosed pursuant to Section 3.4 ( <a href\="\#section-3.4-a">a</a> ) above, Contributor believes that Contributor's Modifications are Contributor's original creation(s) and/or Contributor has sufficient rights to grant the rights conveyed by this License.
license_1071_h4=3.5. Required Notices
license_1072_p=You must duplicate the notice in <a href\="\#exhibit-a">Exhibit A</a> in each file of the Source Code. If it is not possible to put such notice in a particular Source Code file due to its structure, then You must include such notice in a location (such as a relevant directory) where a user would be likely to look for such a notice. If You created one or more Modification(s) You may add your name as a Contributor to the notice described in <a href\="\#exhibit-a">Exhibit A</a> . You must also duplicate this License in any documentation for the Source Code where You describe recipients' rights or ownership rights relating to Covered Code. You may choose to offer, and to charge a fee for, warranty, support, indemnity or liability obligations to one or more recipients of Covered Code. However, You may do so only on Your own behalf, and not on behalf of the Initial Developer or any Contributor. You must make it absolutely clear than any such warranty, support, indemnity or liability obligation is offered by You alone, and You hereby agree to indemnify the Initial Developer and every Contributor for any liability incurred by the Initial Developer or such Contributor as a result of warranty, support, indemnity or liability terms You offer.
license_1073_h4=3.6. Distribution of Executable Versions
license_1074_p=You may distribute Covered Code in Executable form only if the requirements of Sections <a href\="\#section-3.1">3.1</a> , <a href\="\#section-3.2">3.2</a> , <a href\="\#section-3.3">3.3</a> , <a href\="\#section-3.4">3.4</a> and <a href\="\#section-3.5">3.5</a> have been met for that Covered Code, and if You include a notice stating that the Source Code version of the Covered Code is available under the terms of this License, including a description of how and where You have fulfilled the obligations of Section <a href\="\#section-3.2">3.2</a> . The notice must be conspicuously included in any notice in an Executable version, related documentation or collateral in which You describe recipients' rights relating to the Covered Code. You may distribute the Executable version of Covered Code or ownership rights under a license of Your choice, which may contain terms different from this License, provided that You are in compliance with the terms of this License and that the license for the Executable version does not attempt to limit or alter the recipient's rights in the Source Code version from the rights set forth in this License. If You distribute the Executable version under a different license You must make it absolutely clear that any terms which differ from this License are offered by You alone, not by the Initial Developer or any Contributor. You hereby agree to indemnify the Initial Developer and every Contributor for any liability incurred by the Initial Developer or such Contributor as a result of any such terms You offer.
license_1075_h4=3.7. Larger Works
license_1076_p=You may create a Larger Work by combining Covered Code with other code not governed by the terms of this License and distribute the Larger Work as a single product. In such a case, You must make sure the requirements of this License are fulfilled for the Covered Code.
license_1077_h3=4. Inability to Comply Due to Statute or Regulation.
license_1078_p=If it is impossible for You to comply with any of the terms of this License with respect to some or all of the Covered Code due to statute, judicial order, or regulation then You must\: (a) comply with the terms of this License to the maximum extent possible; and (b) describe the limitations and the code they affect. Such description must be included in the <b>legal</b> file described in Section <a href\="\#section-3.4">3.4</a> and must be included with all distributions of the Source Code. Except to the extent prohibited by statute or regulation, such description must be sufficiently detailed for a recipient of ordinary skill to be able to understand it.
license_1079_h3=5. Application of this License.
license_1080_p=This License applies to code to which the Initial Developer has attached the notice in <a href\="\#exhibit-a">Exhibit A</a> and to related Covered Code.
license_1081_h3=6. Versions of the License.
license_1082_h4=6.1. New Versions
license_1083_p=The
license_1084_em=H2 Group</em> may publish revised and/or new versions of the License from time to time. Each version will be given a distinguishing version number.
license_1085_h4=6.2. Effect of New Versions
license_1086_p=Once Covered Code has been published under a particular version of the License, You may always continue to use it under the terms of that version. You may also choose to use such Covered Code under the terms of any subsequent version of the License published by the
license_1087_em=H2 Group</em> . No one other than the
license_1088_em=H2 Group</em> has the right to modify the terms applicable to Covered Code created under this License.
license_1089_h4=6.3. Derivative Works
license_1090_p=If You create or use a modified version of this License (which you may only do in order to apply it to code which is not already Covered Code governed by this License), You must (a) rename Your license so that the phrases
license_1091_em="H2 Group", "H2"</em> or any confusingly similar phrase do not appear in your license (except to note that your license differs from this License) and (b) otherwise make it clear that Your version of the license contains terms which differ from the
license_1092_em=H2 License</em> . (Filling in the name of the Initial Developer, Original Code or Contributor in the notice described in <a href\="\#exhibit-a">Exhibit A</a> shall not of themselves be deemed to be modifications of this License.)
license_1093_h3=7. Disclaimer of Warranty
license_1094_p=Covered code is provided under this license on an "as is" basis, without warranty of any kind, either expressed or implied, including, without limitation, warranties that the covered code is free of defects, merchantable, fit for a particular purpose or non-infringing. The entire risk as to the quality and performance of the covered code is with you. Should any covered code prove defective in any respect, you (not the initial developer or any other contributor) assume the cost of any necessary servicing, repair or correction. This disclaimer of warranty constitutes an essential part of this license. No use of any covered code is authorized hereunder except under this disclaimer.
license_1095_h3=8. Termination
license_1096_p=8.1. This License and the rights granted hereunder will terminate automatically if You fail to comply with terms herein and fail to cure such breach within 30 days of becoming aware of the breach. All sublicenses to the Covered Code which are properly granted shall survive any termination of this License. Provisions which, by their nature, must remain in effect beyond the termination of this License shall survive.
license_1097_p=8.2. If You initiate litigation by asserting a patent infringement claim (excluding declaratory judgment actions) against Initial Developer or a Contributor (the Initial Developer or Contributor against whom You file such action is referred to as "Participant") alleging that\:
license_1098_p=8.2.a. such Participant's Contributor Version directly or indirectly infringes any patent, then any and all rights granted by such Participant to You under Sections <a href\="\#section-2.1">2.1</a> and/or <a href\="\#section-2.2">2.2</a> of this License shall, upon 60 days notice from Participant terminate prospectively, unless if within 60 days after receipt of notice You either\: (i) agree in writing to pay Participant a mutually agreeable reasonable royalty for Your past and future use of Modifications made by such Participant, or (ii) withdraw Your litigation claim with respect to the Contributor Version against such Participant. If within 60 days of notice, a reasonable royalty and payment arrangement are not mutually agreed upon in writing by the parties or the litigation claim is not withdrawn, the rights granted by Participant to You under Sections <a href\="\#section-2.1">2.1</a> and/or <a href\="\#section-2.2">2.2</a> automatically terminate at the expiration of the 60 day notice period specified above.
license_1099_p=8.2.b. any software, hardware, or device, other than such Participant's Contributor Version, directly or indirectly infringes any patent, then any rights granted to You by such Participant under Sections 2.1( <a href\="\#section-2.1-b">b</a> ) and 2.2( <a href\="\#section-2.2-b">b</a> ) are revoked effective as of the date You first made, used, sold, distributed, or had made, Modifications made by that Participant.
license_1100_p=8.3. If You assert a patent infringement claim against Participant alleging that such Participant's Contributor Version directly or indirectly infringes any patent where such claim is resolved (such as by license or settlement) prior to the initiation of patent infringement litigation, then the reasonable value of the licenses granted by such Participant under Sections <a href\="\#section-2.1">2.1</a> or <a href\="\#section-2.2">2.2</a> shall be taken into account in determining the amount or value of any payment or license.
license_1101_p=8.4. In the event of termination under Sections <a href\="\#section-8.1">8.1</a> or <a href\="\#section-8.2">8.2</a> above, all end user license agreements (excluding distributors and resellers) which have been validly granted by You or any distributor hereunder prior to termination shall survive termination.
license_1102_h3=9. Limitation of Liability
license_1103_p=Under no circumstances and under no legal theory, whether tort (including negligence), contract, or otherwise, shall you, the initial developer, any other contributor, or any distributor of covered code, or any supplier of any of such parties, be liable to any person for any indirect, special, incidental, or consequential damages of any character including, without limitation, damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses, even if such party shall have been informed of the possibility of such damages. This limitation of liability shall not apply to liability for death or personal injury resulting from such party's negligence to the extent applicable law prohibits such limitation. Some jurisdictions do not allow the exclusion or limitation of incidental or consequential damages, so this exclusion and limitation may not apply to you.
license_1104_h3=10. United States Government End Users
license_1105_p=The Covered Code is a "commercial item", as that term is defined in 48 C.F.R. 2.101 (October 1995), consisting of "commercial computer software" and "commercial computer software documentation", as such terms are used in 48 C.F.R. 12.212 (September 1995). Consistent with 48 C.F.R. 12.212 and 48 C.F.R. 227.7202-1 through 227.7202-4 (June 1995), all U.S. Government End Users acquire Covered Code with only those rights set forth herein.
license_1106_h3=11. Miscellaneous
license_1107_p=This License represents the complete agreement concerning subject matter hereof. If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable. This License shall be governed by California law provisions (except to the extent applicable law, if any, provides otherwise), excluding its conflict-of-law provisions. With respect to disputes in which at least one party is a citizen of, or an entity chartered or registered to do business in United States of America, any litigation relating to this License shall be subject to the jurisdiction of the Federal Courts of the Northern District of California, with venue lying in Santa Clara County, California, with the losing party responsible for costs, including without limitation, court costs and reasonable attorneys' fees and expenses. The application of the United Nations Convention on Contracts for the International Sale of Goods is expressly excluded. Any law or regulation which provides that the language of a contract shall be construed against the drafter shall not apply to this License.
license_1108_h3=12. Responsibility for Claims
license_1109_p=As between Initial Developer and the Contributors, each party is responsible for claims and damages arising, directly or indirectly, out of its utilization of rights under this License and You agree to work with Initial Developer and Contributors to distribute such responsibility on an equitable basis. Nothing herein is intended or shall be deemed to constitute any admission of liability.
license_1110_h3=13. Multiple-Licensed Code
license_1111_p=Initial Developer may designate portions of the Covered Code as "Multiple-Licensed". "Multiple-Licensed" means that the Initial Developer permits you to utilize portions of the Covered Code under Your choice of this or the alternative licenses, if any, specified by the Initial Developer in the file described in <a href\="\#exhibit-a">Exhibit A</a> .
license_1112_h3=Exhibit A
license_1113_h2=Eclipse Public License - Version 1.0
license_1114_p=THE ACCOMPANYING PROGRAM IS PROVIDED UNDER THE TERMS OF THIS ECLIPSE PUBLIC LICENSE ("AGREEMENT"). ANY USE, REPRODUCTION OR DISTRIBUTION OF THE PROGRAM CONSTITUTES RECIPIENT'S ACCEPTANCE OF THIS AGREEMENT.
license_1115_h3=1. DEFINITIONS
license_1116_p="Contribution" means\:
license_1117_p=a) in the case of the initial Contributor, the initial code and documentation distributed under this Agreement, and
license_1118_p=b) in the case of each subsequent Contributor\:
license_1119_p=i) changes to the Program, and
license_1120_p=ii) additions to the Program;
license_1121_p=where such changes and/or additions to the Program originate from and are distributed by that particular Contributor. A Contribution 'originates' from a Contributor if it was added to the Program by such Contributor itself or anyone acting on such Contributor's behalf. Contributions do not include additions to the Program which\: (i) are separate modules of software distributed in conjunction with the Program under their own license agreement, and (ii) are not derivative works of the Program.
license_1122_p="Contributor" means any person or entity that distributes the Program.
license_1123_p="Licensed Patents " mean patent claims licensable by a Contributor which are necessarily infringed by the use or sale of its Contribution alone or when combined with the Program.
license_1124_p="Program" means the Contributions distributed in accordance with this Agreement.
license_1125_p="Recipient" means anyone who receives the Program under this Agreement, including all Contributors.
license_1126_h3=2. GRANT OF RIGHTS
license_1127_p=a) Subject to the terms of this Agreement, each Contributor hereby grants Recipient a non-exclusive, worldwide, royalty-free copyright license to reproduce, prepare derivative works of, publicly display, publicly perform, distribute and sublicense the Contribution of such Contributor, if any, and such derivative works, in source code and object code form.
license_1128_p=b) Subject to the terms of this Agreement, each Contributor hereby grants Recipient a non-exclusive, worldwide, royalty-free patent license under Licensed Patents to make, use, sell, offer to sell, import and otherwise transfer the Contribution of such Contributor, if any, in source code and object code form. This patent license shall apply to the combination of the Contribution and the Program if, at the time the Contribution is added by the Contributor, such addition of the Contribution causes such combination to be covered by the Licensed Patents. The patent license shall not apply to any other combinations which include the Contribution. No hardware per se is licensed hereunder.
license_1129_p=c) Recipient understands that although each Contributor grants the licenses to its Contributions set forth herein, no assurances are provided by any Contributor that the Program does not infringe the patent or other intellectual property rights of any other entity. Each Contributor disclaims any liability to Recipient for claims brought by any other entity based on infringement of intellectual property rights or otherwise. As a condition to exercising the rights and licenses granted hereunder, each Recipient hereby assumes sole responsibility to secure any other intellectual property rights needed, if any. For example, if a third party patent license is required to allow Recipient to distribute the Program, it is Recipient's responsibility to acquire that license before distributing the Program.
license_1130_p=d) Each Contributor represents that to its knowledge it has sufficient copyright rights in its Contribution, if any, to grant the copyright license set forth in this Agreement.
license_1131_h3=3. REQUIREMENTS
license_1132_p=A Contributor may choose to distribute the Program in object code form under its own license agreement, provided that\:
license_1133_p=a) it complies with the terms and conditions of this Agreement; and
license_1134_p=b) its license agreement\:
license_1135_p=i) effectively disclaims on behalf of all Contributors all warranties and conditions, express and implied, including warranties or conditions of title and non-infringement, and implied warranties or conditions of merchantability and fitness for a particular purpose;
license_1136_p=ii) effectively excludes on behalf of all Contributors all liability for damages, including direct, indirect, special, incidental and consequential damages, such as lost profits;
license_1137_p=iii) states that any provisions which differ from this Agreement are offered by that Contributor alone and not by any other party; and
license_1138_p=iv) states that source code for the Program is available from such Contributor, and informs licensees how to obtain it in a reasonable manner on or through a medium customarily used for software exchange.
license_1139_p=When the Program is made available in source code form\:
license_1140_p=a) it must be made available under this Agreement; and
license_1141_p=b) a copy of this Agreement must be included with each copy of the Program.
license_1142_p=Contributors may not remove or alter any copyright notices contained within the Program.
license_1143_p=Each Contributor must identify itself as the originator of its Contribution, if any, in a manner that reasonably allows subsequent Recipients to identify the originator of the Contribution.
license_1144_h3=4. COMMERCIAL DISTRIBUTION
license_1145_p=Commercial distributors of software may accept certain responsibilities with respect to end users, business partners and the like. While this license is intended to facilitate the commercial use of the Program, the Contributor who includes the Program in a commercial product offering should do so in a manner which does not create potential liability for other Contributors. Therefore, if a Contributor includes the Program in a commercial product offering, such Contributor ("Commercial Contributor") hereby agrees to defend and indemnify every other Contributor ("Indemnified Contributor") against any losses, damages and costs (collectively "Losses") arising from claims, lawsuits and other legal actions brought by a third party against the Indemnified Contributor to the extent caused by the acts or omissions of such Commercial Contributor in connection with its distribution of the Program in a commercial product offering. The obligations in this section do not apply to any claims or Losses relating to any actual or alleged intellectual property infringement. In order to qualify, an Indemnified Contributor must\: a) promptly notify the Commercial Contributor in writing of such claim, and b) allow the Commercial Contributor to control, and cooperate with the Commercial Contributor in, the defense and any related settlement negotiations. The Indemnified Contributor may participate in any such claim at its own expense.
license_1146_p=For example, a Contributor might include the Program in a commercial product offering, Product X. That Contributor is then a Commercial Contributor. If that Commercial Contributor then makes performance claims, or offers warranties related to Product X, those performance claims and warranties are such Commercial Contributor's responsibility alone. Under this section, the Commercial Contributor would have to defend claims against the other Contributors related to those performance claims and warranties, and if a court requires any other Contributor to pay any damages as a result, the Commercial Contributor must pay those damages.
license_1147_h3=5. NO WARRANTY
license_1148_p=EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, THE PROGRAM IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED INCLUDING, WITHOUT LIMITATION, ANY WARRANTIES OR CONDITIONS OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Each Recipient is solely responsible for determining the appropriateness of using and distributing the Program and assumes all risks associated with its exercise of rights under this Agreement, including but not limited to the risks and costs of program errors, compliance with applicable laws, damage to or loss of data, programs or equipment, and unavailability or interruption of operations.
license_1149_h3=6. DISCLAIMER OF LIABILITY
license_1150_p=EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, NEITHER RECIPIENT NOR ANY CONTRIBUTORS SHALL HAVE ANY LIABILITY FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING WITHOUT LIMITATION LOST PROFITS), HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OR DISTRIBUTION OF THE PROGRAM OR THE EXERCISE OF ANY RIGHTS GRANTED HEREUNDER, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
license_1151_h3=7. GENERAL
license_1152_p=If any provision of this Agreement is invalid or unenforceable under applicable law, it shall not affect the validity or enforceability of the remainder of the terms of this Agreement, and without further action by the parties hereto, such provision shall be reformed to the minimum extent necessary to make such provision valid and enforceable.
license_1153_p=If Recipient institutes patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Program itself (excluding combinations of the Program with other software or hardware) infringes such Recipient's patent(s), then such Recipient's rights granted under Section 2(b) shall terminate as of the date such litigation is filed.
license_1154_p=All Recipient's rights under this Agreement shall terminate if it fails to comply with any of the material terms or conditions of this Agreement and does not cure such failure in a reasonable period of time after becoming aware of such noncompliance. If all Recipient's rights under this Agreement terminate, Recipient agrees to cease use and distribution of the Program as soon as reasonably practicable. However, Recipient's obligations under this Agreement and any licenses granted by Recipient relating to the Program shall continue and survive.
license_1155_p=Everyone is permitted to copy and distribute copies of this Agreement, but in order to avoid inconsistency the Agreement is copyrighted and may only be modified in the following manner. The Agreement Steward reserves the right to publish new versions (including revisions) of this Agreement from time to time. No one other than the Agreement Steward has the right to modify this Agreement. The Eclipse Foundation is the initial Agreement Steward. The Eclipse Foundation may assign the responsibility to serve as the Agreement Steward to a suitable separate entity. Each new version of the Agreement will be given a distinguishing version number. The Program (including Contributions) may always be distributed subject to the version of the Agreement under which it was received. In addition, after a new version of the Agreement is published, Contributor may elect to distribute the Program (including its Contributions) under the new version. Except as expressly stated in Sections 2(a) and 2(b) above, Recipient receives no rights or licenses to the intellectual property of any Contributor under this Agreement, whether expressly, by implication, estoppel or otherwise. All rights in the Program not expressly granted under this Agreement are reserved.
license_1156_p=This Agreement is governed by the laws of the State of New York and the intellectual property laws of the United States of America. No party to this Agreement will bring a legal action under this Agreement more than one year after the cause of action arose. Each party waives its rights to a jury trial in any resulting litigation.
links_1000_h1=H2 In Use and Links
links_1001_p=Those are just a few links to products using or supporting H2. If you want to add a link, please send it to the support email address or post it in the group.
links_1002_h2=Books
links_1003_a=Seam In Action
links_1004_h2=Extensions
links_1005_a=Grails H2 Database Plugin
links_1006_a=h2osgi\: OSGi for the H2 Database
links_1007_a=H2Sharp\: ADO.NET interface for the H2 database engine
links_1008_a=H2 Spatial\: spatial functions to H2 database
links_1009_h2=Blogs
links_1010_a=Porting Flexive to the H2 Database (2008-12-05)
links_1011_a=H2 Database with GlassFish (2008-11-24)
links_1012_a=Using H2 Database with Glassfish and Toplink (2008-08-07)
links_1013_a=H2 Database - Performance Tracing (2008-04-30)
links_1014_a=Testing your JDBC data access layer with DBUnit and H2 (2007-09-18)
links_1015_a=Open Source Databases Comparison (2007-09-11)
links_1016_a=The Codist\: The Open Source Frameworks I Use (2007-07-23)
links_1017_a=The Codist\:  SQL Injections\: How Not To Get Stuck (2007-05-08)
links_1018_a=One Man Band\: (Helma + H2) \=\= "to easy" (2007-03-11)
links_1019_a=David Coldrick's Weblog\: New Version of H2 Database Released (2007-01-06)
links_1020_a=The Codist\: Write Your Own Database, Again (2006-11-13)
links_1021_h2=Project Pages
links_1022_a=Ohloh
links_1023_a=Freshmeat Project Page
links_1024_a=Wikipedia
links_1025_a=Java Source Net
links_1026_a=Linux Package Manager
links_1027_h2=Database Frontends / Tools
links_1028_a=DB Solo
links_1029_p=SQL query tool.
links_1030_a=DbVisualizer
links_1031_p=Database tool.
links_1032_a=Execute Query
links_1033_p=Database utility written in Java.
links_1034_a=[fleXive]
links_1035_p=JavaEE 5 open source framework for the development of complex and evolving (web-)applications.
links_1036_a=HenPlus
links_1037_p=HenPlus is a SQL shell written in Java.
links_1038_a=RazorSQL
links_1039_p=An SQL query tool, database browser, SQL editor, and database administration tool.
links_1040_a=SQL Developer
links_1041_p=Universal Database Frontend.
links_1042_a=SQL Workbench/J
links_1043_p=Free DBMS-independent SQL tool.
links_1044_a=SQuirreL SQL Client
links_1045_p=Graphical tool to view the structure of a database, browse the data, issue SQL commands etc.
links_1046_a=SQuirreL DB Copy Plugin
links_1047_p=Tool to copy data from one database to another.
links_1048_h2=Products and Projects
links_1049_a=&AElig;jaks
links_1050_p=A server-side scripting environment to build AJAX enabled web applications.
links_1051_a=Axiom Stack
links_1052_p=A web framework that let's you write dynamic web applications with Zen-like simplicity.
links_1053_a=Apache Cayenne
links_1054_p=Open source persistence framework providing object-relational mapping (ORM) and remoting services.
links_1055_a=Apache Jackrabbit
links_1056_p=Open source implementation of the Java Content Repository API (JCR).
links_1057_a=Apache OpenJPA
links_1058_p=Open source implementation of the Java Persistence API (JPA).
links_1059_a=AppFuse
links_1060_p=Helps building web applications.
links_1061_a=BGBlitz
links_1062_p=The Swiss army knife of Backgammon.
links_1063_a=Blojsom
links_1064_p=Java-based multi-blog, multi-user software package (Mac OS X Weblog Server).
links_1065_a=Bonita
links_1066_p=Open source workflow solution for handing long-running, user-oriented processes providing out of the box workflow and business process management features.
links_1067_a=Bookmarks Portlet
links_1068_p=JSR 168 compliant bookmarks management portlet application.
links_1069_a=Claros inTouch
links_1070_p=Ajax communication suite with mail, addresses, notes, IM, and rss reader.
links_1071_a=CrashPlan PRO Server
links_1072_p=Easy and cross platform backup solution for business and service providers.
links_1073_a=DbUnit
links_1074_p=A JUnit extension (also usable with Ant) targeted for database-driven projects.
links_1075_a=Ebean ORM Persistence Layer
links_1076_p=Open source Java Object Relational Mapping tool.
links_1077_a=Epictetus
links_1078_p=Free cross platform database tool.
links_1079_a=Fabric3
links_1080_p=Fabric3 is a project implementing a federated service network based on the Service Component Architecture specification (http\://www.osoa.org).
links_1081_a=FIT4Data
links_1082_p=A testing framework for data management applications built on the Java implementation of FIT.
links_1083_a=Flux
links_1084_p=Java job scheduler, file transfer, workflow, and BPM.
links_1085_a=GNU Gluco Control
links_1086_p=Helps you to manage your diabetes.
links_1087_a=Golden T Studios
links_1088_p=Fun-to-play games with a simple interface.
links_1089_a=Group Session
links_1090_p=Open source web groupware.
links_1091_a=HA-JDBC
links_1092_p=High-Availability JDBC\: A JDBC proxy that provides light-weight, transparent, fault tolerant clustering capability to any underlying JDBC driver.
links_1093_a=Harbor
links_1094_p=Pojo Application Server.
links_1095_a=Hibernate
links_1096_p=Relational persistence for idiomatic Java (O-R mapping tool).
links_1097_a=Hibicius
links_1098_p=Online Banking Client for the HBCI protocol.
links_1099_a=ImageMapper
links_1100_p=ImageMapper frees users from having to use file browsers to view their images. They get fast access to images and easy cataloguing of them via a user friendly interface.
links_1101_a=JAMWiki
links_1102_p=Java-based Wiki engine.
links_1103_a=Jala
links_1104_p=Open source collection of JavaScript modules.
links_1105_a=Java Simon
links_1106_p=Simple Monitoring API.
links_1107_a=jBPM
links_1108_p=A platform for executable process languages ranging from business process management (BPM) over workflow to service orchestration.
links_1109_a=JGeocoder
links_1110_p=Free Java geocoder. Geocoding is the process of estimating a latitude and longitude for a given location.
links_1111_a=JGrass
links_1112_p=Java Geographic Resources Analysis Support System. Free, multi platform, open source GIS based on the GIS framework of uDig.
links_1113_a=Jena
links_1114_p=Java framework for building Semantic Web applications.
links_1115_a=JMatter
links_1116_p=Framework for constructing workgroup business applications based on the Naked Objects Architectural Pattern.
links_1117_a=JotBot
links_1118_p=Records your day at user defined intervals.
links_1119_a=JPOX
links_1120_p=Java persistent objects.
links_1121_a=Liftweb
links_1122_p=A Scala-based, secure, developer friendly web framework.
links_1123_a=LiquiBase
links_1124_p=A tool to manage database changes and refactorings.
links_1125_a=Luntbuild
links_1126_p=Build automation and management tool.
links_1127_a=localdb
links_1128_p=A tool that locates the full file path of the folder containing the database files.
links_1129_a=Magnolia
links_1130_p=Microarray Data Management and Export System for PFGRC (Pathogen Functional Genomics Resource Center) Microarrays.
links_1131_a=MiniConnectionPoolManager
links_1132_p=A lightweight standalone JDBC connection pool manager.
links_1133_a=Mr. Persister
links_1134_p=Simple, small and fast object relational mapping.
links_1135_a=Myna Application Server
links_1136_p=Java web app that provides dynamic web content and Java libraries access from JavaScript.
links_1137_a=MyTunesRss
links_1138_p=MyTunesRSS lets you listen to your music wherever you are.
links_1139_a=NCGC CurveFit
links_1140_p=From\: NIH Chemical Genomics Center, National Institutes of Health, USA. An open source application in the life sciences research field. This application handles chemical structures and biological responses of thousands of compounds with the potential to handle million+ compounds. It utilizes an embedded H2 database to enable flexible query/retrieval of all data including advanced chemical substructure and similarity searching. The application highlights an automated curve fitting and classification algorithm that outperforms commercial packages in the field. Commercial alternatives are typically small desktop software that handle a few dose response curves at a time. A couple of commercial packages that do handle several thousand curves are very expensive tools (&gt;60k USD) that require manual curation of analysis by the user; require a license to Oracle; lack advanced query/retrieval; and the ability to handle chemical structures.
links_1141_a=Nuxeo
links_1142_p=Standards-based, open source platform for building ECM applications.
links_1143_a=nWire
links_1144_p=Eclipse plug-in which expedites Java development. It's main purpose is to help developers find code quicker and easily understand how it relates to the rest of the application, thus, understand the application structure.
links_1145_a=Ontology Works
links_1146_p=This company provides semantic technologies including deductive information repositories (the Ontology Works Knowledge Servers), semantic information fusion and semantic federation of legacy databases, ontology-based domain modeling, and management of the distributed enterprise.
links_1147_a=Ontoprise OntoBroker
links_1148_p=SemanticWeb-Middleware. It supports all W3C Semantic Web recommendations\: OWL, RDF, RDFS, SPARQL, and F-Logic.
links_1149_a=Open Anzo
links_1150_p=Semantic Application Server.
links_1151_a=OpenGroove
links_1152_p=OpenGroove is a groupware program that allows users to synchronize data.
links_1153_a=OpenSocial Development Environment (OSDE)
links_1154_p=Development tool for OpenSocial application.
links_1155_a=Orion
links_1156_p=J2EE Application Server.
links_1157_a=P5H2
links_1158_p=A library for the <a href\="http\://www.processing.org">Processing</a> programming language and environment.
links_1159_a=Phase-6
links_1160_p=A computer based learning software.
links_1161_a=Pickle
links_1162_p=Pickle is a Java library containing classes for persistence, concurrency, and logging.
links_1163_a=Piman
links_1164_p=Water treatment projects data management.
links_1165_a=PolePosition
links_1166_p=Open source database benchmark.
links_1167_a=Poormans
links_1168_p=Very basic CMS running as a SWT application and generating static html pages.
links_1169_a=Railo
links_1170_p=Railo is an alternative engine for the Cold Fusion Markup Language, that compiles code programmed in CFML into Java bytecode and executes it on a servlet engine.
links_1171_a=Razuna
links_1172_p=Open source Digital Asset Management System with integrated Web Content Management.
links_1173_a=RIFE
links_1174_p=A full-stack web application framework with tools and APIs to implement most common web features.
links_1175_a=Rutema
links_1176_p=Rutema is a test execution and management tool for heterogeneous development environments written in Ruby.
links_1177_a=Sava
links_1178_p=Open-source web-based content management system.
links_1179_a=Scriptella
links_1180_p=ETL (Extract-Transform-Load) and script execution tool.
links_1181_a=Sesar
links_1182_p=Dependency Injection Container with Aspect Oriented Programming.
links_1183_a=SemmleCode
links_1184_p=Eclipse plugin to help you improve software quality.
links_1185_a=SeQuaLite
links_1186_p=A free, light-weight, java data access framework.
links_1187_a=ShapeLogic
links_1188_p=Toolkit for declarative programming, image processing and computer vision.
links_1189_a=Shellbook
links_1190_p=Desktop publishing application.
links_1191_a=Signsoft intelliBO
links_1192_p=Persistence middleware supporting the JDO specification.
links_1193_a=SimpleORM
links_1194_p=Simple Java Object Relational Mapping.
links_1195_a=SymmetricDS
links_1196_p=A web-enabled, database independent, data synchronization/replication software.
links_1197_a=SmartFoxServer
links_1198_p=Platform for developing multiuser applications and games with Macromedia Flash.
links_1199_a=Social Bookmarks Friend Finder
links_1200_p=A GUI application that allows you to find users with similar bookmarks to the user specified (for delicious.com).
links_1201_a=Springfuse
links_1202_p=Code generation For Spring, Spring MVC & Hibernate.
links_1203_a=SQLOrm
links_1204_p=Java Object Relation Mapping.
links_1205_a=StorYBook
links_1206_p=A summary-based tool for novelist and script writers. It helps to keep the overview over the various traces a story has.
links_1207_a=StreamCruncher
links_1208_p=Event (stream) processing kernel.
links_1209_a=Tune Backup
links_1210_p=Easy-to-use backup solution for your iTunes library.
links_1211_a=weblica
links_1212_p=Desktop CMS.
links_1213_a=Web of Web
links_1214_p=Collaborative and realtime interactive media platform for the web.
links_1215_a=Werkzeugkasten
links_1216_p=Minimum Java Toolset.
links_1217_a=VPDA
links_1218_p=View providers driven applications is a Java based application framework for building applications composed from server components - view providers.
links_1219_a=Volunteer database
links_1220_p=A database front end to register volunteers, partnership and donation for a Non Profit organization.
mainWeb_1000_h1=H2 Database Engine
mainWeb_1001_p=Welcome to H2, the Java SQL database. The main feature of H2 are\:
mainWeb_1002_li=Very fast, open source, JDBC API
mainWeb_1003_li=Embedded and server modes; in-memory databases
mainWeb_1004_li=Browser based Console application
mainWeb_1005_li=Small footprint\: around 1 MB jar file size
mainWeb_1006_h3=Download
mainWeb_1007_td=Version 1.1.112 (2009-05-01)\:
mainWeb_1008_a=Windows Installer (3.3 MB)
mainWeb_1009_a=All Platforms (zip, 4.9 MB)
mainWeb_1010_a=All Downloads
mainWeb_1011_td=&nbsp;&nbsp;&nbsp;
mainWeb_1012_h3=Support
mainWeb_1013_a=English Google Group
mainWeb_1014_a=Japanese Google Group
mainWeb_1015_p=For non-technical issues, use\:
mainWeb_1016_h3=Features
mainWeb_1017_th=H2
mainWeb_1018_a=Derby
mainWeb_1019_a=HSQLDB
mainWeb_1020_a=MySQL
mainWeb_1021_a=PostgreSQL
mainWeb_1022_td=Pure Java
mainWeb_1023_td=Yes
mainWeb_1024_td=Yes
mainWeb_1025_td=Yes
mainWeb_1026_td=No
mainWeb_1027_td=No
mainWeb_1028_td=Memory Mode
mainWeb_1029_td=Yes
mainWeb_1030_td=No
mainWeb_1031_td=Yes
mainWeb_1032_td=No
mainWeb_1033_td=No
mainWeb_1034_td=Transaction Isolation
mainWeb_1035_td=Yes
mainWeb_1036_td=Yes
mainWeb_1037_td=No
mainWeb_1038_td=Yes
mainWeb_1039_td=Yes
mainWeb_1040_td=Cost Based Optimizer
mainWeb_1041_td=Yes
mainWeb_1042_td=Yes
mainWeb_1043_td=No
mainWeb_1044_td=Yes
mainWeb_1045_td=Yes
mainWeb_1046_td=Encrypted Database
mainWeb_1047_td=Yes
mainWeb_1048_td=Yes
mainWeb_1049_td=No
mainWeb_1050_td=No
mainWeb_1051_td=No
mainWeb_1052_td=ODBC Driver
mainWeb_1053_td=Yes
mainWeb_1054_td=No
mainWeb_1055_td=No
mainWeb_1056_td=Yes
mainWeb_1057_td=Yes
mainWeb_1058_td=Fulltext Search
mainWeb_1059_td=Yes
mainWeb_1060_td=No
mainWeb_1061_td=No
mainWeb_1062_td=Yes
mainWeb_1063_td=Yes
mainWeb_1064_td=Multi Version Concurrency
mainWeb_1065_td=Yes
mainWeb_1066_td=No
mainWeb_1067_td=No
mainWeb_1068_td=No
mainWeb_1069_td=Yes
mainWeb_1070_td=Footprint (jar/dll size)
mainWeb_1071_td=~1 MB
mainWeb_1072_td=~2 MB
mainWeb_1073_td=~600 KB
mainWeb_1074_td=~4 MB
mainWeb_1075_td=~6 MB
mainWeb_1076_p=See also the <a href\="features.html\#comparison">detailed comparison</a> .
mainWeb_1077_h3=News
mainWeb_1078_b=Newsfeeds\:
mainWeb_1079_a=Full text (Atom)
mainWeb_1080_p=or <a href\="http\://www.h2database.com/html/newsfeed-rss.xml">Header only (RSS)</a> .
mainWeb_1081_b=Email Newsletter\:
mainWeb_1082_p=Subscribe to <a href\="http\://groups.google.com/group/h2database-news/subscribe">H2 Database News (Google account required)</a> to get informed about new releases.     Your email address is only used in this context.
mainWeb_1083_td=&nbsp;
mainWeb_1084_h3=Contribute
mainWeb_1085_p=You can contribute to the development of H2 by sending feedback and bug    reports, or translate the H2 Console application (for details, start the H2 Console    and select Options / Translate).    To donate money, click on the PayPal button below. You will be listed as a supporter\:
main_1000_h1=H2 Database Engine
main_1001_p=Welcome to H2, the free Java SQL database engine.
main_1002_a=Quickstart
main_1003_p=Get a fast overview.
main_1004_a=Tutorial
main_1005_p=Go through the samples.
main_1006_a=Features
main_1007_p=See what this database can do and how to use these features.
performance_1000_h1=Performance
performance_1001_a=Performance Comparison
performance_1002_a=PolePosition Benchmark
performance_1003_a=Application Profiling
performance_1004_a=Database Profiling
performance_1005_a=Performance Tuning
performance_1006_h2=Performance Comparison
performance_1007_p=In many cases H2 is faster than other (open source and not open source) database engines. Please note this is mostly a single connection benchmark run on one computer.
performance_1008_h3=Embedded
performance_1009_th=Test Case
performance_1010_th=Unit
performance_1011_th=H2
performance_1012_th=HSQLDB
performance_1013_th=Derby
performance_1014_td=Simple\: Init
performance_1015_td=ms
performance_1016_td=610
performance_1017_td=657
performance_1018_td=3187
performance_1019_td=Simple\: Query (random)
performance_1020_td=ms
performance_1021_td=297
performance_1022_td=312
performance_1023_td=1828
performance_1024_td=Simple\: Query (sequential)
performance_1025_td=ms
performance_1026_td=203
performance_1027_td=266
performance_1028_td=1766
performance_1029_td=Simple\: Update (random)
performance_1030_td=ms
performance_1031_td=1078
performance_1032_td=1484
performance_1033_td=22031
performance_1034_td=Simple\: Delete (sequential)
performance_1035_td=ms
performance_1036_td=234
performance_1037_td=281
performance_1038_td=7407
performance_1039_td=Simple\: Memory Usage
performance_1040_td=MB
performance_1041_td=6
performance_1042_td=7
performance_1043_td=11
performance_1044_td=BenchA\: Init
performance_1045_td=ms
performance_1046_td=859
performance_1047_td=438
performance_1048_td=4047
performance_1049_td=BenchA\: Transactions
performance_1050_td=ms
performance_1051_td=5266
performance_1052_td=2875
performance_1053_td=17500
performance_1054_td=BenchA\: Memory Usage
performance_1055_td=MB
performance_1056_td=9
performance_1057_td=14
performance_1058_td=10
performance_1059_td=BenchB\: Init
performance_1060_td=ms
performance_1061_td=4016
performance_1062_td=2687
performance_1063_td=16875
performance_1064_td=BenchB\: Transactions
performance_1065_td=ms
performance_1066_td=2609
performance_1067_td=3282
performance_1068_td=4250
performance_1069_td=BenchB\: Memory Usage
performance_1070_td=MB
performance_1071_td=9
performance_1072_td=10
performance_1073_td=8
performance_1074_td=BenchC\: Init
performance_1075_td=ms
performance_1076_td=891
performance_1077_td=594
performance_1078_td=5766
performance_1079_td=BenchC\: Transactions
performance_1080_td=ms
performance_1081_td=4359
performance_1082_td=75438
performance_1083_td=11718
performance_1084_td=BenchC\: Memory Usage
performance_1085_td=MB
performance_1086_td=9
performance_1087_td=18
performance_1088_td=9
performance_1089_td=Executed statements
performance_1090_td=\#
performance_1091_td=594255
performance_1092_td=594255
performance_1093_td=594255
performance_1094_td=Total time
performance_1095_td=ms
performance_1096_td=20422
performance_1097_td=88314
performance_1098_td=96375
performance_1099_td=Statements per second
performance_1100_td=\#
performance_1101_td=29098
performance_1102_td=6728
performance_1103_td=6166
performance_1104_h3=Client-Server
performance_1105_th=Test Case
performance_1106_th=Unit
performance_1107_th=H2
performance_1108_th=HSQLDB
performance_1109_th=Derby
performance_1110_th=PostgreSQL
performance_1111_th=MySQL
performance_1112_td=Simple\: Init
performance_1113_td=ms
performance_1114_td=3125
performance_1115_td=3312
performance_1116_td=7140
performance_1117_td=5109
performance_1118_td=3594
performance_1119_td=Simple\: Query (random)
performance_1120_td=ms
performance_1121_td=3390
performance_1122_td=3328
performance_1123_td=9953
performance_1124_td=5422
performance_1125_td=4812
performance_1126_td=Simple\: Query (sequential)
performance_1127_td=ms
performance_1128_td=3235
performance_1129_td=3219
performance_1130_td=9813
performance_1131_td=5296
performance_1132_td=3969
performance_1133_td=Simple\: Update (random)
performance_1134_td=ms
performance_1135_td=3437
performance_1136_td=4562
performance_1137_td=26594
performance_1138_td=6766
performance_1139_td=5703
performance_1140_td=Simple\: Delete (sequential)
performance_1141_td=ms
performance_1142_td=1391
performance_1143_td=1625
performance_1144_td=9343
performance_1145_td=2750
performance_1146_td=2094
performance_1147_td=Simple\: Memory Usage
performance_1148_td=MB
performance_1149_td=7
performance_1150_td=7
performance_1151_td=13
performance_1152_td=0
performance_1153_td=1
performance_1154_td=BenchA\: Init
performance_1155_td=ms
performance_1156_td=2781
performance_1157_td=2954
performance_1158_td=7828
performance_1159_td=4875
performance_1160_td=3859
performance_1161_td=BenchA\: Transactions
performance_1162_td=ms
performance_1163_td=13015
performance_1164_td=11718
performance_1165_td=30031
performance_1166_td=17672
performance_1167_td=13187
performance_1168_td=BenchA\: Memory Usage
performance_1169_td=MB
performance_1170_td=9
performance_1171_td=17
performance_1172_td=10
performance_1173_td=1
performance_1174_td=1
performance_1175_td=BenchB\: Init
performance_1176_td=ms
performance_1177_td=12000
performance_1178_td=13047
performance_1179_td=30562
performance_1180_td=20687
performance_1181_td=15328
performance_1182_td=BenchB\: Transactions
performance_1183_td=ms
performance_1184_td=5375
performance_1185_td=3688
performance_1186_td=8063
performance_1187_td=6250
performance_1188_td=4594
performance_1189_td=BenchB\: Memory Usage
performance_1190_td=MB
performance_1191_td=10
performance_1192_td=12
performance_1193_td=8
performance_1194_td=1
performance_1195_td=1
performance_1196_td=BenchC\: Init
performance_1197_td=ms
performance_1198_td=2390
performance_1199_td=1875
performance_1200_td=7015
performance_1201_td=2515
performance_1202_td=4062
performance_1203_td=BenchC\: Transactions
performance_1204_td=ms
performance_1205_td=11391
performance_1206_td=77922
performance_1207_td=23766
performance_1208_td=13203
performance_1209_td=8141
performance_1210_td=BenchC\: Memory Usage
performance_1211_td=MB
performance_1212_td=11
performance_1213_td=18
performance_1214_td=15
performance_1215_td=1
performance_1216_td=1
performance_1217_td=Executed statements
performance_1218_td=\#
performance_1219_td=594255
performance_1220_td=594255
performance_1221_td=594255
performance_1222_td=594255
performance_1223_td=594255
performance_1224_td=Total time
performance_1225_td=ms
performance_1226_td=61530
performance_1227_td=127250
performance_1228_td=170108
performance_1229_td=90545
performance_1230_td=69343
performance_1231_td=Statements per second
performance_1232_td=\#
performance_1233_td=9657
performance_1234_td=4669
performance_1235_td=3493
performance_1236_td=6563
performance_1237_td=8569
performance_1238_h3=Benchmark Results and Comments
performance_1239_h4=H2
performance_1240_p=Version 1.0.78 (2008-08-28) was used for the test. For simpler operations, the performance of H2 is about the same as for HSQLDB. For more complex queries, the query optimizer is very important. However H2 is not very fast in every case, certain kind of queries may still be slow. One situation where is H2 is slow is large result sets, because they are buffered to disk if more than a certain number of records are returned. The advantage of buffering is, there is no limit on the result set size. The open/close time is almost fixed, because of the file locking protocol\: The engine waits some time after opening a database to ensure the database files are not opened by another process.
performance_1241_h4=HSQLDB
performance_1242_p=Version 1.8.0.10 was used for the test. Cached tables are used in this test (hsqldb.default_table_type\=cached), and the write delay is 1 second (SET WRITE_DELAY 1). HSQLDB is fast when using simple operations. HSQLDB is very slow in the last test (BenchC\: Transactions), probably because is has a bad query optimizer. One query where HSQLDB is slow is a two-table join\:
performance_1243_p=The PolePosition benchmark also shows that the query optimizer does not do a very good job for some queries. Another disadvantage of HSQLDB is the slow startup / shutdown time (currently not listed) when using bigger databases. The reason is, a backup of the whole data is made whenever the database is opened or closed.
performance_1244_h4=Derby
performance_1245_p=Version 10.4.2.0 was used for the test. Derby is clearly the slowest embedded database in this test. This seems to be a structural problem, because all operations are really slow. It will be hard for the developers of Derby to improve the performance to a reasonable level. A few problems have been identified\: Leaving autocommit on is a problem for Derby. If it is switched off during the whole test, the results are about 20% better for Derby. Derby supports a testing mode (system property derby.system.durability\=test) where durability is disabled. According to the documentation, this setting should be used for testing only, as the database may not recover after a crash. Enabling this setting improves performance by a factor of 2.6 (embedded mode) or 1.4 (server mode). Even if enabled, Derby is still less than half as fast as H2 in default mode.
performance_1246_h4=PostgreSQL
performance_1247_p=Version 8.3.4 was used for the test. The following options where changed in postgresql.conf\: fsync \= off, commit_delay \= 1000. PostgreSQL is run in server mode. It looks like the base performance is slower than MySQL, the reason could be the network layer. The memory usage number is incorrect, because only the memory usage of the JDBC driver is measured.
performance_1248_h4=MySQL
performance_1249_p=Version 5.0.67 was used for the test. MySQL was run with the InnoDB backend. The setting innodb_flush_log_at_trx_commit (found in the my.ini file) was set to 0. Otherwise (and by default), MySQL is really slow (around 140 statements per second in this test) because it tries to flush the data to disk for each commit. For small transactions (when autocommit is on) this is really slow. But many use cases use small or relatively small transactions. Too bad this setting is not listed in the configuration wizard, and it always overwritten when using the wizard. You need to change this setting manually in the file my.ini, and then restart the service. The memory usage number is incorrect, because only the memory usage of the JDBC driver is measured.
performance_1250_h4=Firebird
performance_1251_p=Firebird 1.5 (default installation) was tested, but the results are not published currently. It is possible to run the performance test with the Firebird database, and any information on how to configure Firebird for higher performance are welcome.
performance_1252_h4=Why Oracle / MS SQL Server / DB2 are Not Listed
performance_1253_p=The license of these databases does not allow to publish benchmark results. This doesn't mean that they are fast. They are in fact quite slow, and need a lot of memory. But you will need to test this yourself. SQLite was not tested because the JDBC driver doesn't support transactions.
performance_1254_h3=About this Benchmark
performance_1255_h4=How to Run
performance_1256_p=This test was executed as follows\:
performance_1257_h4=Separate Process per Database
performance_1258_p=For each database, a new process is started, to ensure the previous test does not impact the current test.
performance_1259_h4=Number of Connections
performance_1260_p=This is mostly a single-connection benchmark. BenchB uses multiple connections; the other tests use one connection.
performance_1261_h4=Real-World Tests
performance_1262_p=Good benchmarks emulate real-world use cases. This benchmark includes 3 test cases\: A simple test case with one table and many small updates / deletes. BenchA is similar to the TPC-A test, but single connection / single threaded (see also\: www.tpc.org). BenchB is similar to the TPC-B test, using multiple connections (one thread per connection). BenchC is similar to the TPC-C test, but single connection / single threaded.
performance_1263_h4=Comparing Embedded with Server Databases
performance_1264_p=This is mainly a benchmark for embedded databases (where the application runs in the same virtual machine as the database engine). However MySQL and PostgreSQL are not Java databases and cannot be embedded into a Java application. For the Java databases, both embedded and server modes are tested.
performance_1265_h4=Test Platform
performance_1266_p=This test is run on Windows XP with the virus scanner switched off. The VM used is Sun JDK 1.5.
performance_1267_h4=Multiple Runs
performance_1268_p=When a Java benchmark is run first, the code is not fully compiled and therefore runs slower than when running multiple times. A benchmark should always run the same test multiple times and ignore the first run(s). This benchmark runs three times, but only the last run is measured.
performance_1269_h4=Memory Usage
performance_1270_p=It is not enough to measure the time taken, the memory usage is important as well. Performance can be improved by using a bigger cache, but the amount of memory is limited. HSQLDB tables are kept fully in memory by default; this benchmark uses 'disk based' tables for all databases. Unfortunately, it is not so easy to calculate the memory usage of PostgreSQL and MySQL, because they run in a different process than the test. This benchmark currently does not print memory usage of those databases.
performance_1271_h4=Delayed Operations
performance_1272_p=Some databases delay some operations (for example flushing the buffers) until after the benchmark is run. This benchmark waits between each database tested, and each database runs in a different process (sequentially).
performance_1273_h4=Transaction Commit / Durability
performance_1274_p=Durability means transaction committed to the database will not be lost. Some databases (for example MySQL) try to enforce this by default by calling fsync() to flush the buffers, but most hard drives don't actually flush all data. Calling fsync() slows down transaction commit a lot, but doesn't always make data durable. When comparing the results, it is important to think about the effect. Many database suggest to 'batch' operations when possible. This benchmark switches off autocommit when loading the data, and calls commit after each 1000 inserts. However many applications need 'short' transactions at runtime (a commit after each update). This benchmark commits after each update / delete in the simple benchmark, and after each business transaction in the other benchmarks. For databases that support delayed commits, a delay of one second is used.
performance_1275_h4=Using Prepared Statements
performance_1276_p=Wherever possible, the test cases use prepared statements.
performance_1277_h4=Currently Not Tested\: Startup Time
performance_1278_p=The startup time of a database engine is important as well for embedded use. This time is not measured currently. Also, not tested is the time used to create a database and open an existing database. Here, one (wrapper) connection is opened at the start, and for each step a new connection is opened and then closed.
performance_1279_h2=PolePosition Benchmark
performance_1280_p=The PolePosition is an open source benchmark. The algorithms are all quite simple. It was developed / sponsored by db4o.
performance_1281_th=Test Case
performance_1282_th=Unit
performance_1283_th=H2
performance_1284_th=HSQLDB
performance_1285_th=MySQL
performance_1286_td=Melbourne write
performance_1287_td=ms
performance_1288_td=369
performance_1289_td=249
performance_1290_td=2022
performance_1291_td=Melbourne read
performance_1292_td=ms
performance_1293_td=47
performance_1294_td=49
performance_1295_td=93
performance_1296_td=Melbourne read_hot
performance_1297_td=ms
performance_1298_td=24
performance_1299_td=43
performance_1300_td=95
performance_1301_td=Melbourne delete
performance_1302_td=ms
performance_1303_td=147
performance_1304_td=133
performance_1305_td=176
performance_1306_td=Sepang write
performance_1307_td=ms
performance_1308_td=965
performance_1309_td=1201
performance_1310_td=3213
performance_1311_td=Sepang read
performance_1312_td=ms
performance_1313_td=765
performance_1314_td=948
performance_1315_td=3455
performance_1316_td=Sepang read_hot
performance_1317_td=ms
performance_1318_td=789
performance_1319_td=859
performance_1320_td=3563
performance_1321_td=Sepang delete
performance_1322_td=ms
performance_1323_td=1384
performance_1324_td=1596
performance_1325_td=6214
performance_1326_td=Bahrain write
performance_1327_td=ms
performance_1328_td=1186
performance_1329_td=1387
performance_1330_td=6904
performance_1331_td=Bahrain query_indexed_string
performance_1332_td=ms
performance_1333_td=336
performance_1334_td=170
performance_1335_td=693
performance_1336_td=Bahrain query_string
performance_1337_td=ms
performance_1338_td=18064
performance_1339_td=39703
performance_1340_td=41243
performance_1341_td=Bahrain query_indexed_int
performance_1342_td=ms
performance_1343_td=104
performance_1344_td=134
performance_1345_td=678
performance_1346_td=Bahrain update
performance_1347_td=ms
performance_1348_td=191
performance_1349_td=87
performance_1350_td=159
performance_1351_td=Bahrain delete
performance_1352_td=ms
performance_1353_td=1215
performance_1354_td=729
performance_1355_td=6812
performance_1356_td=Imola retrieve
performance_1357_td=ms
performance_1358_td=198
performance_1359_td=194
performance_1360_td=4036
performance_1361_td=Barcelona write
performance_1362_td=ms
performance_1363_td=413
performance_1364_td=832
performance_1365_td=3191
performance_1366_td=Barcelona read
performance_1367_td=ms
performance_1368_td=119
performance_1369_td=160
performance_1370_td=1177
performance_1371_td=Barcelona query
performance_1372_td=ms
performance_1373_td=20
performance_1374_td=5169
performance_1375_td=101
performance_1376_td=Barcelona delete
performance_1377_td=ms
performance_1378_td=388
performance_1379_td=319
performance_1380_td=3287
performance_1381_td=Total
performance_1382_td=ms
performance_1383_td=26724
performance_1384_td=53962
performance_1385_td=87112
performance_1386_p=There are a few problems with the PolePosition test\:
performance_1387_li=HSQLDB uses in-memory tables by default while H2 uses persistent tables. The HSQLDB version included in PolePosition does not support changing this, so you need to replace poleposition-0.20/lib/hsqldb.jar with a newer version (for example hsqldb-1.8.0.7.jar), and then use the setting hsqldb.connecturl\=jdbc\:hsqldb\:file\:data/hsqldb/dbbench2;hsqldb.default_table_type\=cached;sql.enforce_size\=true in Jdbc.properties.
performance_1388_li=HSQLDB keeps the database open between tests, while H2 closes the database (losing all the cache). To change that, use the database URL jdbc\:h2\:file\:data/h2/dbbench;DB_CLOSE_DELAY\=-1
performance_1389_li=The amount of cache memory is quite important, specially for the PolePosition test. Unfortunately, the PolePosition test does not take this into account.
performance_1390_h2=Application Profiling
performance_1391_h3=Analyze First
performance_1392_p=Before trying to optimize performance, it is important to understand where the problem is (what part of the application is slow). Blind optimization or optimization based on guesses should be avoided, because usually it is not an efficient strategy. There are various ways to analyze an application. Sometimes two implementations can be compared using System.currentTimeMillis(). But this does not work for complex applications with many modules, and for memory problems.
performance_1393_p=A good tool to measure both memory usage and performance is the <a href\="http\://www.yourkit.com">YourKit Java Profiler</a> .
performance_1394_p=A simple way to profile an application is to use the built-in profiling tool of java. Example\:
performance_1395_p=Unfortunately, it is only possible to profile the application from start to end. Another solution is to create a number of full thread dumps. To do that, first run <code>jps -l</code> to get the process id, and then run <code>jstack &lt;pid&gt;</code> or <code>kill -QUIT &lt;pid&gt;</code> (Linux) or press Ctrl+C (Windows).
performance_1396_h2=Database Profiling
performance_1397_p=The ConvertTraceFile tool generates SQL statement statistics at the end of the SQL script file. The format used is similar to the profiling data generated when using java -Xrunhprof. As an example, execute the the following script using the H2 Console\:
performance_1398_p=Now convert the .trace.db file using the ConvertTraceFile tool\:
performance_1399_p=The generated file <code>test.sql</code> will contain the SQL statements as well as the following profiling data (results vary)\:
performance_1400_h2=Database Performance Tuning
performance_1401_h3=Virus Scanners
performance_1402_p=Some virus scanners scan files every time they are accessed. It is very important for performance that database files are not scanned for viruses. The database engine does never interprets the data stored in the files as programs, that means even if somebody would store a virus in a database file, this would be harmless (when the virus does not run, it cannot spread). Some virus scanners allow to exclude files by suffix. Make sure files ending with .db are not scanned.
performance_1403_h3=Using the Trace Options
performance_1404_p=If the main performance hot spots are in the database engine, in many cases the performance can be optimized by creating additional indexes, or changing the schema. Sometimes the application does not directly generate the SQL statements, for example if an O/R mapping tool is used. To view the SQL statements and JDBC API calls, you can use the trace options. For more information, see <a href\="features.html\#trace_options">Using the Trace Options</a> .
performance_1405_h3=Index Usage
performance_1406_p=This database uses indexes to improve the performance of SELECT, UPDATE and DELETE statements. If a column is used in the WHERE clause of a query, and if an index exists on this column, then the index can be used. Multi-column indexes are used if all or the first columns of the index are used. Both equality lookup and range scans are supported. Indexes are used to order result sets, but only if the condition uses the same index or no index at all. The results are sorted in memory if required. Indexes are created automatically for primary key and unique constraints. Indexes are also created for foreign key constraints, if required. For other columns, indexes need to be created manually using the CREATE INDEX statement.
performance_1407_h3=Optimizer
performance_1408_p=This database uses a cost based optimizer. For simple and queries and queries with medium complexity (less than 7 tables in the join), the expected cost (running time) of all possible plans is calculated, and the plan with the lowest cost is used. For more complex queries, the algorithm first tries all possible combinations for the first few tables, and the remaining tables added using a greedy algorithm (this works well for most joins). Afterwards a genetic algorithm is used to test at most 2000 distinct plans. Only left-deep plans are evaluated.
performance_1409_h3=Expression Optimization
performance_1410_p=After the statement is parsed, all expressions are simplified automatically if possible. Operations are evaluated only once if all parameters are constant. Functions are also optimized, but only if the function is constant (always returns the same result for the same parameter values). If the WHERE clause is always false, then the table is not accessed at all.
performance_1411_h3=COUNT(*) Optimization
performance_1412_p=If the query only counts all rows of a table, then the data is not accessed. However, this is only possible if no WHERE clause is used, that means it only works for queries of the form SELECT COUNT(*) FROM table.
performance_1413_h3=Updating Optimizer Statistics / Column Selectivity
performance_1414_p=When executing a query, at most one index per joined table can be used. If the same table is joined multiple times, for each join only one index is used. Example\: for the query SELECT * FROM TEST T1, TEST T2 WHERE T1.NAME\='A' AND T2.ID\=T1.ID, two index can be used, in this case the index on NAME for T1 and the index on ID for T2.
performance_1415_p=If a table has multiple indexes, sometimes more than one index could be used. Example\: if there is a table TEST(ID, NAME, FIRSTNAME) and an index on each column, then two indexes could be used for the query SELECT * FROM TEST WHERE NAME\='A' AND FIRSTNAME\='B', the index on NAME or the index on FIRSTNAME. It is not possible to use both indexes at the same time. Which index is used depends on the selectivity of the column. The selectivity describes the 'uniqueness' of values in a column. A selectivity of 100 means each value appears only once, and a selectivity of 1 means the same value appears in many or most rows. For the query above, the index on NAME should be used if the table contains more distinct names than first names.
performance_1416_p=The SQL statement ANALYZE can be used to automatically estimate the selectivity of the columns in the tables. This command should be run from time to time to improve the query plans generated by the optimizer.
performance_1417_h3=Optimization Examples
performance_1418_p=See <code>src/test/org/h2/samples/optimizations.sql</code> for a few examples of queries that benefit from special optimizations built into the database.
performance_1419_h3=Cache Size and Type
performance_1420_p=By default the cache size of H2 is quite small. Consider using a larger cache size, or enable the second level soft reference cache. See also <a href\="features.html\#cache_settings">Cache Settings</a> .
quickstart_1000_h1=Quickstart
quickstart_1001_a=Embedding H2 in an Application
quickstart_1002_a=The H2 Console Application
quickstart_1003_h2=Embedding H2 in an Application
quickstart_1004_p=This database can be used in embedded mode, or in server mode. To use it in embedded mode, you need to\:
quickstart_1005_li=Add the <code>h2*.jar</code> to the classpath (H2 does not have any dependencies)
quickstart_1006_li=Use the JDBC driver class\: <code>org.h2.Driver</code>
quickstart_1007_li=The database URL <code>jdbc\:h2\:~/test</code> opens the database 'test' in your user home directory
quickstart_1008_li=A new database is automatically created
quickstart_1009_h2=The H2 Console Application
quickstart_1010_p=The Console lets you access a SQL database using a browser interface.
quickstart_1011_p=If you don't have Windows XP, or if something does not work as expected, please see the detailed description in the <a href\="tutorial.html">Tutorial</a> .
quickstart_1012_h3=Step-by-Step
quickstart_1013_h4=Installation
quickstart_1014_p=Install the software using the Windows Installer (if you did not yet do that).
quickstart_1015_h4=Start the Console
quickstart_1016_p=Click [Start], [All Programs], [H2], and [H2 Console (Command Line)]\:
quickstart_1017_p=A new console window appears\:
quickstart_1018_p=Also, a new browser page should open with the URL <a href\="http\://localhost\:8082">http\://localhost\:8082</a> . You may get a security warning from the firewall. If you don't want other computers in the network to access the database on your machine, you can let the firewall block these connections. Only local connections are required at this time.
quickstart_1019_h4=Login
quickstart_1020_p=Select [Generic H2] and click [Connect]\:
quickstart_1021_p=You are now logged in.
quickstart_1022_h4=Sample
quickstart_1023_p=Click on the [Sample SQL Script]\:
quickstart_1024_p=The SQL commands appear in the command area.
quickstart_1025_h4=Execute
quickstart_1026_p=Click [Run]
quickstart_1027_p=On the left side, a new entry TEST is added below the database icon. The operations and results of the statements are shown below the script.
quickstart_1028_h4=Disconnect
quickstart_1029_p=Click on [Disconnect]\:
quickstart_1030_p=to close the connection.
quickstart_1031_h4=End
quickstart_1032_p=Close the console window. For more information, see the <a href\="tutorial.html">Tutorial</a> .
roadmap_1000_h1=Roadmap
roadmap_1001_p=New (feature) requests will usually be added at the very end of the list. The priority is increased for important and popular requests. Of course, patches are always welcome, but are not always applied as is. See also <a href\="build.html\#providing_patches">Providing Patches</a> .
roadmap_1002_h2=Priority 1
roadmap_1003_li=Bugfixes
roadmap_1004_li=Page store\: new storage mechanism
roadmap_1005_li=[Requires page store] Support large updates (use the transaction log to undo).
roadmap_1006_li=[Requires page store] Shutdown compact
roadmap_1007_li=Optimize IN(...) for SELECT, DELETE, and UPDATE.
roadmap_1008_li=More tests with MULTI_THREADED\=1
roadmap_1009_li=RECOVER\=1 should automatically recover, \=2 should run the recovery tool if required
roadmap_1010_li=Optimization\: result set caching (like MySQL)
roadmap_1011_li=Server side cursors
roadmap_1012_h2=Priority 2
roadmap_1013_li=Improve test code coverage
roadmap_1014_li=Procedural language / script language (Java, Javascript)
roadmap_1015_li=Fulltext search\: support streaming CLOB data.
roadmap_1016_li=Optimize .. OR .. to IN(..) or UNION if the cost is lower
roadmap_1017_li=Enable warning for 'Local variable declaration hides another field or variable'.
roadmap_1018_li=Test multi-threaded in-memory db access
roadmap_1019_li=MVCC\: Select for update should only lock the selected rows.
roadmap_1020_li=Option to shutdown all the running servers (on the same VM).
roadmap_1021_li=Optimize ID\=? OR ID\=?\: convert to IN(...)
roadmap_1022_li=Index organized tables CREATE TABLE...(...) ORGANIZATION INDEX (store in data file) (probably file format changes are required for rowId)
roadmap_1023_li=Better space re-use in the files after deleting data\: shrink the data file without closing the database (if the end of the file is empty)
roadmap_1024_li=Implement INSTEAD OF trigger (for views, tables, metadata tables).
roadmap_1025_li=Triggers for metadata tables; use for PostgreSQL catalog
roadmap_1026_li=Support triggers for INFORMATION_SCHEMA tables (to better support PostgreSQL catalog\: rebuild after creating new tables)
roadmap_1027_li=Full outer joins
roadmap_1028_li=Maven\: deploy / upload h2..-sources.jar and javadocs as well.
roadmap_1029_li=Support trigger on the tables information_schema.tables and ...columns
roadmap_1030_li=Test very large databases and LOBs (up to 256 GB)
roadmap_1031_li=Support hints for the optimizer (which index to use, enforce the join order).
roadmap_1032_li=Change LOB mechanism (less files, keep index of lob files, point to files and row, delete unused files earlier, maybe bundle files into a tar file)
roadmap_1033_li=Clustering\: recovery needs to becomes fully automatic. Global write lock feature.
roadmap_1034_li=Support mixed clustering mode (one embedded, the other server mode)
roadmap_1035_li=Sequence\: add features [NO] MINVALUE, MAXVALUE, CYCLE
roadmap_1036_li=Deferred integrity checking (DEFERRABLE INITIALLY DEFERRED)
roadmap_1037_li=Groovy Stored Procedures (http\://groovy.codehaus.org/Groovy+SQL)
roadmap_1038_li=Add a migration guide (list differences between databases)
roadmap_1039_li=Migrate database tool (also from other database engines)
roadmap_1040_li=Optimization\: automatic index creation suggestion using the trace file?
roadmap_1041_li=Compression performance\: don't allocate buffers, compress / expand in to out buffer
roadmap_1042_li=Rebuild index functionality to shrink index size and improve performance
roadmap_1043_li=Don't use deleteOnExit (bug 4513817\: File.deleteOnExit consumes memory)
roadmap_1044_li=Console\: add accesskey to most important commands (A, AREA, BUTTON, INPUT, LABEL, LEGEND, TEXTAREA)
roadmap_1045_li=Support nested outer joins (see todo.txt).
roadmap_1046_li=Don't write stack traces for common exceptions like duplicate key to the log by default (exclude list)
roadmap_1047_li=Test performance again with SQL Server, Oracle, DB2
roadmap_1048_li=Test with dbmonster (http\://dbmonster.kernelpanic.pl/)
roadmap_1049_li=Test with dbcopy (http\://dbcopyplugin.sourceforge.net)
roadmap_1050_li=Test with Spatial DB in a box / JTS\: http\://www.opengeospatial.org/standards/sfs - OpenGIS Implementation Specification
roadmap_1051_li=Write more tests and documentation for MVCC (Multi Version Concurrency Control)
roadmap_1052_li=Find a tool to view large text file (larger than 100 MB), with find, page up and down (like less), truncate before / after
roadmap_1053_li=Implement, test, document XAConnection and so on
roadmap_1054_li=Pluggable data type (for compression, validation, conversion, encryption)
roadmap_1055_li=CHECK\: find out what makes CHECK\=TRUE slow, move to CHECK2
roadmap_1056_li=Improve recovery\: improve code for log recovery problems (less try/catch)
roadmap_1057_li=Index usage for (ID, NAME)\=(1, 'Hi'); document
roadmap_1058_li=Suggestion\: include Jetty as Servlet Container (like LAMP)
roadmap_1059_li=Trace shipping to server
roadmap_1060_li=Version check\: docs / web console (using Javascript), and maybe in the library (using TCP/IP)
roadmap_1061_li=Web server classloader\: override findResource / getResourceFrom
roadmap_1062_li=Cost for embedded temporary view is calculated wrong, if result is constant
roadmap_1063_li=Comparison\: pluggable sort order\: natural sort
roadmap_1064_li=Count index range query (count(*) where id between 10 and 20)
roadmap_1065_li=Eclipse plugin
roadmap_1066_li=Asynchronous queries to support publish/subscribe\: SELECT ... FOR READ WAIT [maxMillisToWait]
roadmap_1067_li=Fulltext search Lucene\: analyzer configuration.
roadmap_1068_li=Fulltext search (native)\: reader / tokenizer / filter.
roadmap_1069_li=Linked schema using CSV files\: one schema for a directory of files; support indexes for CSV files
roadmap_1070_li=iReport to support H2
roadmap_1071_li=Implement missing JDBC API (CallableStatement,...)
roadmap_1072_li=Compression of the cache
roadmap_1073_li=Include SMPT (mail) server (at least client) (alert on cluster failure, low disk space,...)
roadmap_1074_li=Drop with restrict (currently cascade is the default)
roadmap_1075_li=JSON parser and functions
roadmap_1076_li=Automatic collection of statistics (auto ANALYZE)
roadmap_1077_li=Server\: client ping from time to time (to avoid timeout - is timeout a problem?)
roadmap_1078_li=Copy database\: Tool with config GUI and batch mode, extensible (example\: compare)
roadmap_1079_li=Document, implement tool for long running transactions using user-defined compensation statements.
roadmap_1080_li=Support SET TABLE DUAL READONLY
roadmap_1081_li=GCJ\: what is the state now?
roadmap_1082_li=Events for\: Database Startup, Connections, Login attempts, Disconnections, Prepare (after parsing), Web Server (see http\://docs.openlinksw.com/virtuoso/fn_dbev_startup.html)
roadmap_1083_li=Optimization\: Log compression
roadmap_1084_li=Support standard INFORMATION_SCHEMA tables, as defined in http\://www.contrib.andrew.cmu.edu/~shadow/sql/sql1992.txt; specially KEY_COLUMN_USAGE (http\://dev.mysql.com/doc/refman/5.0/en/information-schema.html, http\://www.xcdsql.org/Misc/INFORMATION_SCHEMA%20With%20Rolenames.gif)
roadmap_1085_li=Compatibility\: in MySQL, HSQLDB, /0.0 is NULL; in PostgreSQL, Derby\: Division by zero
roadmap_1086_li=Functional tables should accept parameters from other tables (see FunctionMultiReturn) SELECT * FROM TEST T, P2C(T.A, T.R)
roadmap_1087_li=Custom class loader to reload functions on demand
roadmap_1088_li=Test http\://mysql-je.sourceforge.net/
roadmap_1089_li=Close all files when closing the database (including LOB files that are open on the client side)
roadmap_1090_li=EXE file\: maybe use http\://jsmooth.sourceforge.net
roadmap_1091_li=Performance\: Automatically build in-memory indexes if the whole table is in memory
roadmap_1092_li=H2 Console\: The webclient could support more features like phpMyAdmin.
roadmap_1093_li=Use Janino to convert Java to C++
roadmap_1094_li=The HELP information schema can be directly exposed in the Console
roadmap_1095_li=Maybe use the 0x1234 notation for binary fields, see MS SQL Server
roadmap_1096_li=Support Oracle CONNECT BY in some way\: http\://www.adp-gmbh.ch/ora/sql/connect_by.html, http\://philip.greenspun.com/sql/trees.html
roadmap_1097_li=SQL Server 2005, Oracle\: Support COUNT(*) OVER(). See http\://www.orafusion.com/art_anlytc.htm
roadmap_1098_li=RANK() and DENSE_RANK(), Partition using OVER()
roadmap_1099_li=SQL 2003 (http\://www.wiscorp.com/sql_2003_standard.zip)
roadmap_1100_li=Version column (number/sequence and timestamp based)
roadmap_1101_li=Optimize getGeneratedKey\: send last identity after each execute (server).
roadmap_1102_li=Test and document UPDATE TEST SET (ID, NAME) \= (SELECT ID*10, NAME || '\!' FROM TEST T WHERE T.ID\=TEST.ID);
roadmap_1103_li=Max memory rows / max undo log size\: use block count / row size not row count
roadmap_1104_li=Support 123L syntax as in Java; example\: SELECT (2000000000*2)
roadmap_1105_li=Implement point-in-time recovery
roadmap_1106_li=LIKE\: improved version for larger texts (currently using naive search)
roadmap_1107_li=Automatically convert to the next 'higher' data type whenever there is an overflow.
roadmap_1108_li=Throw an exception when the application calls getInt on a Long (optional)
roadmap_1109_li=Default date format for input and output (local date constants)
roadmap_1110_li=Support custom Collators
roadmap_1111_li=Document ROWNUM usage for reports\: SELECT ROWNUM, * FROM (subquery)
roadmap_1112_li=Clustering\: Reads should be randomly distributed or to a designated database on RAM
roadmap_1113_li=Clustering\: When a database is back alive, automatically synchronize with the master
roadmap_1114_li=Standalone tool to get relevant system properties and add it to the trace output.
roadmap_1115_li=Support 'call proc(1\=value)' (PostgreSQL, Oracle)
roadmap_1116_li=JAMon (proxy jdbc driver)
roadmap_1117_li=Console\: Improve editing data (Tab, Shift-Tab, Enter, Up, Down, Shift+Del?)
roadmap_1118_li=Console\: Autocomplete Ctrl+Space inserts template
roadmap_1119_li=Simplify translation ('Donate a translation')
roadmap_1120_li=Option to encrypt .trace.db file
roadmap_1121_li=Write Behind Cache on SATA leads to data corruption See also http\://sr5tech.com/write_back_cache_experiments.htm and http\://www.jasonbrome.com/blog/archives/2004/04/03/writecache_enabled.html
roadmap_1122_li=Functions with unknown return or parameter data types\: serialize / deserialize
roadmap_1123_li=Test if idle TCP connections are closed, and how to disable that
roadmap_1124_li=Try using a factory for Row, Value[] (faster?), http\://javolution.org/, alternative ObjectArray / IntArray
roadmap_1125_li=Auto-Update feature for database, .jar file
roadmap_1126_li=ResultSet SimpleResultSet.readFromURL(String url)\: id varchar, state varchar, released timestamp
roadmap_1127_li=ROW_NUMBER (not the same as ROWNUM)
roadmap_1128_li=Partial indexing (see PostgreSQL)
roadmap_1129_li=The build should fail if the test fails
roadmap_1130_li=Add GUI to build a custom version (embedded, fulltext,...) using build flags
roadmap_1131_li=http\://rubyforge.org/projects/hypersonic/
roadmap_1132_li=Add comparator (x \=\=\= y) \: (x \= y or (x is null and y is null))
roadmap_1133_li=Try to create trace file even for read only databases
roadmap_1134_li=Add a sample application that runs the H2 unit test and writes the result to a file (so it can be included in the user app)
roadmap_1135_li=Count on a column that can not be null could be optimized to COUNT(*)
roadmap_1136_li=Table order\: ALTER TABLE TEST ORDER BY NAME DESC (MySQL compatibility)
roadmap_1137_li=Backup tool should work with other databases as well
roadmap_1138_li=Console\: -ifExists doesn't work for the console. Add a flag to disable other dbs
roadmap_1139_li=Performance\: Update in-place
roadmap_1140_li=Check if 'FSUTIL behavior set disablelastaccess 1' improves the performance (fsutil behavior query disablelastaccess)
roadmap_1141_li=Java static code analysis\: http\://pmd.sourceforge.net/
roadmap_1142_li=Java static code analysis\: http\://www.eclipse.org/tptp/
roadmap_1143_li=Compatibility for CREATE SCHEMA AUTHORIZATION
roadmap_1144_li=Implement Clob / Blob truncate and the remaining functionality
roadmap_1145_li=Maybe close LOBs after closing connection
roadmap_1146_li=Tree join functionality
roadmap_1147_li=Support alter table add column if table has views defined
roadmap_1148_li=Add multiple columns at the same time with ALTER TABLE .. ADD .. ADD ..
roadmap_1149_li=Add H2 to Gem (Ruby install system)
roadmap_1150_li=API for functions / user tables
roadmap_1151_li=Order conditions inside AND / OR to optimize the performance
roadmap_1152_li=Support linked JCR tables
roadmap_1153_li=Make sure H2 is supported by Execute Query\: http\://executequery.org/
roadmap_1154_li=Read InputStream when executing, as late as possible (maybe only embedded mode). Problem with re-execute.
roadmap_1155_li=Native fulltext search\: min word length; store word positions
roadmap_1156_li=Store dates in local time zone (portability of database files)
roadmap_1157_li=Recursive Queries (see details)
roadmap_1158_li=Add an option to the SCRIPT command to generate only portable / standard SQL
roadmap_1159_li=Test Dezign for Databases (http\://www.datanamic.com)
roadmap_1160_li=Fast library for parsing / formatting\: http\://javolution.org/
roadmap_1161_li=Updatable Views (simple cases first)
roadmap_1162_li=Improve create index performance
roadmap_1163_li=Implement more JDBC 4.0 features
roadmap_1164_li=Support TRANSFORM / PIVOT as in MS Access
roadmap_1165_li=SELECT * FROM (VALUES (...), (...), ....) AS alias(f1, ...)
roadmap_1166_li=Support updatable views with join on primary keys (to extend a table)
roadmap_1167_li=Public interface for functions (not public static)
roadmap_1168_li=Autocomplete\: if I type the name of a table that does not exist (should say\: syntax not supported)
roadmap_1169_li=Document FTP server, including -ftpTask option to execute / kill remote processes
roadmap_1170_li=Eliminate undo log records if stored on disk (just one pointer per block, not per record)
roadmap_1171_li=Feature matrix like in <a href\="http\://www.inetsoftware.de/products/jdbc/mssql/features/default.asp">i-net software</a> .
roadmap_1172_li=Updatable result set on table without primary key or unique index
roadmap_1173_li=Use LinkedList instead of ArrayList where applicable
roadmap_1174_li=Optimizer\: use an index for IS NULL and IS NOT NULL (including linked tables).  ID IS NOT NULL could be converted to ID >\= Integer.MIN_VALUE.
roadmap_1175_li=Support % operator (modulo)
roadmap_1176_li=Support 1+'2'\=3, '1'+'2'\='12' (MS SQL Server compatibility)
roadmap_1177_li=Support nested transactions
roadmap_1178_li=Add a benchmark for big databases, and one for many users
roadmap_1179_li=Compression in the result set (repeating values in the same column) over TCP/IP
roadmap_1180_li=Support curtimestamp (like curtime, curdate)
roadmap_1181_li=Support ANALYZE {TABLE|INDEX} tableName COMPUTE|ESTIMATE|DELETE STATISTICS ptnOption options
roadmap_1182_li=Support Sequoia (Continuent.org)
roadmap_1183_li=Dynamic length numbers / special methods for DataPage.writeByte / writeShort / Ronni Nielsen
roadmap_1184_li=Pluggable ThreadPool, (AvalonDB / deebee / Paul Hammant)
roadmap_1185_li=Release locks (shared or exclusive) on demand
roadmap_1186_li=Support OUTER UNION
roadmap_1187_li=Support parameterized views (similar to CSVREAD, but using just SQL for the definition)
roadmap_1188_li=A way (JDBC driver) to map an URL (jdbc\:h2map\:c1) to a connection object
roadmap_1189_li=Option for SCRIPT to only process one or a set of tables, and append to a file
roadmap_1190_li=Support linked tables to the current database
roadmap_1191_li=Support dynamic linked schema (automatically adding/updating/removing tables)
roadmap_1192_li=Compatibility with Derby\: VALUES(1), (2); SELECT * FROM (VALUES (1), (2)) AS myTable(c1)
roadmap_1193_li=Compatibility\: \# is the start of a single line comment (MySQL) but date quote (Access). Mode specific
roadmap_1194_li=Run benchmarks with JDK 1.5, JDK 1.6, java -server
roadmap_1195_li=Optimizations\: Faster hash function for strings, byte arrays
roadmap_1196_li=DatabaseEventListener\: callback for all operations (including expected time, RUNSCRIPT) and cancel functionality
roadmap_1197_li=H2 Console / large result sets\: use 'streaming' instead of building the page in-memory
roadmap_1198_li=Benchmark\: add a graph to show how databases scale (performance/database size)
roadmap_1199_li=Implement a SQLData interface to map your data over to a custom object
roadmap_1200_li=In the MySQL and PostgreSQL mode, use lower case identifiers by default (DatabaseMetaData.storesLowerCaseIdentifiers \= true)
roadmap_1201_li=Make DDL (Data Definition) operations transactional
roadmap_1202_li=Allow execution time prepare for SELECT * FROM CSVREAD(?, 'columnNameString')
roadmap_1203_li=Support multiple directories (on different hard drives) for the same database
roadmap_1204_li=Server protocol\: use challenge response authentication, but client sends hash(user+password) encrypted with response
roadmap_1205_li=Support EXEC[UTE] (doesn't return a result set, compatible to MS SQL Server)
roadmap_1206_li=Support native XML data type
roadmap_1207_li=Support triggers with a string property or option\: SpringTrigger, OSGITrigger
roadmap_1208_li=Clustering\: adding a node should be very fast and without interrupting clients (very short lock)
roadmap_1209_li=Support materialized views (using triggers)
roadmap_1210_li=Ability to resize the cache array when resizing the cache
roadmap_1211_li=Time based cache writing (one second after writing the log)
roadmap_1212_li=Check state of H2 driver for DDLUtils\: https\://issues.apache.org/jira/browse/DDLUTILS-185
roadmap_1213_li=Index usage for REGEXP LIKE.
roadmap_1214_li=Compatibility\: add a role DBA (like ADMIN).
roadmap_1215_li=Better support multiple processors for in-memory databases.
roadmap_1216_li=Access rights\: remember the owner of an object. COMMENT\: allow owner of object to change it.
roadmap_1217_li=Access rights\: Finer grained access control (grant access for specific functions)
roadmap_1218_li=Support N'text'
roadmap_1219_li=Support SCOPE_IDENTITY() to avoid problems when inserting rows in a trigger
roadmap_1220_li=Set a connection read only (Connection.setReadOnly)
roadmap_1221_li=In MySQL mode, for AUTO_INCREMENT columns, don't set the primary key
roadmap_1222_li=Use JDK 1.4 file locking to create the lock file (but not yet by default); writing a system property to detect concurrent access from the same VM (different classloaders).
roadmap_1223_li=Support compatibility for jdbc\:hsqldb\:res\:
roadmap_1224_li=Provide an Java SQL builder with standard and H2 syntax
roadmap_1225_li=Trace\: write OS, file system, JVM,... when opening the database
roadmap_1226_li=Support indexes for views (probably requires materialized views)
roadmap_1227_li=Document SET SEARCH_PATH, BEGIN, EXECUTE, parameters
roadmap_1228_li=Browser\: use Desktop.isDesktopSupported and browse when using JDK 1.6
roadmap_1229_li=Server\: use one listener (detect if the request comes from an PG or TCP client)
roadmap_1230_li=Store dates as 'local'. Existing files use GMT. Use escape syntax for compatibility.
roadmap_1231_li=Support data type INTERVAL
roadmap_1232_li=Optimize SELECT MIN(ID), MAX(ID), COUNT(*) FROM TEST WHERE ID BETWEEN 100 AND 200
roadmap_1233_li=Support Oracle functions\: TRUNC, NVL2, TO_CHAR, TO_DATE, TO_NUMBER
roadmap_1234_li=Sequence\: PostgreSQL compatibility (rename, create) (http\://www.postgresql.org/docs/8.2/static/sql-altersequence.html)
roadmap_1235_li=DISTINCT\: Support large result sets by sorting on all columns (additionally) and then removing duplicates.
roadmap_1236_li=File system that writes to two file systems (replicating file system)
roadmap_1237_li=File system with a background writer thread; test if this is faster
roadmap_1238_li=FTP access to a database (.csv for a table, a directory for a schema, a file for a lob, a script.sql file).
roadmap_1239_li=Better document the source code
roadmap_1240_li=Support select * from dual a left join dual b on b.x\=(select max(x) from dual)
roadmap_1241_li=Optimization\: don't lock when the database is read-only
roadmap_1242_li=Integrate spatial functions from http\://geosysin.iict.ch/irstv-trac/wiki/H2spatial/Download
roadmap_1243_li=Support COSH, SINH, and TANH functions
roadmap_1244_li=FTP Server\: Implement SFTP / FTPS
roadmap_1245_li=Native search\: support "phrase search", wildcard search (* and ?), case-insensitive search, boolean operators, and grouping
roadmap_1246_li=Improve documentation of access rights
roadmap_1247_li=Support ENUM data type (see MySQL, PostgreSQL, MS SQL Server, maybe others)
roadmap_1248_li=Command line option for the H2 Console and TCP configuration (which .h2.server.properties and .h2.keystore to use)
roadmap_1249_li=Support a schema name for Java functions
roadmap_1250_li=Remember the user defined data type (domain) of a column
roadmap_1251_li=Support Jackcess (MS Access databases)
roadmap_1252_li=Built-in methods to write large objects (BLOB and CLOB)\: FILE_WRITE('test.txt', 'Hello World')
roadmap_1253_li=MVCC\: support transactionally consistent backups using SCRIPT
roadmap_1254_li=Improve time to open large databases (see mail 'init time for distributed setup')
roadmap_1255_li=Move Maven 2 repository from hsql.sf.net to h2database.sf.net
roadmap_1256_li=Java 1.5 tool\: JdbcUtils.closeSilently(s1, s2,...)
roadmap_1257_li=Javadoc\: document design patterns used
roadmap_1258_li=Does the FTP server has problems with multithreading?
roadmap_1259_li=Write an article about SQLInjection (h2\\src\\docsrc\\html\\images\\SQLInjection.txt)
roadmap_1260_li=Convert SQL-injection-2.txt to html document, include SQLInjection.java sample
roadmap_1261_li=Improve LOB in directories performance
roadmap_1262_li=Web site design\: http\://www.igniterealtime.org/projects/openfire/index.jsp
roadmap_1263_li=HSQLDB compatibility\: Openfire server uses\: CREATE SCHEMA PUBLIC AUTHORIZATION DBA;  CREATE USER SA PASSWORD ""; GRANT DBA TO SA; SET SCHEMA PUBLIC
roadmap_1264_li=Web site\: Rename Performance to Comparison [/Compatibility],  move Comparison to Other Database Engines to Comparison,  move Products that Work with H2 to Comparison,  move Performance Tuning to Advanced Topics
roadmap_1265_li=Support JMX\: Create an MBean for each database and server (support JConsole).  See http\://thedevcloud.blogspot.com/2008/10/displaying-hsql-database-manager-in.html
roadmap_1266_li=Translation\: use ?? in help.csv
roadmap_1267_li=Translated .pdf
roadmap_1268_li=Cluster\: hot deploy (adding a node at runtime)
roadmap_1269_li=MySQL compatibility\: update test1 t1, test2 t2 set t1.id \= t2.id where t1.id \= t2.id;
roadmap_1270_li=Recovery tool\: bad blocks should be converted to INSERT INTO SYSTEM_ERRORS(...), and things should go into the .trace.db file
roadmap_1271_li=RECOVER\=2 to backup the database, run recovery, open the database
roadmap_1272_li=Recovery should work with encrypted databases
roadmap_1273_li=Corruption\: new error code, add help
roadmap_1274_li=Space reuse\: after init, scan all storages and free those that don't belong to a live database object
roadmap_1275_li=SysProperties\: change everything to H2_...
roadmap_1276_li=Use FilterIn / FilterOut putStream?
roadmap_1277_li=Access rights\: add missing features (users should be 'owner' of objects; missing rights for sequences; dropping objects)
roadmap_1278_li=Support NOCACHE table option (Oracle)
roadmap_1279_li=Index usage for UPDATE ... WHERE .. IN (SELECT...)
roadmap_1280_li=Add regular javadocs (using the default doclet, but another css) to the homepage.
roadmap_1281_li=The database should be kept open for a longer time when using the server mode.
roadmap_1282_li=Javadocs\: for each tool, add a copy &amp; paste sample in the class level.
roadmap_1283_li=Javadocs\: add @author tags.
roadmap_1284_li=Fluent API for tools\: Server.createTcpServer().setPort(9081).setPassword(password).start();
roadmap_1285_li=MySQL compatibility\: real SQL statement for DESCRIBE TEST
roadmap_1286_li=Use a default delay of 1 second before closing a database.
roadmap_1287_li=Write (log) to system table before adding to internal data structures.
roadmap_1288_li=Support very large deletes and updates.
roadmap_1289_li=Doclet (javadocs)\: constructors are not listed.
roadmap_1290_li=Support direct lookup for MIN and MAX when using WHERE (see todo.txt / Direct Lookup).
roadmap_1291_li=Support other array types (String[], double[]) in PreparedStatement.setObject(int, Object);
roadmap_1292_li=MVCC should not be memory bound (uncommitted data is kept in memory in the delta index; maybe using a regular btree index solves the problem).
roadmap_1293_li=Oracle compatibility\: support NLS_DATE_FORMAT.
roadmap_1294_li=Support flashback queries as in Oracle.
roadmap_1295_li=Import / Export of fixed with text files.
roadmap_1296_li=Support OUT parameters in user-defined procedures.
roadmap_1297_li=Support getGeneratedKeys to return multiple rows when used with batch updates.  This is supported by MySQL, but not Derby. Both PostgreSQL and HSQLDB don't support getGeneratedKeys.  Also support it when using INSERT ... SELECT.
roadmap_1298_li=HSQLDB compatibility\: automatic data type for SUM if value is the value is too big (by default use the same type as the data).
roadmap_1299_li=Improve the optimizer to select the right index for special cases\: where id between 2 and 4 and booleanColumn
roadmap_1300_li=Linked tables\: make hidden columns available (Oracle\: rowid and ora_rowscn columns).
roadmap_1301_li=Support merge join.
roadmap_1302_li=H2 Console\: in-place autocomplete.
roadmap_1303_li=Oracle\: support DECODE method (convert to CASE WHEN).
roadmap_1304_li=Support large databases\: split LOB (BLOB, CLOB) to multiple directories / disks (similar to tablespaces).
roadmap_1305_li=Support to assign a primary key index a user defined name.
roadmap_1306_li=Cluster\: Add feature to make sure cluster nodes can not get out of sync (for example by stopping one process).
roadmap_1307_li=H2 Console\: support configuration option for fixed width (monospace) font.
roadmap_1308_li=Native fulltext search\: support analyzers (specially for Chinese, Japanese).
roadmap_1309_li=Automatically compact databases from time to time (as a background process).
roadmap_1310_li=Support SCOPE_IDENTITY().
roadmap_1311_li=Support GRANT SELECT, UPDATE ON *.
roadmap_1312_li=Test Eclipse DTP.
roadmap_1313_li=H2 Console\: autocomplete\: keep the previous setting
roadmap_1314_li=MySQL, MS SQL Server compatibility\: support case sensitive (mixed case) identifiers without quotes.
roadmap_1315_li=executeBatch\: option to stop at the first failed statement.
roadmap_1316_li=Implement OLAP features as described here\: http\://www.devx.com/getHelpOn/10MinuteSolution/16573/0/page/5
roadmap_1317_li=Support Oracle ROWID (unique identifier for each row).
roadmap_1318_li=Server mode\: Improve performance for batch updates.
roadmap_1319_li=Applets\: Support read-only databases in a zip file (accessed as a resource).
roadmap_1320_li=Long running queries / errors / trace system table.
roadmap_1321_li=H2 Console should support JaQu directly.
roadmap_1322_li=H2 Console\: support single file upload and directory download (optional).
roadmap_1323_li=Document FTL_SEARCH, FTL_SEARCH_DATA.
roadmap_1324_li=Sequences\: CURRVAL should be session specific. Compatibility with PostgreSQL.
roadmap_1325_li=Support DatabaseMetaData.insertsAreDetected\: updatable result sets should detect inserts.
roadmap_1326_li=Auto-server\: add option to define the IP address range or list.
roadmap_1327_li=Index creation only using deterministic functions.
roadmap_1328_li=Use http\://recaptcha.net somehow to secure the Google Group.
roadmap_1329_li=Support DELETE with TOP or LIMIT. See also\: http\://dev.mysql.com/doc/refman/5.1/de/delete.html
roadmap_1330_li=Change the default for NULL || 'x' to return NULL
roadmap_1331_li=ANALYZE\: Use a bloom filter for each indexed column to estimate count of distinct values.
roadmap_1332_li=ANALYZE\: For unique indexes that allow null, count the number of null.
roadmap_1333_li=AUTO_SERVER\: support changing IP addresses (disable a network while the database is open).
roadmap_1334_li=Avoid using java.util.Calendar internally because it's slow, complicated, and seems to be buggy.
roadmap_1335_li=Support TRUNCATE .. CASCADE like PostgreSQL.
roadmap_1336_li=Support opening a database that is in the classpath, maybe using a new file system.
roadmap_1337_li=Fulltext search\: lazy result generation using SimpleRowSource.
roadmap_1338_li=Support transformation to join for user defined functions, as for IN(SELECT...).
roadmap_1339_li=Fulltext search\: Support alternative syntax\: WHERE FTL_CONTAINS(name, 'hello').
roadmap_1340_li=MySQL compatibility\: support REPLACE, see http\://dev.mysql.com/doc/refman/5.1/de/replace.html
roadmap_1341_li=MySQL compatibility\: support INSERT INTO table SET column1 \= value1, column2 \= value2
roadmap_1342_li=Docs\: Add a one line description for each functions and SQL statements at the top (in the link section).
roadmap_1343_li=Javadoc search\: weight for titles should be higher ('random' should list Functions as the best match).
roadmap_1344_li=Replace information_schema tables with regular tables that are automatically re-built when needed. Use indexes.
roadmap_1345_li=Support a special trigger on all tables.
roadmap_1346_li=Delete temporary files or objects using finalize.
roadmap_1347_li=Oracle compatibility\: support calling 0-parameters functions without parenthesis. Make constants obsolete.
roadmap_1348_li=MySQL, HSQLDB compatibility\: support where 'a'\=1 (not supported by Derby, PostgreSQL)
roadmap_1349_li=Allow calling function with no parameters without parenthesis. See http\://code.google.com/p/h2database/issues/detail?id\=50
roadmap_1350_li=CSV\: currently \# is a line comment and can start at any field. Make it optional.
roadmap_1351_li=Add database creation date and time to the database.
roadmap_1352_li=Support ASSERTIONS.
roadmap_1353_li=MySQL compatibility\: support comparing 1\='a'
roadmap_1354_li=Support PostgreSQL lock modes\: http\://www.postgresql.org/docs/8.3/static/explicit-locking.html
roadmap_1355_li=PostgreSQL compatibility\: test DbVisualizer and Squirrel SQL using a new PostgreSQL JDBC driver.
roadmap_1356_li=RunScript should be able to read from system in (or quite mode for Shell).
roadmap_1357_li=Natural join\: support select x from dual natural join dual.
roadmap_1358_li=Natural join\: somehow support this\: select a.x, b.x, x from dual a natural join dual b
roadmap_1359_li=MySQL compatibility\: for auto_increment columns, convert 0 to next value (as when inserting NULL).
roadmap_1360_li=Functions\: support hashcode(value); cryptographic and fast
roadmap_1361_li=Serialized file lock\: support long running queries.
roadmap_1362_li=Network\: use 127.0.0.1 if other addresses don't work.
roadmap_1363_li=Select for update in mvcc mode\: only lock the selected records.
roadmap_1364_li=Support reading JCR data\: one table per node type; query table; cache option
roadmap_1365_li=OSGi\: create a sample application, test, document.
roadmap_1366_li=help.csv\: use complete examples for functions; run as test case.
roadmap_1367_li=Re-implement PooledConnection; use a lightweight connection object.
roadmap_1368_li=Doclet\: convert tests in javadocs to a java class.
roadmap_1369_li=Doclet\: format fields like methods, but support sorting by name and value.
roadmap_1370_li=Doclet\: shrink the html files.
roadmap_1371_li=Finer granularity for SLF4J trace - See http\://code.google.com/p/h2database/issues/detail?id\=62
roadmap_1372_li=MySQL compatibility\: support REPLACE - See http\://code.google.com/p/h2database/issues/detail?id\=73
roadmap_1373_li=MySQL compatibility\: support SET NAMES 'latin1' - See also http\://code.google.com/p/h2database/issues/detail?id\=56
roadmap_1374_li=MySQL compatibility\: DELETE .. FROM .. USING - See http\://dev.mysql.com/doc/refman/5.0/en/delete.html
roadmap_1375_li=Allow to scan index backwards starting with a value (to better support ORDER BY DESC).
roadmap_1376_li=Java Service Wrapper\: try http\://yajsw.sourceforge.net/
roadmap_1377_li=Batch parameter for INSERT, UPDATE, and DELETE, and commit after each batch. See also MySQL DELETE.
roadmap_1378_li=MySQL compatibility\: support ALTER TABLE .. MODIFY COLUMN.
roadmap_1379_li=Use a lazy and auto-close input stream (open resource when reading, close on eof).
roadmap_1380_li=PostgreSQL compatibility\: generate_series.
roadmap_1381_li=Connection pool\: 'reset session' command (delete temp tables, rollback, autocommit true).
roadmap_1382_li=Improve SQL documentation, see http\://www.w3schools.com/sql/
roadmap_1383_li=MySQL compatibility\: DatabaseMetaData.stores*() methods should return the same values. Test with SquirrelSQL.
roadmap_1384_li=Support table partitioning.
roadmap_1385_li=MS SQL Server compatibility\: support DATEPART syntax.
roadmap_1386_li=Oracle compatibility\: support CREATE OR REPLACE VIEW syntax.
roadmap_1387_h2=Not Planned
roadmap_1388_li=HSQLDB (did) support this\: select id i from test where i&lt;0 (other databases don't). Supporting it may break compatibility.
roadmap_1389_li=String.intern (so that Strings can be compared with \=\=) will not be used because some VMs have problems when used extensively.
search_1000_b=Search\:
search_1001_td=Highlight keyword(s)
search_1002_a=Home
search_1003_a=Quickstart
search_1004_a=Installation
search_1005_a=Tutorial
search_1006_a=Features
search_1007_a=Performance
search_1008_a=Advanced Topics
search_1009_a=JaQu
search_1010_a=Download
search_1011_b=Reference
search_1012_a=SQL Grammar
search_1013_a=Functions
search_1014_a=Data Types
search_1015_a=Javadoc
search_1016_a=Docs as PDF (1 MB)
search_1017_a=Error Analyzer
search_1018_b=Appendix
search_1019_a=Build
search_1020_a=History &amp; Roadmap
search_1021_a=Links
search_1022_a=FAQ
search_1023_a=License
sourceError_1000_h1=Online Error Analyzer
sourceError_1001_a=Home
sourceError_1002_a=Input
sourceError_1003_h2=&nbsp; <a href\="javascript\:select('details')" id\="detailsTab">Details</a> &nbsp; <a href\="javascript\:select('source')" id\="sourceTab">Source Code</a>
sourceError_1004_p=Fill in the error message and stack trace and click on 'Details' or 'Source Code'\:
sourceError_1005_b=Error Code\:
sourceError_1006_b=Product Version\:
sourceError_1007_b=Message\:
sourceError_1008_b=More Information\:
sourceError_1009_b=Stack Trace\:
sourceError_1010_b=Source File\:
sourceError_1011_p=Raw file
sourceError_1012_p=(fast; only Firefox)
tutorial_1000_h1=Tutorial
tutorial_1001_a=Starting and Using the H2 Console
tutorial_1002_a=Settings of the H2 Console
tutorial_1003_a=Connecting to a Database using JDBC
tutorial_1004_a=Creating New Databases
tutorial_1005_a=Using the Server
tutorial_1006_a=Using Hibernate
tutorial_1007_a=Using TopLink and Glassfish
tutorial_1008_a=Using Databases in Web Applications
tutorial_1009_a=CSV (Comma Separated Values) Support
tutorial_1010_a=Upgrade, Backup, and Restore
tutorial_1011_a=Command Line Tools
tutorial_1012_a=Using OpenOffice Base
tutorial_1013_a=Java Web Start / JNLP
tutorial_1014_a=Using a Connection Pool
tutorial_1015_a=Fulltext Search
tutorial_1016_a=User-Defined Variables
tutorial_1017_a=Date and Time
tutorial_1018_a=Using Spring
tutorial_1019_h2=Starting and Using the H2 Console
tutorial_1020_p=The H2 Console application lets you access a SQL database using a browser interface. This can be a H2 database, or another database that supports the JDBC API.
tutorial_1021_p=This is a client / server application, so both a server and a client (a browser) are required to run it.
tutorial_1022_p=Depending on your platform and environment, there are multiple ways to start the application\:
tutorial_1023_th=OS
tutorial_1024_th=Start
tutorial_1025_td=Windows
tutorial_1026_td=Click [Start], [All Programs], [H2], and [H2 Console (Command Line)]
tutorial_1027_td=When using the Sun JDK 1.4 or 1.5, a window with the title 'H2 Console ' should appear.  When using the Sun JDK 1.6, an icon will be added to the system tray\:
tutorial_1028_td=If you don't get the window and the system tray icon,  then maybe Java is not installed correctly (in this case, try another way to start the application).  A browser window should open and point to the Login page at http\://localhost\:8082 .
tutorial_1029_td=Windows
tutorial_1030_td=Open a file browser, navigate to h2/bin, and double click on h2.bat.
tutorial_1031_td=A console window appears. If there is a problem, you will see an error message  in this window. A browser window will open and point to the Login page  (URL\: http\://localhost\:8082).
tutorial_1032_td=Any
tutorial_1033_td=Double click on the h2*.jar file.  This only works if the .jar suffix is associated with java.
tutorial_1034_td=Any
tutorial_1035_td=Open a console window, navigate to the directory 'h2/bin' and type\:
tutorial_1036_h3=Firewall
tutorial_1037_p=If you start the server, you may get a security warning from the firewall (if you have installed one). If you don't want other computers in the network to access the application on your machine, you can let the firewall block those connections. The connection from the local machine will still work. Only if you want other computers to access the database on this computer, you need allow remote connections in the firewall.
tutorial_1038_p=It has been reported that when using Kaspersky 7.0 with firewall, the H2 Console is very slow when connecting over the IP address. A workaround is to connect using localhost, however this only works on the local machine.
tutorial_1039_p=A small firewall is already built into the server\: other computers may not connect to the server by default. To change this, go to 'Preferences' and select 'Allow connections from other computers'.
tutorial_1040_h3=Testing Java
tutorial_1041_p=To find out which version of Java is installed, open a command prompt and type\:
tutorial_1042_p=If you get an error message, you may need to add the Java binary directory to the path environment variable.
tutorial_1043_h3=Error Message 'Port may be in use'
tutorial_1044_p=You can only start one instance of the H2 Console, otherwise you will get the following error message\: <code>The Web server could not be started. Possible cause\: another server is already running...</code> . It is possible to start multiple console applications on the same computer (using different ports), but this is usually not required as the console supports multiple concurrent connections.
tutorial_1045_h3=Using another Port
tutorial_1046_p=If the port is in use by another application, you may want to start the H2 Console on a different port. This can be done by changing the port in the file .h2.server.properties. This file is stored in the user directory (for Windows, this is usually in "Documents and Settings/&lt;username&gt;"). The relevant entry is webPort.
tutorial_1047_h3=Connecting to the Server using a Browser
tutorial_1048_p=If the server started successfully, you can connect to it using a web browser. JavaScript needs to be enabled. If you started the server on the same computer as the browser, open the URL http\://localhost\:8082 . If you want to connect to the application from another computer, you need to provide the IP address of the server, for example\: http\://192.168.0.2\:8082 . If you enabled SSL on the server side, the URL needs to start with https\:// .
tutorial_1049_h3=Multiple Concurrent Sessions
tutorial_1050_p=Multiple concurrent browser sessions are supported. As that the database objects reside on the server, the amount of concurrent work is limited by the memory available to the server application.
tutorial_1051_h3=Login
tutorial_1052_p=At the login page, you need to provide connection information to connect to a database. Set the JDBC driver class of your database, the JDBC URL, user name and password. If you are done, click [Connect].
tutorial_1053_p=You can save and reuse previously saved settings. The settings are stored in a properties file (see <a href\="\#console_settings">Settings of the H2 Console</a> ).
tutorial_1054_h3=Error Messages
tutorial_1055_p=Error messages in are shown in red. You can show/hide the stack trace of the exception by clicking on the message.
tutorial_1056_h3=Adding Database Drivers
tutorial_1057_p=Additional database drivers can be registered by adding the Jar file location of the driver to the environment variables H2DRIVERS or CLASSPATH. Example (Windows)\: To add the database driver library C\:\\Programs\\hsqldb\\lib\\hsqldb.jar, set the environment variable H2DRIVERS to C\:\\Programs\\hsqldb\\lib\\hsqldb.jar.
tutorial_1058_p=Multiple drivers can be set; each entry needs to be separated with a ';' (Windows) or '\:' (other operating systems). Spaces in the path names are supported. The settings must not be quoted.
tutorial_1059_h3=Using the H2 Console
tutorial_1060_p=The H2 Console application has three main panels\: the toolbar on top, the tree on the left, and the query / result panel on the right. The database objects (for example, tables) are listed on the left panel. Type in a SQL command on the query panel and click 'Run'. The result of the command appears just below the command.
tutorial_1061_h3=Inserting Table Names or Column Names
tutorial_1062_p=The table name and column names can be inserted in the script by clicking them in the tree. If you click on a table while the query is empty, a 'SELECT * FROM ...' is added as well. While typing a query, the table that was used is automatically expanded in the tree. For, example if you type 'SELECT * FROM TEST T WHERE T.' then the table TEST is automatically expanded in the tree.
tutorial_1063_h3=Disconnecting and Stopping the Application
tutorial_1064_p=To log out of the database, click 'Disconnect' in the toolbar panel. However, the server is still running and ready to accept new sessions.
tutorial_1065_p=To stop the server, right click on the system tray icon and select [Exit]. If you don't have the system tray icon, navigate to [Preferences] and click [Shutdown], press [Ctrl]+[C] in the console where the server was started (Windows), or close the console window.
tutorial_1066_h2=Settings of the H2 Console
tutorial_1067_p=The settings of the H2 Console are stored in a configuration file called <code>.h2.server.properties</code> in you user home directory. For Windows installations, the user home directory is usually <code>C\:\\Documents and Settings\\[username]</code> . The configuration file contains the settings of the application and is automatically created when the H2 Console is first started.
tutorial_1068_h2=Connecting to a Database using JDBC
tutorial_1069_p=To connect to a database, a Java application first needs to load the database driver, and then get a connection. A simple way to do that is using the following code\:
tutorial_1070_p=This code first loads the driver ( <code>Class.forName(...)</code> ) and then opens a connection (using <code>DriverManager.getConnection()</code> ). The driver name is <code>"org.h2.Driver"</code> . The database URL always needs to start with <code>jdbc\:h2\:</code> to be recognized by this database. The second parameter in the <code>getConnection()</code> call is the user name ('sa' for System Administrator in this example). The third parameter is the password. In this database, user names are not case sensitive, but passwords are.
tutorial_1071_h2=Creating New Databases
tutorial_1072_p=By default, if the database specified in the URL does not yet exist, a new (empty) database is created automatically. The user that created the database automatically becomes the administrator of this database.
tutorial_1073_h2=Using the Server
tutorial_1074_p=H2 currently supports three server\: a web server (for the H2 Console), a TCP server (for client/server connections) and an PG server (for PostgreSQL clients). The servers can be started in different ways, one is using the server tool.
tutorial_1075_h3=Starting the Server Tool from Command Line
tutorial_1076_p=To start the server tool from the command line with the default settings, run\:
tutorial_1077_p=This will start the server tool with the default options. To get the list of options and default values, run\:
tutorial_1078_p=There are options available to use other ports, and start or not start parts. For details, see the API documentation of the server tool.
tutorial_1079_h3=Connecting to the TCP Server
tutorial_1080_p=To remotely connect to a database using the TCP server, use the following driver and database URL\:
tutorial_1081_li=JDBC driver class\: org.h2.Driver
tutorial_1082_li=Database URL\: jdbc\:h2\:tcp\://localhost/~/test
tutorial_1083_p=For details about the database URL, see also in Features.
tutorial_1084_h3=Starting the TCP Server within an Application
tutorial_1085_p=Servers can also be started and stopped from within an application. Sample code\:
tutorial_1086_h3=Stopping a TCP Server from Another Process
tutorial_1087_p=The TCP server can be stopped from another process. To stop the server from the command line, run\:
tutorial_1088_p=To stop the server from a user application, use the following code\:
tutorial_1089_p=This function will only stop the TCP server. If other server were started in the same process, they will continue to run. To avoid recovery when the databases are opened the next time, all connections to the databases should be closed before calling this method. To stop a remote server, remote connections must be enabled on the server. Shutting down a TCP server can be protected using the option -tcpPassword (the same password must be used to start and stop the TCP server).
tutorial_1090_h2=Using Hibernate
tutorial_1091_p=This database supports Hibernate version 3.1 and newer. You can use the HSQLDB Dialect, or the native H2 Dialect. Unfortunately the H2 Dialect included in Hibernate is buggy. A <a href\="http\://opensource.atlassian.com/projects/hibernate/browse/HHH-3401">patch for Hibernate</a> has been submitted. The dialect for the newest version of Hibernate is also available at src/tools/org/hibernate/dialect/H2Dialect.java.txt. You can rename it to H2Dialect.java and include this as a patch in your application.
tutorial_1092_h2=Using TopLink and Glassfish
tutorial_1093_p=To use H2 with Glassfish (or Sun AS), set the Datasource Classname to <code>org.h2.jdbcx.JdbcDataSource</code> . You can set this in the GUI at Application Server - Resources - JDBC - Connection Pools, or by editing the file <code>sun-resources.xml</code> \: at element <code>jdbc-connection-pool</code> , set the attribute <code>datasource-classname</code> to <code>org.h2.jdbcx.JdbcDataSource</code> .
tutorial_1094_p=The H2 database is compatible with HSQLDB and PostgreSQL. To take advantage of H2 specific features, use the <code>H2Platform</code> . The source code of this platform is included in H2 at <code>src/tools/oracle/toplink/essentials/platform/database/DatabasePlatform.java.txt</code> . You will need to copy this file to your application, and rename it to .java. To enable it, change the following setting in persistence.xml\:
tutorial_1095_p=In old versions of Glassfish, the property name is <code>toplink.platform.class.name</code> .
tutorial_1096_h2=Using Databases in Web Applications
tutorial_1097_p=There are multiple ways to access a database from within web applications. Here are some examples if you use Tomcat or JBoss.
tutorial_1098_h3=Embedded Mode
tutorial_1099_p=The (currently) simplest solution is to use the database in the embedded mode, that means open a connection in your application when it starts (a good solution is using a Servlet Listener, see below), or when a session starts. A database can be accessed from multiple sessions and applications at the same time, as long as they run in the same process. Most Servlet Containers (for example Tomcat) are just using one process, so this is not a problem (unless you run Tomcat in clustered mode). Tomcat uses multiple threads and multiple classloaders. If multiple applications access the same database at the same time, you need to put the database jar in the shared/lib or server/lib directory. It is a good idea to open the database when the web application starts, and close it when the web application stops. If using multiple applications, only one (any) of them needs to do that. In the application, an idea is to use one connection per Session, or even one connection per request (action). Those connections should be closed after use if possible (but it's not that bad if they don't get closed).
tutorial_1100_h3=Server Mode
tutorial_1101_p=The server mode is similar, but it allows you to run the server in another process.
tutorial_1102_h3=Using a Servlet Listener to Start and Stop a Database
tutorial_1103_p=Add the h2*.jar file to your web application, and add the following snippet to your web.xml file (between the 'context-param' and the 'filter' section)\:
tutorial_1104_p=For details on how to access the database, see the file DbStarter.java. By default the DbStarter listener opens an embedded connection using the database URL 'jdbc\:h2\:~/test', user name 'sa', and password 'sa'. If you want to use this connection within your servlet, you can access as follows\:
tutorial_1105_p=The DbStarter can also start the TCP server, however this is disabled by default. To enable it, use the parameter db.tcpServer in the file web.xml. Here is the complete list of options. These options need to be placed between the 'description' tag and the 'listener' / 'filter' tags\:
tutorial_1106_p=When the web application is stopped, the database connection will be closed automatically. If the TCP server is started within the DbStarter, it will also be stopped automatically.
tutorial_1107_h3=Using the H2 Console Servlet
tutorial_1108_p=The H2 Console is a standalone application and includes its own web server, but it can be used as a servlet as well. To do that, include the the h2 jar file in your application, and add the following configuration to your web.xml\:
tutorial_1109_p=For details, see also <code>src/tools/WEB-INF/web.xml</code> .
tutorial_1110_p=To create a web application with just the H2 Console, run the following command\:
tutorial_1111_h2=CSV (Comma Separated Values) Support
tutorial_1112_p=The CSV file support can be used inside the database using the functions CSVREAD and CSVWRITE, or it can be used outside the database as a standalone tool.
tutorial_1113_h3=Writing a CSV File from Within a Database
tutorial_1114_p=The built-in function CSVWRITE can be used to create a CSV file from a query. Example\:
tutorial_1115_h3=Reading a CSV File from Within a Database
tutorial_1116_p=A CSV file can be read using the function CSVREAD. Example\:
tutorial_1117_h3=Writing a CSV File from a Java Application
tutorial_1118_p=The CSV tool can be used in a Java application even when not using a database at all. Example\:
tutorial_1119_h3=Reading a CSV File from a Java Application
tutorial_1120_p=It is possible to read a CSV file without opening a database. Example\:
tutorial_1121_h2=Upgrade, Backup, and Restore
tutorial_1122_h3=Database Upgrade
tutorial_1123_p=The recommended way to upgrade from one version of the database engine to the next version is to create a backup of the database (in the form of a SQL script) using the old engine, and then execute the SQL script using the new engine.
tutorial_1124_h3=Backup using the Script Tool
tutorial_1125_p=There are different ways to backup a database. For example, it is possible to copy the database files. However, this is not recommended while the database is in use. Also, the database files are not human readable and quite large. The recommended way to backup a database is to create a compressed SQL script file. This can be done using the Script tool\:
tutorial_1126_p=It is also possible to use the SQL command SCRIPT to create the backup of the database. For more information about the options, see the SQL command SCRIPT. The backup can be done remotely, however the file will be created on the server side. The built in FTP server could be used to retrieve the file from the server.
tutorial_1127_h3=Restore from a Script
tutorial_1128_p=To restore a database from a SQL script file, you can use the RunScript tool\:
tutorial_1129_p=For more information about the options, see the SQL command RUNSCRIPT. The restore can be done remotely, however the file needs to be on the server side. The built in FTP server could be used to copy the file to the server. It is also possible to use the SQL command RUNSCRIPT to execute a SQL script. SQL script files may contain references to other script files, in the form of RUNSCRIPT commands. However, when using the server mode, the references script files need to be available on the server side.
tutorial_1130_h3=Online Backup
tutorial_1131_p=The BACKUP SQL statement and the Backup tool both create a zip file with all database files. However, the contents of this file are not human readable. Other than the SCRIPT statement, the BACKUP statement does not lock the database objects, and therefore does not block other users. The resulting backup is transactionally consistent\:
tutorial_1132_p=The Backup tool (org.h2.tools.Backup) can not be used to create a online backup; the database must not be in use while running this program.
tutorial_1133_h2=Command Line Tools
tutorial_1134_p=This database comes with a number of command line tools. To get more information about a tool, start it with the parameter '-?', for example\:
tutorial_1135_p=The command line tools are\:
tutorial_1136_b=Backup
tutorial_1137_li=creates a backup of a database.
tutorial_1138_b=ChangeFileEncryption
tutorial_1139_li=allows changing the file encryption password or algorithm of a database.
tutorial_1140_b=Console
tutorial_1141_li=starts the browser based H2 Console.
tutorial_1142_b=ConvertTraceFile
tutorial_1143_li=converts a .trace.db file to a Java application and SQL script.
tutorial_1144_b=CreateCluster
tutorial_1145_li=creates a cluster from a standalone database.
tutorial_1146_b=DeleteDbFiles
tutorial_1147_li=deletes all files belonging to a database.
tutorial_1148_b=Recover
tutorial_1149_li=helps recovering a corrupted database.
tutorial_1150_b=Restore
tutorial_1151_li=restores a backup of a database.
tutorial_1152_b=RunScript
tutorial_1153_li=runs a SQL script against a database.
tutorial_1154_b=Script
tutorial_1155_li=allows converting a database to a SQL script for backup or migration.
tutorial_1156_b=Server
tutorial_1157_li=is used in the server mode to start a H2 server.
tutorial_1158_b=Shell
tutorial_1159_li=is a command line database tool.
tutorial_1160_p=The tools can also be called from an application by calling the main or another public method. For details, see the Javadoc documentation.
tutorial_1161_h2=Using OpenOffice Base
tutorial_1162_p=OpenOffice.org Base supports database access over the JDBC API. To connect to a H2 database using OpenOffice Base, you first need to add the JDBC driver to OpenOffice. The steps to connect to a H2 database are\:
tutorial_1163_li=Start OpenOffice Writer, go to [Tools], [Options]
tutorial_1164_li=Make sure you have selected a Java runtime environment in OpenOffice.org / Java
tutorial_1165_li=Click [Class Path...], [Add Archive...]
tutorial_1166_li=Select your h2 jar file (location is up to you, could be wherever you choose)
tutorial_1167_li=Click [OK] (as much as needed), stop OpenOffice (including the Quickstarter)
tutorial_1168_li=Start OpenOffice Base
tutorial_1169_li=Connect to an existing database; select [JDBC]; [Next]
tutorial_1170_li=Example datasource URL\: jdbc\:h2\:~/test
tutorial_1171_li=JDBC driver class\: org.h2.Driver
tutorial_1172_p=Now you can access the database stored in the current users home directory.
tutorial_1173_p=To use H2 in NeoOffice (OpenOffice without X11)\:
tutorial_1174_li=In NeoOffice, go to [NeoOffice], [Preferences]
tutorial_1175_li=Look for the page under [NeoOffice], [Java]
tutorial_1176_li=Click [Class Path], [Add Archive...]
tutorial_1177_li=Select your h2 jar file (location is up to you, could be wherever you choose)
tutorial_1178_li=Click [OK] (as much as needed), restart NeoOffice.
tutorial_1179_p=Now, when creating a new database using the "Database Wizard" \:
tutorial_1180_li=Click [File], [New], [Database].
tutorial_1181_li=Select [Connect to existing database] and the select [JDBC]. Click next.
tutorial_1182_li=Example datasource URL\: jdbc\:h2\:~/test
tutorial_1183_li=JDBC driver class\: org.h2.Driver
tutorial_1184_p=Another solution to use H2 in NeoOffice is\:
tutorial_1185_li=Package the h2 jar within an extension package
tutorial_1186_li=Install it as a Java extension in NeoOffice
tutorial_1187_p=This can be done by create it using the NetBeans OpenOffice plugin. See also <a href\="http\://wiki.services.openoffice.org/wiki/Extensions_development_java">Extensions Development</a> .
tutorial_1188_h2=Java Web Start / JNLP
tutorial_1189_p=When using Java Web Start / JNLP (Java Network Launch Protocol), permissions tags must be set in the .jnlp file, and the application .jar file must be signed. Otherwise, when trying to write to the file system, the following exception will occur\: java.security.AccessControlException\: access denied (java.io.FilePermission ... read). Example permission tags\:
tutorial_1190_h2=Using a Connection Pool
tutorial_1191_p=For H2, opening a connection is fast if the database is already open. Still, using a connection pool improves performance if you open and close connections a lot. A simple connection pool is included in H2. It is based on the <a href\="http\://www.source-code.biz/snippets/java/8.htm">Mini Connection Pool Manager</a> from Christian d'Heureuse. There are other, more complex, open source connection pools available, for example the <a href\="http\://jakarta.apache.org/commons/dbcp/">Apache Commons DBCP</a> . For H2, it is about twice as faster to get a connection from the built-in connection pool than to get one using DriverManager.getConnection(). The build-in connection pool is used as follows\:
tutorial_1192_h2=Fulltext Search
tutorial_1193_p=H2 includes two fulltext search implementations. One is using Apache Lucene, and the other (the native implementation) stores the index data in special tables in the database.
tutorial_1194_h3=Using the Native Fulltext Search
tutorial_1195_p=To initialize, call\:
tutorial_1196_p=You need to initialize it in each database where you want to use it. Afterwards, you can create a fulltext index for a table using\:
tutorial_1197_p=PUBLIC is the schema, TEST is the table name. The list of column names (column separated) is optional, in this case all columns are indexed. The index is updated in realtime. To search the index, use the following query\:
tutorial_1198_p=This will produce a result set that contains the query needed to retrieve the data\:
tutorial_1199_p=QUERY\: "PUBLIC"."TEST" WHERE "ID"\=1
tutorial_1200_p=To get the raw data, use <code>FT_SEARCH_DATA('Hello', 0, 0);</code> . The result contains the columns SCHEMA (the schema name), TABLE (the table name), COLUMNS (an array of column names), and KEYS (an array of objects). To join a table, use a join as in\: <code>SELECT T.* FROM FT_SEARCH_DATA('Hello', 0, 0) FT, TEST T WHERE FT.TABLE\='TEST' AND T.ID\= FT.KEYS[0];</code>
tutorial_1201_p=You can also call the index from within a Java application\:
tutorial_1202_h3=Using the Lucene Fulltext Search
tutorial_1203_p=To use the Lucene full text search, you need the Lucene library in the classpath. How to do that depends on the application; if you use the H2 Console, you can add the Lucene jar file to the environment variables H2DRIVERS or CLASSPATH. To initialize the Lucene fulltext search in a database, call\:
tutorial_1204_p=You need to initialize it in each database where you want to use it. Afterwards, you can create a full text index for a table using\:
tutorial_1205_p=PUBLIC is the schema, TEST is the table name. The list of column names (column separated) is optional, in this case all columns are indexed. The index is updated in realtime. To search the index, use the following query\:
tutorial_1206_p=This will produce a result set that contains the query needed to retrieve the data\:
tutorial_1207_p=QUERY\: "PUBLIC"."TEST" WHERE "ID"\=1
tutorial_1208_p=To get the raw data, use <code>FTL_SEARCH_DATA('Hello', 0, 0);</code> . The result contains the columns SCHEMA (the schema name), TABLE (the table name), COLUMNS (an array of column names), and KEYS (an array of objects). To join a table, use a join as in\: <code>SELECT T.* FROM FTL_SEARCH_DATA('Hello', 0, 0) FT, TEST T WHERE FT.TABLE\='TEST' AND T.ID\= FT.KEYS[0];</code>
tutorial_1209_p=You can also call the index from within a Java application\:
tutorial_1210_h2=User-Defined Variables
tutorial_1211_p=This database supports user-defined variables. Variables start with @ and can be used wherever expressions or parameters are allowed. Variables are not persisted and session scoped, that means only visible from within the session in which they are defined. A value is usually assigned using the SET command\:
tutorial_1212_p=The value can also be changed using the SET() method. This is useful in queries\:
tutorial_1213_p=Variables that are not set evaluate to NULL. The data type of a user-defined variable is the data type of the value assigned to it, that means it is not necessary (or possible) to declare variable names before using them. There are no restrictions on the assigned values; large objects (LOBs) are supported as well.
tutorial_1214_h2=Date and Time
tutorial_1215_p=Date, time and timestamp values support ISO 8601 formatting, including time zone\:
tutorial_1216_p=If the time zone is not set, the value is parsed using the current time zone setting of the system. Date and time information is stored in H2 database files in GMT (Greenwich Mean Time). If the database is opened using another system time zone, the date and time will change accordingly. If you want to move a database from one time zone to the other and don't want this to happen, you need to create a SQL script file using the SCRIPT command or Script tool, and then load the database using the RUNSCRIPT command or the RunScript tool in the new time zone.
tutorial_1217_h2=Using Spring
tutorial_1218_p=Use the following configuration to start and stop the H2 TCP server using the Spring Framework\:
tutorial_1219_p=The "destroy-method" will help prevent exceptions on hot-redeployment or when restarting the server.
