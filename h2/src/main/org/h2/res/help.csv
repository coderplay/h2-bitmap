# Copyright 2004-2008 H2 Group. Licensed under the H2 License, Version 1.0 (http://h2database.com/html/license.html).
"SECTION","TOPIC","SYNTAX","TEXT","EXAMPLE"
"Commands (DML)","SELECT","
{SELECT selectPart FROM fromPart|FROM fromPart SELECT selectPart}
[WHERE expression]
[GROUP BY expression [,...]]
[HAVING expression]
[{UNION [ALL] | MINUS | EXCEPT | INTERSECT} select]
[ORDER BY order [,...]]
[LIMIT expression [OFFSET expression] [SAMPLE_SIZE rowCountInt]]
[FOR UPDATE]
","
Selects data from a table or multiple tables.
If a sample size is specified, this limits the number of rows read for aggregate queries.
If FOR UPDATE is specified, the tables are locked for writing.
","
SELECT * FROM TEST
"

"Commands (DML)","INSERT","
INSERT INTO tableName [(columnName [,...])]
{VALUES {( [{DEFAULT | expression} [,...]] )} [,...]
| select}
","
Inserts a new row / new rows into a table.
","
INSERT INTO TEST VALUES(1, 'Hello')
"

"Commands (DML)","UPDATE","
UPDATE tableName
SET {columnName= {DEFAULT | expression} } [,...]
[WHERE expression]
","
Updates data in a table.
","
UPDATE TEST SET NAME='Hi' WHERE ID=1
"

"Commands (DML)","DELETE","
DELETE FROM tableName [WHERE expression]
","
Deletes rows form a table.
","
DELETE FROM TEST WHERE ID=2
"

"Commands (DML)","BACKUP","
BACKUP TO fileNameString
","
Backs up the database files to a .zip file.
Objects are not locked.
Admin rights are required to execute this command.
","
BACKUP TO 'backup.zip'
"

"Commands (DML)","CALL","
CALL expression
","
Calculates a simple expression.
","
CALL 15*25
"

"Commands (DML)","EXPLAIN","
EXPLAIN [PLAN FOR] {select | insert | update | delete}
","
Shows the execution plan for a query.
","
EXPLAIN SELECT * FROM TEST WHERE ID=1
"

"Commands (DML)","MERGE","
MERGE INTO tableName [(columnName [,...])] [KEY(columnName [,...])]
{VALUES {( [{DEFAULT | expression} [,...]] )} [,...]
| select}
","
Updates the row if it exists, and if the row does not exist, inserts a new row.
If the key columns are not specified, the primary key columns are used to find the row.
This command is sometimes called 'UPSERT' as it updates a row if it exists,
or inserts the row if it does not yet exist.
If more than one row per new row is affected, an exception is thrown.
","
MERGE INTO TEST KEY(ID) VALUES(2, 'World')
"

"Commands (DML)","RUNSCRIPT","
RUNSCRIPT FROM fileNameString
[COMPRESSION {DEFLATE|LZF|ZIP|GZIP}]
[CIPHER cipher PASSWORD string]
[CHARSET charsetString]
","
Runs a SQL script from a file. The script is a text file containing SQL statements; each statement must end with ';'.
This command can be used to restore a database from a backup.
The password must be in single quotes. It is case sensitive and can contain spaces.
The compression algorithm must match to the one used when creating the script.
When using encryption, only DEFLATE and LZF are supported.
Instead of a file, an URL may be used.
Admin rights are required to execute this command.
","
RUNSCRIPT FROM 'backup'
"

"Commands (DML)","SCRIPT","
SCRIPT [SIMPLE] [NODATA] [NOPASSWORDS] [NOSETTINGS] [DROP] [BLOCKSIZE blockSizeInt]
[TO fileNameString
[COMPRESSION {DEFLATE|LZF|ZIP|GZIP}]
[CIPHER cipher PASSWORD string]]
","
Creates a SQL script with or without the insert statements.
The simple format does not use multi-row insert statements.
If no file name is specified, the script is returned as a result set.
This command can be used to create a backup of the database.
For long term storage, it is more portable than file based backup.
If the DROP option is specified, drop statements are created for tables, views, and sequences.
If the block size is set, CLOB and BLOB values larger than this size are split into separate blocks.
If a file name is specified, then the whole script (including insert statements) is written to this file,
and a result set without the insert statements is returned.
When using encryption, only DEFLATE and LZF are supported.
This command locks objects while it is running.
The password must be in single quotes. It is case sensitive and can contain spaces.
","
SCRIPT NODATA
"

"Commands (DDL)","ALTER INDEX RENAME","
ALTER INDEX indexName RENAME TO newIndexName
","
Renames an index.
","
ALTER INDEX IDXNAME RENAME TO IDX_TEST_NAME
"
"Commands (DDL)","ALTER SEQUENCE","
ALTER SEQUENCE sequenceName
[RESTART WITH long]
[INCREMENT BY long]
","
Changes the next value and / or the increment of a sequence.
","
ALTER SEQUENCE SEQ_ID RESTART WITH 1000
"

"Commands (DDL)","ALTER TABLE ADD","
ALTER TABLE tableName ADD name dataType
[DEFAULT expression]
[[NOT] NULL] [AUTO_INCREMENT | IDENTITY]
[BEFORE columnName]
","
Adds a new column to a table.
","
ALTER TABLE TEST ADD CREATEDATE TIMESTAMP
"

"Commands (DDL)","ALTER TABLE ADD CONSTRAINT","
ALTER TABLE tableName ADD constraint [CHECK|NOCHECK]
","
Adds a constraint to a table.
If NOCHECK is specified, the existing data is not checked for consistency (the default is to check consistency for existing data).
It is not possible to disable checking for unique constraints.
","
ALTER TABLE TEST ADD CONSTRAINT NAME_UNIQUE UNIQUE(NAME)
"

"Commands (DDL)","ALTER TABLE ALTER COLUMN","
ALTER TABLE tableName ALTER COLUMN columnName
dataType [DEFAULT expression] [NOT [NULL]]
[AUTO_INCREMENT | IDENTITY]
","
Changes the data type of a column.
The data will be migrated if possible, and if not, the operation fails.
","
ALTER TABLE TEST ALTER COLUMN NAME CLOB
"

"Commands (DDL)","ALTER TABLE ALTER COLUMN RENAME","
ALTER TABLE tableName ALTER COLUMN columnName
RENAME TO name
","
Renames a column.
","
ALTER TABLE TEST ALTER COLUMN NAME RENAME TO TEXT
"

"Commands (DDL)","ALTER TABLE ALTER COLUMN RESTART","
ALTER TABLE tableName ALTER COLUMN columnName
RESTART WITH long
","
Changes the next value of an auto increment column.
The column must be an auto increment column.
","
ALTER TABLE TEST ALTER COLUMN ID RESTART WITH 10000
"

"Commands (DDL)","ALTER TABLE ALTER COLUMN SELECTIVITY","
ALTER TABLE tableName ALTER COLUMN columnName
SELECTIVITY int
","
Sets the selectivity (1-100) for a column. Setting the selectivity to 0 means setting it to the default value.
Selectivity is used by the cost based optimizer to calculate the estimated cost of an index.
Selectivity 100 means values are unique, 10 means every distinct value appears 10 times on average.
","
ALTER TABLE TEST ALTER COLUMN NAME SELECTIVITY 100
"

"Commands (DDL)","ALTER TABLE ALTER COLUMN SET DEFAULT","
ALTER TABLE tableName ALTER COLUMN columnName
SET DEFAULT expression
","
Changes the default value of a column.
","
ALTER TABLE TEST ALTER COLUMN NAME SET DEFAULT ''
"

"Commands (DDL)","ALTER TABLE ALTER COLUMN SET NOT NULL","
ALTER TABLE tableName ALTER COLUMN columnName
SET NOT NULL
","
Sets a column to not allow NULL.
This is not possible if there are any rows with NULL in this column.
","
ALTER TABLE TEST ALTER COLUMN NAME SET NOT NULL
"

"Commands (DDL)","ALTER TABLE ALTER COLUMN SET NULL","
ALTER TABLE tableName ALTER COLUMN columnName
SET NULL
","
Sets a column to allow NULL.
This is not possible if the column is part of a primary key or multi-column hash index.
If there are single column indexes on this column, they are dropped.
","
ALTER TABLE TEST ALTER COLUMN NAME SET NULL
"

"Commands (DDL)","ALTER TABLE DROP COLUMN","
ALTER TABLE tableName DROP COLUMN columnName
","
Removes a column from a table.
","
ALTER TABLE TEST DROP COLUMN NAME
"
"Commands (DDL)","ALTER TABLE DROP CONSTRAINT","
ALTER TABLE tableName DROP
{CONSTRAINT constraintName | PRIMARY KEY}
","
Removes a constraint or a primary key from a table.
","
ALTER TABLE TEST DROP CONSTRAINT UNIQUE_NAME
"

"Commands (DDL)","ALTER TABLE SET","
ALTER TABLE tableName SET REFERENTIAL_INTEGRITY {FALSE | TRUE [CHECK|NOCHECK]}
","
Disables or enables referential integrity checking for a table.
This command can be used inside a transaction.
Enabling it does not check existing data, except if CHECK is specified.
Use SET REFERENTIAL_INTEGRITY to disable it for all tables (the global flag and the flag for each table are independent).
","
ALTER TABLE TEST SET REFERENTIAL_INTEGRITY FALSE
"

"Commands (DDL)","ALTER TABLE RENAME","
ALTER TABLE tableName RENAME TO newName
","
Renames a table.
","
ALTER TABLE TEST RENAME TO MY_DATA
"

"Commands (DDL)","ALTER USER ADMIN","
ALTER USER userName ADMIN {TRUE | FALSE}
","
Switches the admin flag of a user on or off.
For compatibility, only unquoted or uppercase user names are allowed.
Admin rights are required to execute this command.
","
ALTER USER TOM ADMIN TRUE
"

"Commands (DDL)","ALTER USER RENAME","
ALTER USER userName RENAME TO newUserName
","
Renames a user.
For compatibility, only unquoted or uppercase user names are allowed.
After renaming a user the password becomes invalid and needs to be changed as well.
Admin rights are required to execute this command.
","
ALTER USER TOM RENAME TO THOMAS
"

"Commands (DDL)","ALTER USER SET PASSWORD","
ALTER USER userName SET
{PASSWORD string | SALT bytes HASH bytes}
","
Changes the password of a user.
For compatibility, only unquoted or uppercase user names are allowed.
The password must be in single quotes. It is case sensitive and can contain spaces.
The salt and hash values are hex strings.
Admin rights are required to execute this command.
","
ALTER USER SA SET PASSWORD 'rioyxlgt'
"

"Commands (DDL)","ALTER VIEW","
ALTER VIEW viewName RECOMPILE
","
Recompiles a view after the underlying tables have been changed or created.
","
ALTER VIEW ADDRESS_VIEW RECOMPILE
"

"Commands (DDL)","ANALYZE","
ANALYZE [SAMPLE_SIZE rowCountInt]
","
Updates the selectivity statistics of all tables.
The selectivity is used by the cost based optimizer to select the best index for a given query.
If no sample size is set, up to 10000 rows per table are read to calculate the values.
The value 0 means all rows.
The selectivity can be set manually with ALTER TABLE ALTER COLUMN SELECTIVITY.
The manual values are overwritten by this statement.
The selectivity is available in the INFORMATION_SCHEMA.COLUMNS table.
","
ANALYZE SAMPLE_SIZE 1000
"

"Commands (DDL)","COMMENT","
COMMENT ON { { TABLE | VIEW | CONSTANT | CONSTRAINT
| ALIAS | INDEX | ROLE | SCHEMA | SEQUENCE | TRIGGER | USER | DOMAIN }
[schemaName.]objectName } | { COLUMN [schemaName.]tableName.columnName }
IS expression
","
Sets the comment of a database object. Use NULL to remove the comment.
Admin rights are required to execute this command.
","
COMMENT ON TABLE TEST IS 'Table used for testing'
"

"Commands (DDL)","CREATE AGGREGATE","
CREATE AGGREGATE [IF NOT EXISTS] newAggregateName FOR className
","
Creates a new user defined aggregate function. The method name must be the full qualified class name.
The class must implement the interface org.h2.api.AggregateFunction.
Admin rights are required to execute this command.
","
CREATE AGGREGATE MEDIAN FOR ""com.acme.db.Median""
"

"Commands (DDL)","CREATE ALIAS","
CREATE ALIAS [IF NOT EXISTS] newFunctionAliasName FOR classAndMethodName
","
Creates a new function alias. The method name must be the full qualified class and method name,
and may optionally include the parameter classes as in ""java.lang.Integer.parseInt(java.lang.String, int)"")
Admin rights are required to execute this command.
If the first parameter of the Java function is a java.sql.Connection, then
the current to the database is provided. This connection must not be closed.
","
CREATE ALIAS MY_SQRT FOR ""java.lang.Math.sqrt""
"

"Commands (DDL)","CREATE CONSTANT","
CREATE CONSTANT [IF NOT EXISTS] newConstantName VALUE expression
","
Creates a new constant.
","
CREATE CONSTANT ONE VALUE 1
"

"Commands (DDL)","CREATE DOMAIN","
CREATE DOMAIN [IF NOT EXISTS] newDomainName AS dataType
[DEFAULT expression] [[NOT] NULL] [SELECTIVITY selectivity]
[CHECK condition]
","
Creates a new data type (domain).
The check condition must evaluate to true or to NULL (to prevent NULL, use NOT NULL).
In the condition, the term VALUE refers to the value being tested.
","
CREATE DOMAIN EMAIL AS VARCHAR(255) CHECK (POSITION('@', VALUE) > 1)
"

"Commands (DDL)","CREATE INDEX","
CREATE {[UNIQUE [HASH]] INDEX [[IF NOT EXISTS] newIndexName]
| PRIMARY KEY [HASH]} ON tableName(columnName [,...])
","
Creates a new index.
","
CREATE INDEX IDXNAME ON TEST(NAME)
"

"Commands (DDL)","CREATE LINKED TABLE","
CREATE LINKED TABLE [IF NOT EXISTS]
name(driverString, urlString,
userString, passwordString, originalTableString)
[EMIT UPDATES]
","
Creates a table link to an external table.
The driver name may be empty if the driver is already loaded.
Usually, for update statements, the old rows are deleted first
and then the new rows inserted. It is possible to emit update
statements (however this is not possible on rollback), however
in this case multi-row unique key updates may not always work.
The current user owner must have admin rights.
","
CREATE LINKED TABLE LINK('org.h2.Driver', 'jdbc:h2:test', 'sa', '', 'TEST')
"

"Commands (DDL)","CREATE ROLE","
CREATE ROLE [IF NOT EXISTS] newRoleName
","
Creates a new role.
","
CREATE ROLE READONLY
"

"Commands (DDL)","CREATE SCHEMA","
CREATE SCHEMA [IF NOT EXISTS] name
[AUTHORIZATION ownerUserName]
","
Creates a new schema.
The current user owner must have admin rights.
If no authorization is specified, the current user is used.
","
CREATE SCHEMA TEST_SCHEMA AUTHORIZATION SA
"

"Commands (DDL)","CREATE SEQUENCE","
CREATE SEQUENCE [IF NOT EXISTS] newSequenceName
[START WITH long]
[INCREMENT BY long]
[CACHE long]
","
Creates a new sequence. The data type of a sequence is BIGINT.
The cache is the number of pre-allocated numbers. If the system crashes without closing the
database, at most this many numbers are lost. The default cache size is 32.
","
CREATE SEQUENCE SEQ_ID
"

"Commands (DDL)","CREATE TABLE","
CREATE [CACHED | MEMORY | TEMP | [GLOBAL | LOCAL] TEMPORARY]
TABLE [IF NOT EXISTS] name
{ ( {name dataType
[{AS computedColumnExpression | DEFAULT expression}]
[[NOT] NULL]
[{AUTO_INCREMENT | IDENTITY}[(startInt [, incrementInt])]]
[SELECTIVITY selectivity]
[PRIMARY KEY [HASH] | UNIQUE]
| constraint} [,...] ) [ AS select ] } | { AS select }
","
Creates a new table.
Cached tables (the default) are persistent, and the number or rows is not limited by the main memory.
Memory tables are persistent, but the index data is kept in the main memory, so memory tables should not get too large.
Temporary tables are not persistent. Temporary tables can be global (accessible by all connections)
or local (only accessible by the current connection). The default is for temporary tables is global.
","
CREATE TABLE TEST(ID INT PRIMARY KEY, NAME VARCHAR(255))
"

"Commands (DDL)","CREATE TRIGGER","
CREATE TRIGGER [IF NOT EXISTS] newTriggerName
{BEFORE | AFTER} {INSERT | UPDATE | DELETE} [,...]
ON tableName
[FOR EACH ROW] [QUEUE int] [NOWAIT]
CALL triggeredClassName
","
Creates a new trigger. The trigger class must be public. Nested and inner classes are not supported.
Before triggers are called after data conversion is made, default values are set,
null and length constraint checks have been made; but before other constraints
have been checked.
","
CREATE TRIGGER TRIG_INS BEFORE INSERT ON TEST FOR EACH ROW CALL ""MyTrigger""
"
"Commands (DDL)","CREATE USER","
CREATE USER [IF NOT EXISTS] newUserName
{PASSWORD string | SALT bytes HASH bytes}
[ADMIN]
","
Creates a new user.
Admin rights are required to execute this command.
For compatibility, only unquoted or uppercase user names are allowed.
The password must be in single quotes. It is case sensitive and can contain spaces.
The salt and hash values are hex strings.
","
CREATE USER GUEST PASSWORD 'abc'
"

"Commands (DDL)","CREATE VIEW","
CREATE [FORCE] VIEW [IF NOT EXISTS] newViewName [(columnName [,..])]
AS select
","
Creates a new view. If the force option is used, then the view is created even if the underlying table(s) don't exist.
Admin rights are required to execute this command.
","
CREATE VIEW TEST_VIEW AS SELECT * FROM TEST WHERE ID < 100
"

"Commands (DDL)","DROP AGGREGATE","
DROP AGGREGATE [IF EXISTS] aggregateName
","
Drops an existing user defined aggregate function.
Admin rights are required to execute this command.
","
CREATE AGGREGATE MEDIAN
"

"Commands (DDL)","DROP ALIAS","
DROP ALIAS [IF EXISTS] functionAliasName
","
Drops an existing function alias.
Admin rights are required to execute this command.
","
CREATE ALIAS MY_SQRT
"

"Commands (DDL)","DROP ALL OBJECTS","
DROP ALL OBJECTS [DELETE FILES]
","
Drops all existing views, tables, sequences, schemas, function aliases, roles,
user defined aggregate functions, domains, and users (except the current user).
If DELETE FILES is specified, the database files will be
removed when the last user disconnects from the database.
Warning: This command can not be rolled back.
Admin rights are required to execute this command.
","
DROP ALL OBJECTS
"

"Commands (DDL)","DROP CONSTANT","
DROP CONSTANT [IF EXISTS] constantName
","
Drops a constant.
","
DROP CONSTANT ONE
"

"Commands (DDL)","DROP DOMAIN","
DROP DOMAIN [IF EXISTS] domainName
","
Drops a data type (domain).
","
DROP DOMAIN EMAIL
"

"Commands (DDL)","DROP INDEX","
DROP INDEX [IF EXISTS] indexName
","
Drops an index.
","
DROP INDEX IF EXISTS IDXNAME
"

"Commands (DDL)","DROP ROLE","
DROP ROLE [IF EXISTS] roleName
","
Drops a role.
","
DROP ROLE READONLY
"

"Commands (DDL)","DROP SCHEMA","
DROP SCHEMA [IF EXISTS] schemaName
","
Drops a schema.
","
DROP SCHEMA TEST_SCHEMA
"

"Commands (DDL)","DROP SEQUENCE","
DROP SEQUENCE [IF EXISTS] sequenceName
","
Drops a sequence.
","
DROP SEQUENCE SEQ_ID
"

"Commands (DDL)","DROP TABLE","
DROP TABLE [IF EXISTS] tableName [,...]
","
Drops an existing table, or a list of existing tables.
","
DROP TABLE TEST
"
"Commands (DDL)","DROP TRIGGER","
DROP TRIGGER [IF EXISTS] triggerName
","
Drops an existing trigger.
","
DROP TRIGGER TRIG_INS
"
"Commands (DDL)","DROP USER","
DROP USER [IF EXISTS] userName
","
Drops a user.
Admin rights are required to execute this command.
The current user cannot be dropped.
For compatibility, only unquoted or uppercase user names are allowed.
","
DROP USER TOM
"
"Commands (DDL)","DROP VIEW","
DROP VIEW [IF EXISTS] viewName
","
Drops a view.
","
DROP VIEW TEST_VIEW
"
"Commands (DDL)","TRUNCATE TABLE","
TRUNCATE TABLE tableName
","
Removes all rows from a table.
Other than DELETE FROM without where clause, this command can not be rolled back.
This command is faster than DELETE without where clause.
Only regular data tables without foreign key constraints can be truncated.
This command commits an open transaction.
","
TRUNCATE TABLE TEST
"
"Commands (Other)","COMMIT","
COMMIT [WORK]
","
Commits a transaction.
","
COMMIT
"
"Commands (Other)","COMMIT TRANSACTION","
COMMIT TRANSACTION transactionName
","
Sets the resolution of an in-doubt transaction to 'commit'.
Admin rights are required to execute this command.
This command is part of the 2-phase-commit protocol.
","
COMMIT TRANSACTION XID_TEST
"
"Commands (Other)","CHECKPOINT","
CHECKPOINT
","
Flushes the log and data files and switches to a new log file.
Admin rights are required to execute this command.
","
CHECKPOINT
"
"Commands (Other)","CHECKPOINT SYNC","
CHECKPOINT SYNC
","
Flushes the log, data and index files and forces all system buffers be written to the underlying device.
Admin rights are required to execute this command.
","
CHECKPOINT SYNC
"
"Commands (Other)","GRANT RIGHT","
GRANT {SELECT | INSERT | UPDATE | DELETE | ALL} [,...]
ON tableName [,...] TO {PUBLIC | userName | roleName}
","
Grants rights for a table to a user or role.
Admin rights are required to execute this command.
","
GRANT SELECT ON TEST TO READONLY
"
"Commands (Other)","GRANT ROLE","
GRANT roleName TO {PUBLIC | userName | roleName}
","
Grants a role to a user or role.
Admin rights are required to execute this command.
","
GRANT READONLY TO PUBLIC
"
"Commands (Other)","HELP","
HELP [anything [...]]
","
Displays the help pages of SQL commands or keywords
","
HELP SELECT
"
"Commands (Other)","PREPARE COMMIT","
PREPARE COMMIT newTransactionName
","
Prepares committing a transaction.
This command is part of the 2-phase-commit protocol.
","
PREPARE COMMIT XID_TEST
"
"Commands (Other)","REVOKE RIGHT","
REVOKE {SELECT | INSERT | UPDATE | DELETE | ALL} [,...]
ON tableName [,...] FROM {PUBLIC | userName | roleName}
","
Removes rights for a table from a user or role.
Admin rights are required to execute this command.
","
REVOKE SELECT ON TEST FROM READONLY
"
"Commands (Other)","REVOKE ROLE","
REVOKE roleName
FROM {PUBLIC | userName | roleName}
","
Removes a role from a user or role.
Admin rights are required to execute this command.
","
REVOKE READONLY FROM TOM
"
"Commands (Other)","ROLLBACK","
ROLLBACK [TO SAVEPOINT savepointName]
","
Rolls back a transaction.
If a savepoint name is used, the transaction is only rolled back to the specified savepoint.
","
ROLLBACK
"
"Commands (Other)","ROLLBACK TRANSACTION","
ROLLBACK TRANSACTION transactionName
","
Sets the resolution of an in-doubt transaction to 'rollback'.
Admin rights are required to execute this command.
This command is part of the 2-phase-commit protocol.
","
ROLLBACK TRANSACTION XID_TEST
"

"Commands (Other)","SAVEPOINT","
SAVEPOINT savepointName
","
Create a new savepoint. See also ROLLBACK.
Savepoints are only valid until the transaction is committed or rolled back.
","
SAVEPOINT HALF_DONE
"

"Commands (Other)","SET @","
SET @variableName [=] expression
","
Updates a user defined variable.
","
SET @TOTAL=0
"

"Commands (Other)","SET ALLOW_LITERALS","
SET ALLOW_LITERALS {NONE|ALL|NUMBERS}
","
This setting can help solve the SQL injection problem.
By default, text and number literals are allowed in SQL statements.
However, this enables SQL injection if the application dynamically builds SQL statements.
SQL injection is not possible if user data is set using parameters ('?').
There are three options for this setting:
NONE: Literals of any kind are not allowed, only parameters and constants are allowed.
NUMBERS: Only numerical and boolean literals are allowed.
ALL: All literals are allowed (default).
This setting is persistent.
Admin rights are required to execute this command.
See also CREATE CONSTANT.
This setting can be appended to the database URL: jdbc:h2:test;ALLOW_LITERALS=NONE
","
SET ALLOW_LITERALS NONE
"

"Commands (Other)","SET AUTOCOMMIT","
SET AUTOCOMMIT {TRUE | ON | FALSE | OFF}
","
Switches auto commit on or off.
This setting can be appended to the database URL: jdbc:h2:test;AUTOCOMMIT=OFF
","
SET AUTOCOMMIT OFF
"

"Commands (Other)","SET CACHE_SIZE","
SET CACHE_SIZE int
","
Sets the size of the cache in KB (each KB being 1024 bytes). The default value is 16384 (16 MB).
The value is rounded to the next higher power of two.
Depending on the virtual machine, the actual memory required may be higher.
This setting is persistent and affects all connections as there is only one cache per database.
Admin rights are required to execute this command.
This setting can be appended to the database URL: jdbc:h2:test;CACHE_SIZE=8192
","
SET CACHE_SIZE 8192
"

"Commands (Other)","SET CLUSTER","
SET CLUSTER serverListString
","
This command should not be used directly by an application,
the statement is executed automatically by the system.
The behavior may change in future releases.
Sets the cluster server list. An empty string switches off the cluster mode.
Switching on the cluster mode requires admin rights,
but any user can switch it off
(this is automatically done when the client detects the other server is not responding).
Admin rights are required to execute this command.
","
SET CLUSTER ''
"

"Commands (Other)","SET COLLATION","
SET [DATABASE] COLLATION
{OFF | collationName
[STRENGTH {PRIMARY | SECONDARY | TERTIARY | IDENTICAL}]}
","
Sets the collation used for comparing strings.
This command can only be executed if there are no tables defined.
See java.test.Collator for details about STRENGTH.
This setting is persistent.
Admin rights are required to execute this command.
","
SET COLLATION ENGLISH
"

"Commands (Other)","SET COMPRESS_LOB","
SET COMPRESS_LOB {NO|LZF|DEFLATE}
","
Sets the compression algorithm for BLOB and CLOB data.
Compression is usually slower, but needs less memory.
This setting is persistent.
Admin rights are required to execute this command.
","
SET COMPRESS_LOB LZF
"

"Commands (Other)","SET DATABASE_EVENT_LISTENER","
SET DATABASE_EVENT_LISTENER classNameString
","
Sets the event listener class.
An empty string ('') means no listener should be used.
This setting is not persistent.
Admin rights are required to execute this command,
except if it is set when opening the database
(in this case it is reset just after opening the database).
This setting can be appended to the database URL: jdbc:h2:test;DATABASE_EVENT_LISTENER='sample.MyListener'
","
SET DATABASE_EVENT_LISTENER 'sample.MyListener'
"

"Commands (Other)","SET DB_CLOSE_DELAY","
SET DB_CLOSE_DELAY int
","
Sets the delay for closing a database if all connections are closed.
-1: the database is never closed until the close delay is set to some other value or SHUTDOWN is called.
0: no delay (default; the database is closed if the last connection to it is closed).
1: the database is left open for 1 second after the last connection is closed.
Other values: the number of seconds the database is left open after closing the last connection.
If the application exits normally or System.exit is called, the database is closed immediately, even if a delay is set.
This setting is persistent.
Admin rights are required to execute this command.
This setting can be appended to the database URL: jdbc:h2:test;DB_CLOSE_DELAY=-1
","
SET DB_CLOSE_DELAY -1
"

"Commands (Other)","SET DEFAULT_LOCK_TIMEOUT","
SET DEFAULT LOCK_TIMEOUT int
","
Sets the default lock timeout (in milliseconds) in this database that is used for the new sessions.
This setting is persistent.
The default value for this setting is 1000 (one second).
Admin rights are required to execute this command.
","
SET DEFAULT_LOCK_TIMEOUT 5000
"

"Commands (Other)","SET DEFAULT_TABLE_TYPE","
SET DEFAULT_TABLE_TYPE {MEMORY | CACHED}
","
Sets the default table storage type that is used when creating new tables.
Memory tables are kept fully in the main memory (including indexes),
however changes to the data are stored in the log file.
The size of memory tables is limited by the memory.
The default is CACHED.
This setting is persistent.
Admin rights are required to execute this command.
","
SET DEFAULT_TABLE_TYPE MEMORY
"

"Commands (Other)","SET EXCLUSIVE","
SET EXCLUSIVE {TRUE | FALSE}
","
Switched the database to exclusive mode and back. In exclusive mode, new connections are rejected,
and operations by other connections are paused until the exclusive mode is disabled.
Only the connection that set the exclusive mode can disable it. When the connection is closed,
it is automatically disabled.
This setting is not persistent.
Admin rights are required to execute this command.
","
SET EXCLUSIVE TRUE
"

"Commands (Other)","SET IGNORECASE","
SET IGNORECASE {TRUE|FALSE}
","
If IGNORECASE is enabled, text columns in newly created tables will be
case-insensitive. Already existing tables are not affected.
This setting is persistent.
The effect of case-insensitive columns is similar to using a collation with strength PRIMARY.
Case-insensitive columns are compared faster than when using a collation.
Admin rights are required to execute this command.
","
SET IGNORECASE TRUE
"

"Commands (Other)","SET LOCK_MODE","
SET LOCK_MODE int
","
Sets the lock mode.
0: No locking (should only be used for testing). Also known as READ_UNCOMMITTED.
1: Table level locking (default). Also known as SERIALIZABLE.
2: Table level locking with garbage collection (if the application does not close all connections).
3: Table level locking, but read locks are released immediately. Also known as READ_COMMITTED.
This setting is not persistent.
Admin rights are required to execute this command.
This setting can be appended to the database URL: jdbc:h2:test;LOCK_MODE=3
","
SET LOCK_MODE 2
"

"Commands (Other)","SET LOCK_TIMEOUT","
SET LOCK_TIMEOUT int
","
Sets the lock timeout (in milliseconds) for the current session.
The default value for this setting is 1000 (one second).
This setting can be appended to the database URL: jdbc:h2:test;LOCK_TIMEOUT=10000
","
SET LOCK_TIMEOUT 1000
"

"Commands (Other)","SET LOG","
SET LOG int
","
Enabled or disables writing to the log file.
0: logging is disabled (faster)
1: logging of the data is enabled, but logging of the index changes is disabled (default)
2: logging of both data and index changes are enabled
Logging can be disabled to improve the performance when durability is not important, for example while running tests or when loading the database.
Warning: It may not be possible to recover the database if logging is disabled and the application terminates abnormally.
If logging of index changes is enabled, opening a database that was crashed becomes faster because the indexes don't need to be rebuilt.
Admin rights are required to execute this command.
This setting can be appended to the database URL: jdbc:h2:test;LOG=2
","
SET LOG 0
"

"Commands (Other)","SET MAX_LENGTH_INPLACE_LOB","
SET MAX_LENGTH_INPLACE_LOB int
","
Sets the maximum size of an in-place LOB object. LOB objects larger
that this size are stored in a separate file, otherwise stored
directly in the database (in-place).
The default max size is 1024.
This setting is persistent.
Admin rights are required to execute this command.
","
SET MAX_LENGTH_INPLACE_LOB 128
"

"Commands (Other)","SET MAX_LOG_SIZE","
SET MAX_LOG_SIZE int
","
Sets the maximum file size of a log file, in megabytes.
If the file exceeds the limit, a new file is created.
Old files (that are not used for recovery) are deleted automatically,
but multiple log files may exist for some time.
The default max size is 64 MB.
This setting is persistent.
Admin rights are required to execute this command.
","
SET MAX_LOG_SIZE 2
"

"Commands (Other)","SET MAX_MEMORY_ROWS","
SET MAX_MEMORY_ROWS int
","
The maximum number of rows in a result set that are kept in-memory.
If more rows are read, then the rows are buffered to disk.
The default value is 10000.
This setting is persistent.
Admin rights are required to execute this command.
","
SET MAX_MEMORY_ROWS 1000
"

"Commands (Other)","SET MAX_MEMORY_UNDO","
SET MAX_MEMORY_UNDO int
","
The maximum number of undo records per a session that are kept in-memory.
If a transaction is larger, the records are buffered to disk. The default value is 100000.
Changes to tables without a primary key can not be buffered to disk.
This setting is persistent.
Admin rights are required to execute this command.
","
SET MAX_MEMORY_UNDO 1000
"

"Commands (Other)","SET MAX_OPERATION_MEMORY","
SET MAX_OPERATION_MEMORY int
","
Sets the maximum memory used for large operations (delete and insert), in bytes.
Operations that use more memory are buffered to disk, slowing down the operation.
The default max size is 100000. 0 means no limit.
This setting is not persistent.
Admin rights are required to execute this command.
This setting can be appended to the database URL: jdbc:h2:test;MAX_OPERATION_MEMORY=10000
","
SET MAX_OPERATION_MEMORY 0
"

"Commands (Other)","SET MODE","
SET MODE {REGULAR | HSQLDB | POSTGRESQL | MYSQL}
","
Changes to another database mode.
This setting is not persistent.
Admin rights are required to execute this command.
This setting can be appended to the database URL: jdbc:h2:test;MODE=MYSQL
","
SET MODE HSQLDB
"

"Commands (Other)","SET MULTI_THREADED","
SET MULTI_THREADED {0|1}
","
Enabled (1) or disabled (0) multi-threading inside the database engine.
By default, this setting is disabled. Currently, enabling this is experimental only.
Admin rights are required to execute this command.
This is a global setting, which means it is not possible to open multiple databases
with different modes at the same time in the same virtual machine.
This setting is not persistent, however the value is kept until the virtual machine exits or it is changed.
This setting can be appended to the database URL: jdbc:h2:test;MULTI_THREADED=1
","
SET MULTI_THREADED 1
"

"Commands (Other)","SET OPTIMIZE_REUSE_RESULTS","
SET OPTIMIZE_REUSE_RESULTS {0|1}
","
Enabled (1) or disabled (0) the result reuse optimization.
If enabled, subqueries and views used as subqueries are only re-run if the data in one of the tables was changed.
This option is enabled by default.
Admin rights are required to execute this command.
This setting can be appended to the database URL: jdbc:h2:test;OPTIMIZE_REUSE_RESULTS=0
","
SET OPTIMIZE_REUSE_RESULTS 0
"

"Commands (Other)","SET QUERY_TIMEOUT","
SET QUERY_TIMEOUT int
","
Set the query timeout of the current session to the given value.
The timeout is in milliseconds. All kinds of statements will
throw an exception if they take longer than the given value.
The default timeout is 0, meaning no timeout.
","
SET QUERY_TIMEOUT 10000
"

"Commands (Other)","SET PASSWORD","
SET PASSWORD string
","
Changes the password of the current user.
The password must be in single quotes. It is case sensitive and can contain spaces.
","
SET PASSWORD 'abcstzri!.5'
"

"Commands (Other)","SET REFERENTIAL_INTEGRITY","
SET REFERENTIAL_INTEGRITY [TRUE|FALSE]
","
Disabled or enables referential integrity checking for the whole database.
Enabling it does not check existing data.
Use ALTER TABLE SET to disable it only for one table.
This setting is not persistent.
Admin rights are required to execute this command.
","
SET REFERENTIAL_INTEGRITY FALSE
"

"Commands (Other)","SET SALT HASH","
SET SALT bytes HASH bytes
","
Sets the password salt and hash for the current user.
The password must be in single quotes. It is case sensitive and can contain spaces.
","
SET SALT '00' HASH '1122'
"

"Commands (Other)","SET SCHEMA","
SET SCHEMA schemaName
","
Changes the default schema of the current connection.
The default schema is used in statements where no schema is set explicitly.
The default schema for new connections is PUBLIC.
This setting can be appended to the database URL: jdbc:h2:test;SCHEMA=ABC
","
SET SCHEMA INFORMATION_SCHEMA
"

"Commands (Other)","SET THROTTLE","
SET THROTTLE int
","
Sets the throttle for the current connection.
The value is the number of milliseconds delay after each 50 ms.
The default value is 0 (throttling disabled).
This setting can be appended to the database URL: jdbc:h2:test;THROTTLE=50
","
SET THROTTLE 200
"

"Commands (Other)","SET TRACE_LEVEL","
SET {TRACE_LEVEL_FILE | TRACE_LEVEL_SYSTEM_OUT} int
","
Sets the trace level for file the file or system out stream.
Levels: 0=off, 1=error, 2=info, 3=debug.
This setting is persistent.
Admin rights are required to execute this command.
This setting can be appended to the database URL: jdbc:h2:test;TRACE_LEVEL_SYSTEM_OUT=3
","
SET TRACE_LEVEL_SYSTEM_OUT 3
"

"Commands (Other)","SET TRACE_MAX_FILE_SIZE","
SET TRACE_MAX_FILE_SIZE int
","
Sets the maximum trace file size.
If the file exceeds the limit, the file is renamed to .old and a new file is created.
If another .old file exists, it is deleted.
The default max size is 16 MB.
This setting is persistent.
Admin rights are required to execute this command.
This setting can be appended to the database URL: jdbc:h2:test;TRACE_MAX_FILE_SIZE=3
","
SET TRACE_MAX_FILE_SIZE 10
"

"Commands (Other)","SET UNDO_LOG","
SET UNDO_LOG int
","
Enables (1) or disables (0) the per session undo log.
The undo log is enabled by default.
When disabled, transactions can not be rolled back.
This setting should only be used for bulk operations
that don't need to be atomic.
","
SET UNDO_LOG 0
"

"Commands (Other)","SET WRITE_DELAY","
SET WRITE_DELAY int
","
Set the maximum delay between a commit and flushing the log, in milliseconds.
This setting is persistent.
Admin rights are required to execute this command.
This setting can be appended to the database URL: jdbc:h2:test;WRITE_DELAY=0
","
SET WRITE_DELAY 2000
"

"Commands (Other)","SHUTDOWN","
SHUTDOWN [IMMEDIATELY|COMPACT|SCRIPT]
","
This statement is closes all open connections to the database and closes the database.
If no option is used, then all connections are closed.
If the IMMEDIATELY option is used, the database files are closed as if the hard drive stops working,
without rollback of the open transactions.
COMPACT and SCRIPT are only supported for compatibility and have no effect.
Any open transaction are rolled back before closing the connection.
This command should usually not be used, as the database is closed
automatically when the last connection to it is closed.
Admin rights are required to execute this command.
","
SHUTDOWN
"

"Other Grammar","Comments","
-- anythingUntilEndOfLine
| // anythingUntilEndOfLine
| /* anythingUntilEndComment */
","
Comments can be used anywhere in a command and are ignored by the database.
Line comments end with a newline.
Block comments cannot be nested, but can be multiple lines long.
","
// This is a comment
"

"Other Grammar","Select Part","
[TOP term] [DISTINCT | ALL] selectExpression [,...]
","
The SELECT part of a query.
","
DISTINCT *
"

"Other Grammar","From Part","
tableExpression [,...]
","
The FROM part of a query.
","
FROM TEST
"

"Other Grammar","Constraint","
PRIMARY KEY [HASH] (columnName [,...])
| [CONSTRAINT newConstraintName] {
CHECK expression
| UNIQUE (columnName [,...])
| referentialConstraint}
","
Defines a constraint.
The check condition must evaluate to true or to NULL (to prevent NULL, use NOT NULL).
","
PRIMARY KEY(ID, NAME)
"
"Other Grammar","Referential Constraint","
FOREIGN KEY (columnName [,...])
REFERENCES [refTableName] [(refColumnName[,...])]
[ON DELETE {CASCADE | RESTRICT | NO ACTION | SET DEFAULT | SET NULL}]
[ON UPDATE {CASCADE | SET DEFAULT | SET NULL}]
","
Defines a referential constraint.
If the table name is not specified, then the same table is referenced.
As this database does not support deferred checking,
RESTRICT and NO ACTION will both throw an exception if the constraint is violated.
If the referenced columns are not specified, then the primary key columns are used.
","
FOREIGN KEY(ID) REFERENCES TEST(ID)
"
"Other Grammar","Table Expression","
{tableName | (select)} [[AS] newTableAlias]
[{{LEFT | RIGHT} [OUTER] | [INNER] | CROSS | NATURAL}
JOIN {tableName | viewName} [[AS] newTableAlias] [ON expression] ]
","
Joins a table. The join expression is not supported for cross and natural joins.
A natural join is an inner join, where the condition is automatically on the columns with the same name.
","
TEST AS T LEFT JOIN TEST AS T1 ON T.ID = T1.ID
"

"Other Grammar","Order","
{int | expression} [ASC | DESC]
[NULLS {FIRST | LAST}]
","
Sorts the result by the given column number, or by an expression.
If the expression is a single parameter, then the value is interpreted
as a column number. Negative column numbers reverse the sort order.
","
NAME DESC NULLS LAST
"

"Other Grammar","Expression","
andCondition [OR andCondition]
","
Value or condition.
","
ID=1 OR NAME='Hi'
"
"Other Grammar","And Condition","
condition [AND condition]
","
Value or condition.
","
ID=1 AND NAME='Hi'
"
"Other Grammar","Condition","
operand [conditionRightHandSide]
| NOT condition
| EXISTS (select)
","
Boolean value or condition.
","
ID<>2
"
"Other Grammar","Condition Right Hand Side","
compare { {{ALL|ANY|SOME}(select)} | operand }
| IS [NOT] NULL
| BETWEEN operand AND operand
| IN ({select | expression[,...]})
| [NOT] LIKE operand [ESCAPE string]
| [NOT] REGEXP operand
","
The right hand side of a condition.
When comparing with LIKE, the wildcards characters are _ (any one character) and % (any characters).
When comparing with REGEXP, regular expression matching is used. See Java Matcher.find for details.
","
LIKE 'Jo%'
"

"Other Grammar","Compare","
= | < | > | <> | <= | >= | !=
","
Comparison operator. The operator != is the same as <>.
","
<>
"
"Other Grammar","Operand","
summand [ || summand]
","
A value or a concatenation of values.
","
'Hi' || ' Eva'
"
"Other Grammar","Summand","
factor [{+ | -} factor]
","
A value or a numeric sum.
","
ID + 20
"
"Other Grammar","Factor","
term [{* | /} term]
","
A value or a numeric factor.
","
ID * 10
"
"Other Grammar","Term","
value
| columnName
| ?[int]
| NEXT VALUE FOR sequenceName
| function
| {- | +} term
| (expression)
| select
| case
| caseWhen
| tableAlias.columnName
","
A value. Parameters can be indexed, for example ?1 meaning the first parameter.
","
'Hello'
"
"Other Grammar","Value","
string | hexNumber | int | long | decimal | double |
date | time | timestamp | boolean | bytes | array | null
","
A value of any data type, or null
","
10
"
"Other Grammar","Case","
CASE expression {WHEN expression THEN expression}
[...] [ELSE expression] END
","
Returns the first expression where the value is equal to the test expression.
If no else part is specified, return NULL
","
CASE CNT WHEN 0 THEN 'No' WHEN 1 THEN 'One' ELSE 'Some' END
"
"Other Grammar","Case When","
CASE {WHEN expression THEN expression}
[...] [ELSE expression] END
","
Returns the first expression where the condition is true.
If no else part is specified, return NULL
","
CASE WHEN CNT<10 THEN 'Low' ELSE 'High' END
"
"Other Grammar","Cipher","
[AES | XTEA]
","
Two algorithms are supported, AES (AES-256) and XTEA (using 32 rounds).
The AES algorithm is about half as fast as XTEA.
","
AES
"
"Other Grammar","Select Expression","
* | expression [[AS] columnAlias] | tableAlias.*
","
An expression in a SELECT statement.
","
ID AS VALUE
"
"Other Grammar","Data Type","
intType | booleanType | tinyintType | smallintType | bigintType | identityType |
decimalType | doubleType | realType | dateType | timeType | timestampType |
binaryType | otherType | varcharType | varcharIgnorecaseType | charType
blobType | clobType | uuidType | arrayType
","
A data type definition.
","
INT
"
"Other Grammar","Name","
{ { A-Z|_ } [ { A-Z|_|0-9} [...] ] } | quotedName
","
Names are not case sensitive.
There is no maximum name length.
","
TEST
"
"Other Grammar","Alias","
name
","
An alias is a name that is only valid in the context of the statement.
","
A
"
"Other Grammar","Quoted Name","
""anythingExceptDoubleQuote""
","
Quoted names are case sensitive, and can contain spaces. There is no maximum name length.
Two double quotes can be used to create a single double quote inside an identifier.
","
""FirstName""
"
"Other Grammar","String","
'anythingExceptSingleQuote'
","
A string starts and ends with a single quote.
Two single quotes can be used to create a single quote inside a string.
","
'John''s car'
"
"Other Grammar","Int","
[- | +] digit [...]
","
The maximum integer number is 2147483647, the minimum is -2147483648.
","
10
"
"Other Grammar","Long","
[- | +] digit [...]
","
Long numbers are between -9223372036854775808 and 9223372036854775807.
","
100000
"
"Other Grammar","Hex Number","
[+ | -] 0x hex
","
A number written in hexadecimal notation.
","
0xff
"
"Other Grammar","Decimal","
[- | +] digit [...] [. digit [...] ]
","
Number with fixed precision and scale.
","
-1600.05
"
"Other Grammar","Double","
[- | +] digit [...]
[. digit [...] [E [- | +] exponentDigit [...] ]]
","
There is no minimum or maximum number.
","
-1.4e-10
"
"Other Grammar","Date","
DATE 'yyyy-MM-dd'
","
A date literal.
","
DATE '2004-12-31'
"
"Other Grammar","Time","
TIME 'hh:mm:ss'
","
A time literal.
","
TIME '23:59:59'
"
"Other Grammar","Timestamp","
TIMESTAMP 'yyyy-MM-dd hh:mm:ss[.nnnnnnnnn]'
","
A timestamp literal.
","
TIMESTAMP '2005-12-31 23:59:59'
"
"Other Grammar","Boolean","
TRUE | FALSE
","
A boolean value.
","
TRUE
"

"Other Grammar","Bytes","
X'hex'
","
A binary value. The hex value is not case sensitive.
","
X'01FF'
"

"Other Grammar","Array","
( expression [,..] )
","
An array of values.
","
(1, 2)
"

"Other Grammar","Null","
NULL
","
NULL is a value without data type and means 'unknown value'.
","
NULL
"
"Other Grammar","Hex","
{{ digit | a-f | A-F } {digit | a-f | A-F }} [...]
","
The hexadecimal representation of a number or of bytes.
Two characters are one byte.
","
cafe
"
"Other Grammar","Digit","
0-9
","
A digit.
","
0
"

"Data Types","INT Type","
INT | INTEGER | MEDIUMINT | INT4 | SIGNED
","
Possible values: -2147483648 to 2147483647
","
INT
"

"Data Types","BOOLEAN Type","
BOOLEAN | BIT | BOOL
","
Possible values: TRUE and FALSE
","
BOOLEAN
"

"Data Types","TINYINT Type","
TINYINT
","
Possible values are: -128 to 127
","
TINYINT
"

"Data Types","SMALLINT Type","
SMALLINT | INT2 | YEAR
","
Possible values: -32768 to 32767
","
SMALLINT
"

"Data Types","BIGINT Type","
BIGINT | INT8
","
Possible values: -9223372036854775808 to 9223372036854775807
","
BIGINT
"

"Data Types","IDENTITY Type","
IDENTITY
","
Auto-Increment value.
Possible values: -9223372036854775808 to 9223372036854775807
","
IDENTITY
"

"Data Types","DECIMAL Type","
{DECIMAL | NUMBER | DEC | NUMERIC} ( precisionInt [, scaleInt] )
","
Data type with fixed precision and scale.
This data type is recommended for storing currency values.
","
DECIMAL(20, 2)
"

"Data Types","DOUBLE Type","
{DOUBLE [PRECISION] | FLOAT | FLOAT4 | FLOAT8}
","
Floating point number (java.lang.Double).
Should not be used to represent currency values, because of rounding problems.
","
DOUBLE
"

"Data Types","REAL Type","
REAL
","
Single precision floating point number (java.lang.Float).
Should not be used to represent currency values, because of rounding problems.
","
REAL
"

"Data Types","TIME Type","
TIME
","
The format is hh:mm:ss.
","
TIME
"

"Data Types","DATE Type","
DATE
","
The format is yyyy-MM-dd.
","
DATE
"

"Data Types","TIMESTAMP Type","
{TIMESTAMP | DATETIME | SMALLDATETIME}
","
The format is yyyy-MM-dd hh:mm:ss[.nnnnnnnnn].
","
TIMESTAMP
"

"Data Types","BINARY Type","
{BINARY | VARBINARY | LONGVARBINARY | RAW | BYTEA}
[( precisionInt )]
","
Represents a byte array. For very long arrays, use BLOB.
There is no maximum precision. The maximum size is the memory available.
The whole object is kept in memory when using this data type.
For large text data BLOB should be used.
","
BINARY(1000)
"

"Data Types","OTHER Type","
OTHER
","
This type allows storing serialized Java objects. Internally, a byte array is used.
Serialization and deserialization is done on the client side only.
Deserialization is only done get getObject is called.
Java operations cannot be executed inside the database engine for security reasons.
Use PreparedStatement.setObject to store values.
","
OTHER
"

"Data Types","VARCHAR Type","
{VARCHAR | LONGVARCHAR |
VARCHAR2 | NVARCHAR | NVARCHAR2 | VARCHAR_CASESENSITIVE}
[( precisionInt )]
","
Unicode String. Use two single quotes ('') to create a quote.
There is no maximum precision. The maximum size is the memory available.
For large text data CLOB should be used.
","
VARCHAR(255)
"

"Data Types","VARCHAR_IGNORECASE Type","
VARCHAR_IGNORECASE [( precisionInt )]
","
Same as VARCHAR, but not case sensitive when comparing. Stored in mixed case.
There is no maximum precision. The maximum size is the memory available.
For large text data CLOB should be used.
","
VARCHAR_IGNORECASE
"

"Data Types","CHAR Type","
{CHAR | CHARACTER | NCHAR}
[( precisionInt )]
","
This type is supported for compatibility with other databases and older applications.
The difference to VARCHAR is that trailing spaces are ignored.
Unicode String. Use two single quotes ('') to create a quote.
There is no maximum precision. The maximum size is the memory available.
For large text data CLOB should be used.
","
CHAR(10)
"

"Data Types","BLOB Type","
{BLOB | TINYBLOB | MEDIUMBLOB | LONGBLOB | IMAGE | OID}
[( precisionInt )]
","
Like BINARY, but intended for very large values.
Unlike when using BINARY, large objects are not kept fully in-memory.
Use PreparedStatement.setBinaryStream to store values.
","
BLOB
"

"Data Types","CLOB Type","
{CLOB | TINYTEXT | TEXT | MEDIUMTEXT | LONGTEXT | NTEXT | NCLOB}
[( precisionInt )]
","
Like VARCHAR, but intended for very large values.
Unlike when using VARCHAR, large objects are not kept fully in-memory.
Use PreparedStatement.setCharacterStream to store values.
","
CLOB
"

"Data Types","UUID Type","
UUID
","
Universally unique identifier. This is a 128 bit value.
Use PreparedStatement.setBytes or setString to store values.
","
UUID
"

"Data Types","ARRAY Type","
ARRAY
","
An array of values.
Use a value list (1, 2) or PreparedStatement.setObject(.., new Object[]{..}) to store values.
","
ARRAY
"

"Functions (Aggregate)","AVG","
AVG([DISTINCT] {int | long | decimal | double}): value
","
The average (mean) value.
Aggregates are only allowed in select statements.
","
AVG(X)
"
"Functions (Aggregate)","COUNT","
COUNT(*) | COUNT([DISTINCT] expression): int
","
The count of all row, or of the non-null values.
Aggregates are only allowed in select statements.
","
COUNT(*)
"
"Functions (Aggregate)","GROUP_CONCAT","
GROUP_CONCAT([DISTINCT] string [ORDER BY {expression [ASC|DESC]}[,...]] [SEPARATOR expression]): string
","
Concatenates strings with a separator. The default separator is a ',' (without space).
Aggregates are only allowed in select statements.
","
GROUP_CONCAT(NAME ORDER BY ID SEPARATOR ', ')
"
"Functions (Aggregate)","MAX","
MAX(value): value
","
The highest value.
Aggregates are only allowed in select statements.
","
MAX(NAME)
"
"Functions (Aggregate)","MIN","
MIN(value): value
","
The lowest value.
Aggregates are only allowed in select statements.
","
MIN(NAME)
"
"Functions (Aggregate)","SUM","
SUM([DISTINCT] {int | long | decimal | double}): value
","
The sum of all values.
Aggregates are only allowed in select statements.
","
SUM(X)
"
"Functions (Aggregate)","SELECTIVITY","
SELECTIVITY(value): int
","
Estimates the selectivity (0-100) of a value.
The value is defined as (100 * distinctCount / rowCount).
The selectivity of 0 rows is 0 (unknown).
Up to 10000 values are kept in memory.
Aggregates are only allowed in select statements.
","
SELECT SELECTIVITY(FIRSTNAME), SELECTIVITY(NAME) FROM TEST WHERE ROWNUM()<100000
"
"Functions (Aggregate)","STDDEV_POP","
STDDEV_POP([DISTINCT] double): double
","
The population standard deviation.
Aggregates are only allowed in select statements.
","
STDDEV_POP(X)
"
"Functions (Aggregate)","STDDEV_SAMP","
STDDEV_SAMP([DISTINCT] double): double
","
The sample standard deviation.
Aggregates are only allowed in select statements.
","
STDDEV(X)
"
"Functions (Aggregate)","VAR_POP","
VAR_POP([DISTINCT] double): double
","
The population variance (square of the population standard deviation).
Aggregates are only allowed in select statements.
","
VAR_POP(X)
"
"Functions (Aggregate)","VAR_SAMP","
VAR_SAMP([DISTINCT] double): double
","
The sample variance (square of the sample standard deviation).
Aggregates are only allowed in select statements.
","
VAR_SAMP(X)
"

"Functions (Numeric)","ABS","
ABS({int | long | decimal | double}): value
","
See also Java Math.abs.
","
ABS(ID)
"

"Functions (Numeric)","ACOS","
ACOS(double): double
","
See also Java Math.* functions.
","
ACOS(D)
"

"Functions (Numeric)","ASIN","
ASIN(double): double
","
See also Java Math.* functions.
","
ASIN(D)
"

"Functions (Numeric)","ATAN","
ATAN(double): double
","
See also Java Math.* functions.
","
ATAN(D)
"

"Functions (Numeric)","COS","
COS(double): double
","
See also Java Math.* functions.
","
COS(ANGLE)
"

"Functions (Numeric)","COT","
COT(double): double
","
See also Java Math.* functions.
","
COT(ANGLE)
"

"Functions (Numeric)","SIN","
SIN(double): double
","
See also Java Math.* functions.
","
SIN(ANGLE)
"

"Functions (Numeric)","TAN","
TAN(double): double
","
See also Java Math.* functions.
","
TAN(ANGLE)
"

"Functions (Numeric)","ATAN2","
ATAN2(double, double): double
","
See also Java Math.atan2.
","
ATAN2(X, Y)
"

"Functions (Numeric)","BITAND","
BITAND(int, int): int
","
See also Java operator &.
","
BITAND(A, B)
"

"Functions (Numeric)","BITOR","
BITOR(int, int): int
","
See also Java operator |.
","
BITOR(A, B)
"

"Functions (Numeric)","BITXOR","
BITXOR(int, int): int
","
See also Java operator ^.
","
BITXOR(A, B)
"

"Functions (Numeric)","MOD","
MOD(int, int): int
","
See also Java operator %.
","
MOD(A, B)
"

"Functions (Numeric)","CEILING","
CEILING(double): double
","
See also Java Math.ceil.
","
LOG(A)
"

"Functions (Numeric)","DEGREES","
DEGREES(double): double
","
See also Java Math.toDegrees.
","
DEGREES(A)
"

"Functions (Numeric)","EXP","
EXP(double): double
","
See also Java Math.exp.
","
EXP(A)
"

"Functions (Numeric)","FLOOR","
FLOOR(double): double
","
See also Java Math.floor.
","
FLOOR(A)
"

"Functions (Numeric)","LOG","
LOG(double): double
","
See also Java Math.log.
","
LOG(A)
"

"Functions (Numeric)","LOG10","
LOG10(double): double
","
See also Java Math.log10 (in Java 5).
","
LOG10(A)
"

"Functions (Numeric)","RADIANS","
RADIANS(double): double
","
See also Java Math.toRadians.
","
RADIANS(A)
"

"Functions (Numeric)","SQRT","
SQRT(double): double
","
See also Java Math.sqrt.
","
SQRT(A)
"

"Functions (Numeric)","PI","
PI(): double
","
See also Java Math.PI.
","
PI()
"

"Functions (Numeric)","POWER","
POWER(double, double): double
","
See also Java Math.pow.
","
POWER(A, B)
"

"Functions (Numeric)","RAND","
RAND([int]): double
","
Calling the function without parameter returns the next a pseudo random number.
Calling it with an parameter seeds the session's random number generator.
","
RAND()
"

"Functions (Numeric)","RANDOM_UUID","
RANDOM_UUID(): UUID
","
Returns a new UUID with 122 pseudo random bits.
","
RANDOM_UUID()
"

"Functions (Numeric)","ROUND","
ROUND(double, digitsInt): double
","
Rounds to a number of digits.
","
ROUND(VALUE, 2)
"

"Functions (Numeric)","ROUNDMAGIC","
ROUNDMAGIC(double): double
","
This function rounds numbers in a good way but slow:
- special handling for numbers around 0
- only numbers <= +/-1000000000000
- convert to a string
- check the last 4 characters:
'000x' becomes '0000'
'999x' becomes '999999' (this is rounded automatically).
","
ROUNDMAGIC(VALUE/3*3)
"

"Functions (Numeric)","SECURE_RAND","
SECURE_RAND(int): bytes
","
Generates a number of cryptographically secure random numbers.
","
CALL SECURE_RAND(16)
"

"Functions (Numeric)","SIGN","
SIGN({int | long | decimal | double}): int
","
Returns -1 if the value is smaller 0, 0 if zero, and otherwise 1.
","
SIGN(VALUE)
"

"Functions (Numeric)","ENCRYPT","
ENCRYPT(algorithmString, keyBytes, dataBytes): bytes
","
Encrypts data using a key. Supported algorithms are XTEA and AES.
The block size is 16 bytes
","
CALL ENCRYPT('AES', '00', STRINGTOUTF8('Test'))
"

"Functions (Numeric)","DECRYPT","
DECRYPT(algorithmString, keyBytes, dataBytes): bytes
","
Decrypts data using a key. Supported algorithms are XTEA and AES.
The block size is 16 bytes
","
CALL UTF8TOSTRING(DECRYPT('AES', '00', '3fabb4de8f1ee2e97d7793bab2db1116'))
"

"Functions (Numeric)","HASH","
HASH(algorithmString, dataBytes, iterationInt): bytes
","
Calculate the hash value using an algorithm, and repeat this process for a number of iterations.
Currently, the only algorithm supported is SHA256.
","
CALL HASH('SHA256', STRINGTOUTF8('Password'), 1000)
"

"Functions (Numeric)","TRUNCATE","
TRUNCATE(double, digitsInt): double
","
Truncates to a number of digits (to the next value closer to 0).
","
TRUNCATE(VALUE, 2)
"

"Functions (Numeric)","COMPRESS","
COMPRESS(dataBytes [, algorithmString]): bytes
","
Compresses the data using the specified compression algorithm.
Supported algorithms are:
LZF (fast but lower compression; default),
DEFLATE (higher compression).
Compression does not always reduce size.
Very small objects and objects with little redundancy may get larger.
","
COMPRESS(STRINGTOUTF8('Test'))
"

"Functions (Numeric)","EXPAND","
EXPAND(bytes): bytes
","
Expands data that was compressed using the COMPRESS function.
","
UTF8TOSTRING(EXPAND(COMPRESS(STRINGTOUTF8('Test'))))
"

"Functions (Numeric)","ZERO","
ZERO(): int
","
Returns the value 0. This function can be used even if numeric literals are disabled.
","
ZERO()
"

"Functions (String)","ASCII","
ASCII(string): int
","
Returns the ASCII value of the first character in the string.
","
ASCII('Hi')
"
"Functions (String)","BIT_LENGTH","
BIT_LENGTH(string): int
","
Returns the number of bits in a string.
For BLOB, CLOB, BYTES and JAVA_OBJECT, the precision is used.
Each character needs 16 bits.
","
BIT_LENGTH(NAME)
"

"Functions (String)","LENGTH","
{LENGTH | CHAR_LENGTH | CHARACTER_LENGTH}(string): int
","
Returns the number of characters in a string.
For BLOB, CLOB, BYTES and JAVA_OBJECT, the precision is used.
","
LENGTH(NAME)
"

"Functions (String)","OCTET_LENGTH","
OCTET_LENGTH(string): int
","
Returns the number of bytes in a string.
For BLOB, CLOB, BYTES and JAVA_OBJECT, the precision is used.
Each character needs 2 bytes.
","
OCTET_LENGTH(NAME)
"

"Functions (String)","CHAR","
{CHAR | CHR}(int): string
","
Returns the character that represents the ASCII value.
","
CHAR(65)
"

"Functions (String)","CONCAT","
CONCAT(string, string [,...]): string
","
Combines strings.
","
CONCAT(NAME, '!')
"

"Functions (String)","DIFFERENCE","
DIFFERENCE(string, string): int
","
Returns the difference between the sounds of two strings.
","
DIFFERENCE(T1.NAME, T2.NAME)
"

"Functions (String)","HEXTORAW","
HEXTORAW(string): string
","
Converts a hex representation of a string to a string.
4 hex characters per string character are used.
","
HEXTORAW(DATA)
"

"Functions (String)","RAWTOHEX","
RAWTOHEX(string): string
","
Converts a string to the hex representation.
4 hex characters per string character are used.
","
RAWTOHEX(DATA)
"

"Functions (String)","INSTR","
INSTR(string, searchString, [, startInt]): int
","
Returns the location of a search string in a string (s).
If a start position is used, the characters before it are ignored.
If position is negative, the rightmost location is returned.
0 is returned if the search string is not found.
","
INSTR(EMAIL,'@')
"
"Functions (String)","INSERT Function","
INSERT(originalString, startInt, lengthInt, addString): string
","
Inserts a additional string into the original string at a specified start position.
The length specifies the number of characters that are removed at the start position
in the original string.
","
INSERT(NAME, 1, 1, ' ')
"

"Functions (String)","LOWER","
{LOWER | LCASE}(string): string
","
Converts a string to lowercase.
","
LOWER(NAME)
"

"Functions (String)","UPPER","
{UPPER | UCASE}(string): string
","
Converts a string to uppercase.
","
UPPER(NAME)
"

"Functions (String)","LEFT","
LEFT(string, int): string
","
Returns the leftmost number of characters.
","
LEFT(NAME, 3)
"

"Functions (String)","RIGHT","
RIGHT(string, int): string
","
Returns the rightmost number of characters.
","
RIGHT(NAME, 3)
"

"Functions (String)","LOCATE","
LOCATE(searchString, string [, startInt]): int
","
Returns the location of a search string in a string (s).
If a start position is used, the characters before it are ignored.
If position is negative, the rightmost location is returned.
0 is returned if the search string is not found.
","
LOCATE('.', NAME)
"

"Functions (String)","POSITION","
POSITION(searchString, string): int
","
Returns the location of a search string in a string (s).
See also LOCATE.
","
POSITION('.', NAME)
"

"Functions (String)","LPAD","
LPAD(string, int[, paddingString]): string
","
Left pad the string to the specified length.
If the length is shorter than the string, it will be truncated at the end.
If the padding string is not set, spaces will be used.
","
LPAD(AMOUNT, 10, '*')
"

"Functions (String)","RPAD","
RPAD(string, int[, paddingString]): string
","
Right pad the string to the specified length.
If the length is shorter than the string, it will be truncated.
If the padding string is not set, spaces will be used.
","
RPAD(TEXT, 10, '-')
"

"Functions (String)","LTRIM","
LTRIM(string): string
","
Removes all leading spaces from a string.
","
LTRIM(NAME)
"

"Functions (String)","RTRIM","
RTRIM(string): string
","
Removes all trailing spaces from a string.
","
RTRIM(NAME)
"

"Functions (String)","TRIM","
TRIM([{LEADING | TRAILING | BOTH} [string] FROM]
string): string
","
Removes all leading spaces, trailing spaces, or spaces at both ends, from a string.
It is possible to remove other characters as well.
","
TRIM(BOTH '_' FROM NAME)
"

"Functions (String)","REGEXP_REPLACE","
REGEXP_REPLACE(inputString, regexString, replacementString): string
","
Replaces each substring that matches a regular expression.
For details, see the Java String.replaceAll() method.
","
REGEXP_REPLACE('Hello    World', ' +', ' ')
"

"Functions (String)","REPEAT","
REPEAT(string, int): string
","
Returns a string repeated some number of times.
","
REPEAT(NAME || ' ', 10)
"

"Functions (String)","REPLACE","
REPLACE(string, searchString [, replacementString]): string
","
Replaces all occurrences of a search string in a text with another string.
If no replacement is specified, the search string is just removed from the original string.
","
REPLACE(NAME, ' ')
"
"Functions (String)","SOUNDEX","
SOUNDEX(string): string
","
Returns a four character code representing the sound of a string.
See also http://www.archives.gov/genealogy/soundex.html.
","
SOUNDEX(NAME)
"
"Functions (String)","SPACE","
SPACE(int): string
","
Returns a string consisting of a number of spaces.
","
SPACE(80)
"
"Functions (String)","STRINGDECODE","
STRINGDECODE(string): string
","
Converts a encoded string using the Java string literal encoding format.
Special characters are \b, \t, \n, \f, \r, \"", \\, \<octal>, \u<unicode>.
","
CALL STRINGENCODE(STRINGDECODE('Lines 1\nLine 2'))
"
"Functions (String)","STRINGENCODE","
STRINGENCODE(string): string
","
Encodes special characters in a string using the Java string literal encoding format.
Special characters are \b, \t, \n, \f, \r, \"", \\, \<octal>, \u<unicode>.
","
CALL STRINGENCODE(STRINGDECODE('Lines 1\nLine 2'))
"
"Functions (String)","STRINGTOUTF8","
STRINGTOUTF8(string): bytes
","
Encodes a string to a byte array using the UTF8 encoding format.
","
CALL UTF8TOSTRING(STRINGTOUTF8('This is a test'))
"
"Functions (String)","SUBSTRING","
{SUBSTRING | SUBSTR}(string, startInt [, lengthInt]): string
","
Returns a substring of a string starting at a position.
The length is optional.
Also supported is: SUBSTRING(string FROM start [FOR length]).
","
SUBSTR(NAME, 1)
"
"Functions (String)","UTF8TOSTRING","
UTF8TOSTRING(bytes): string
","
Decodes a byte array in the UTF8 format to a string.
","
CALL UTF8TOSTRING(STRINGTOUTF8('This is a test'))
"
"Functions (String)","XMLATTR","
XMLATTR(nameString, valueString): string
","
Creates an XML attribute element of the form name=""value"".
The value is encoded as XML text.
","
CALL XMLNODE('a', XMLATTR('href', 'http://h2database.com'))
"
"Functions (String)","XMLNODE","
XMLNODE(elementString [, attributesString [, contentString]]): string
","
Create an XML node element.
","
CALL XMLNODE('a', XMLATTR('href', 'http://h2database.com'), 'H2')
"
"Functions (String)","XMLCOMMENT","
XMLCOMMENT(commentString): string
","
Creates an XML comment. Two dashes (--) are converted to - -.
","
CALL XMLCOMMENT('Test')
"
"Functions (String)","XMLCDATA","
XMLCDATA(valueString): string
","
Creates an XML CDATA element. If the value contains ']]>', an XML text element is created instead.
","
CALL XMLCDATA('data')
"
"Functions (String)","XMLSTARTDOC","
XMLSTARTDOC(): string
","
The string '<?xml version=""1.0""?>' is returned.
","
CALL XMLSTARTDOC()
"
"Functions (String)","XMLTEXT","
XMLTEXT(valueString): string
","
Creates an XML text element.
","
CALL XMLTEXT('test')
"
"Functions (Time and Date)","CURRENT_DATE","
{CURRENT_DATE[()] | CURDATE() | SYSDATE | TODAY}: date
","
Returns the current date.
","
CURRENT_DATE()
"
"Functions (Time and Date)","CURRENT_TIME","
{CURRENT_TIME[()] | CURTIME()}: time
","
Returns the current time.
","
CURRENT_TIME()
"
"Functions (Time and Date)","CURRENT_TIMESTAMP","
{CURRENT_TIMESTAMP[([int])] | NOW([int])}: timestamp
","
Returns the current timestamp.
The precision parameter for nanoseconds precision is optional.
","
CURRENT_TIMESTAMP()
"
"Functions (Time and Date)","DATEADD","
DATEADD(unitString, addInt, timestamp): timestamp
","
Adds units to a timestamp. The string indicates the unit. Use negative values to subtract units.
The following units are supported:
YY, YEAR, MM, MONTH, DD, DAY, HH, HOUR, MI, MINUTE, SS, SECOND, MS, MILLISECOND.
","
DATEADD('MONTH', 1, DATE '2001-01-31')
"
"Functions (Time and Date)","DATEDIFF","
DATEDIFF(unitString, aTimestamp, bTimestamp): long
","
Returns the difference between two timestamps. The string indicates the unit.
The following units are supported:
YY, YEAR, MM, MONTH, DD, DAY, HH, HOUR, MI, MINUTE, SS, SECOND, MS, MILLISECOND.
","
DATEDIFF('YEAR', T1.CREATED, T2.CREATED)
"
"Functions (Time and Date)","DAYNAME","
DAYNAME(date): string
","
Returns the name of the day (in English).
","
DAYNAME(CREATED)
"
"Functions (Time and Date)","DAYOFMONTH","
DAYOFMONTH(date): int
","
Returns the day of the month (1-31).
","
DAYOFMONTH(CREATED)
"
"Functions (Time and Date)","DAYOFWEEK","
DAYOFWEEK(date): int
","
Returns the day of the week (1 means Sunday).
","
DAYOFWEEK(CREATED)
"
"Functions (Time and Date)","DAYOFYEAR","
DAYOFYEAR(date): int
","
Returns the day of the year (1-366).
","
DAYOFYEAR(CREATED)
"
"Functions (Time and Date)","EXTRACT","
EXTRACT(
{YY | YEAR | MM | MONTH | DD | DAY | HH | HOUR |
MI | MINUTE | SS | SECOND | MS | MILLISECOND}
FROM timestamp): int
","
Returns a specific value from a timestamps.
","
EXTRACT(SECOND FROM CURRENT_TIMESTAMP)
"
"Functions (Time and Date)","FORMATDATETIME","
FORMATDATETIME(timestamp, formatString [, localeString [, timezoneString]]): string
","
Formats a date, time or timestamp as a string.
The most important format characters are: y year, M month, d day, H hour, m minute, s second
For details of the format, see java.text.SimpleDateFormat.
","
CALL FORMATDATETIME(TIMESTAMP '2001-02-03 04:05:06', 'EEE, d MMM yyyy HH:mm:ss z', 'en', 'GMT')
"
"Functions (Time and Date)","HOUR","
HOUR(timestamp): int
","
Returns the hour (0-23) from a timestamp.
","
HOUR(CREATED)
"
"Functions (Time and Date)","MINUTE","
MINUTE(timestamp): int
","
Returns the minute (0-59) from a timestamp.
","
MINUTE(CREATED)
"
"Functions (Time and Date)","MONTH","
MONTH(timestamp): int
","
Returns the month (1-12) from a timestamp.
","
MONTH(CREATED)
"
"Functions (Time and Date)","MONTHNAME","
MONTHNAME(date): string
","
Returns the name of the month (in English).
","
MONTHNAME(CREATED)
"
"Functions (Time and Date)","PARSEDATETIME","
PARSEDATETIME(string, formatString [, localeString [, timezoneString]]): string
","
Parses a string and returns a timestamp.
The most important format characters are: y year, M month, d day, H hour, m minute, s second
For details of the format, see java.text.SimpleDateFormat.
","
CALL PARSEDATETIME('Sat, 3 Feb 2001 03:05:06 GMT', 'EEE, d MMM yyyy HH:mm:ss z', 'en', 'GMT')
"
"Functions (Time and Date)","QUARTER","
QUARTER(timestamp): int
","
Returns the quarter (1-4) from a timestamp.
","
QUARTER(CREATED)
"
"Functions (Time and Date)","SECOND","
SECOND(timestamp): int
","
Returns the second (0-59) from a timestamp.
","
SECOND(CREATED)
"
"Functions (Time and Date)","WEEK","
WEEK(timestamp): int
","
Returns the week (1-53) from a timestamp.
","
WEEK(CREATED)
"
"Functions (Time and Date)","YEAR","
YEAR(timestamp): int
","
Returns the year from a timestamp.
","
YEAR(CREATED)
"

"Functions (System)","ARRAY_GET","
ARRAY_GET(arrayExpression, indexExpression): value
","
Returns one element of an array.
","
CALL ARRAY_GET(('Hello', 'World'), 2)
"

"Functions (System)","ARRAY_LENGTH","
ARRAY_GET(arrayExpression): int
","
Returns the length of an array.
","
CALL ARRAY_LENGTH(('Hello', 'World'))
"

"Functions (System)","AUTOCOMMIT","
AUTOCOMMIT(): boolean
","
Returns true if auto commit is switched on for this session.
","
AUTOCOMMIT()
"

"Functions (System)","CANCEL_SESSION","
CANCEL_SESSION(sessionInt): boolean
","
Cancels the currently executing statement of another session.
The method only works if the multithreaded kernel is enabled (see SET MULTI_THREADED).
Returns true if the statement was cancelled, false if the session is closed
or no statement is currently executing.
Admin rights are required to execute this command.
","
CANCEL_STATEMENT(3)
"

"Functions (System)","CASEWHEN Function","
CASEWHEN(boolean, aValue, bValue): value
","
Returns 'a' if the boolean expression is true, otherwise 'b'.
","
CASEWHEN(ID=1, 'A', 'B')
"

"Functions (System)","CAST","
CAST(value AS dataType): value
","
Converts a value to another data type.
","
CAST(NAME AS INT)
"

"Functions (System)","COALESCE","
COALESCE(aValue, bValue [,...]): value
","
Returns the first value that is not null.
","
COALESCE(A, B, C)
"

"Functions (System)","CONVERT","
CONVERT(value, dataType): value
","
Converts a value to another data type.
","
CONVERT(NAME, INT)
"
"Functions (System)","CURRVAL","
CURRVAL([schemaName, ] sequenceString): long
","
Returns the current (last) value of the sequence.
If the schema name is not set, the current schema is used.
If the schema name is not set, the sequence name is converted to uppercase (for compatibility).
","
CURRVAL('TEST_SEQ')
"

"Functions (System)","CSVREAD","
CSVREAD(fileNameString [, columnNamesString [, charsetString [, fieldSeparatorString [, fieldDelimiterString
[, escapeCharacterString [, nullString]]]]]]): resultSet
","
Returns the result set of reading the CSV (comma separated values) file.
If the column names are specified (a comma separated list of column names),
those are used they are read from the file, otherwise (or if they are set to NULL) the first line
of the file is interpreted as the column names.
The default charset is the default value for this system, and the default field separator is a comma.
Missing unquoted values as well as data that matches the null string is parsed as NULL.
This function can be used like a table: SELECT * FROM CSVREAD(...).
Instead of a file, an URL may be used, for example jar:file:///c:/temp/example.zip!/org/example/nested.zip.
Admin rights are required to execute this command.
","
CALL CSVREAD('test.csv')
"

"Functions (System)","CSVWRITE","
CSVWRITE(fileNameString, queryString [, charsetString [, fieldSeparatorString [, fieldDelimiterString
[, escapeCharacterString [, nullString [, lineSeparatorString]]]]]]): int
","
Writes a CSV (comma separated values).
The file is overwritten if it exists.
The default charset is the default value for this system, and the default field separator is a comma.
The null string is used when writing NULL (by default nothing is written when NULL appears).
The default line separator is the default value for this system ('line.separator' system property).
The returned value is the number or rows written.
Admin rights are required to execute this command.
","
CALL CSVWRITE('test.csv', 'SELECT * FROM TEST')
"

"Functions (System)","DATABASE","
DATABASE(): string
","
Returns the name of the database.
","
DATABASE()
"

"Functions (System)","DATABASE_PATH","
DATABASE_PATH(): string
","
Returns the directory of the database files and the database name, if it is file based.
Returns NULL otherwise.
","
DATABASE_PATH()
"

"Functions (System)","FILE_READ","
FILE_READ(fileNameString [,encodingString]): value
","
Returns the contents of a file. If only one parameter is supplied,
the data are returned as a BLOB. If two parameters are used,
the data is returned as a CLOB (text). The second parameter
is the character set to use, NULL meaning the default character set
for this system. File names and URLs are supported.
Admin rights are required to execute this command.
","
SELECT LENGTH(FILE_READ('~/.h2.server.properties')) LEN;
SELECT FILE_READ('http://localhost:8182/stylesheet.css', NULL) CSS;
"

"Functions (System)","GREATEST","
GREATEST(aValue, bValue [,...]): value
","
Returns the largest value that is not NULL, or NULL if all values are NULL.
","
GREATEST(A, B, C)
"

"Functions (System)","IDENTITY","
IDENTITY(): long
","
Returns the last inserted identity value for this session.
","
IDENTITY()
"

"Functions (System)","IFNULL","
IFNULL(aValue, bValue): value
","
Returns the value of 'a' if it is not null, otherwise 'b'.
","
IFNULL(A, B)
"

"Functions (System)","LEAST","
LEAST(aValue, bValue [,...]): value
","
Returns the smallest value that is not NULL, or NULL if all values are NULL.
","
LEAST(A, B, C)
"

"Functions (System)","LOCK_MODE","
LOCK_MODE(): int
","
Returns the current lock mode. See SET LOCK_MODE.
","
LOCK_MODE()
"

"Functions (System)","LOCK_TIMEOUT","
LOCK_TIMEOUT(): int
","
Returns the lock timeout of the current session (in milliseconds).
","
LOCK_TIMEOUT()
"

"Functions (System)","LINK_SCHEMA","
LINK_SCHEMA(targetSchemaString, driverString, urlString,
userString, passwordString, sourceSchemaString): resultSet
","
Creates table links for all tables in a schema.
If tables with the same name already exist, they are dropped first.
The target schema is created automatically if it does not yet exist.
The driver name may be empty if the driver is already loaded.
The list of tables linked is returned.
Admin rights are required to execute this command.
","
CALL LINK_SCHEMA('TEST2', '', 'jdbc:h2:test2', 'sa', 'sa', 'PUBLIC');
"

"Functions (System)","MEMORY_FREE","
MEMORY_FREE(): int
","
Returns the free memory in KB (where 1024 bytes is a KB).
The garbage is run before returning the value.
Admin rights are required to execute this command.
","
MEMORY_FREE()
"

"Functions (System)","MEMORY_USED","
MEMORY_USED(): int
","
Returns the used memory in KB (where 1024 bytes is a KB).
The garbage is run before returning the value.
Admin rights are required to execute this command.
","
MEMORY_USED()
"

"Functions (System)","NEXTVAL","
NEXTVAL([schemaName, ] sequenceString): long
","
Returns the next value of the sequence.
If the schema name is not set, the current schema is used.
If the schema name is not set, the sequence name is converted to uppercase (for compatibility).
","
NEXTVAL('TEST_SEQ')
"

"Functions (System)","NULLIF","
NULLIF(aValue, bValue): value
","
Returns NULL if 'a' is equals to 'b', otherwise 'a'.
","
NULLIF(A, B)
"

"Functions (System)","READONLY","
READONLY(): boolean
","
Returns true if the database is read-only.
","
READONLY()
"

"Functions (System)","ROWNUM","
ROWNUM(): int
","
Returns the number of the current row. This function is supported for SELECT statements,
as well as for DELETE and UPDATE. The first row has the row number 1, and is calculated
before ordering and grouping the result set.
","
SELECT ROWNUM(), * FROM TEST
"

"Functions (System)","SCHEMA","
SCHEMA(): string
","
Returns the name of the default  schema for this session.
","
CALL SCHEMA()
"

"Functions (System)","SESSION_ID","
SESSION_ID(): int
","
Returns the unique session id number for the current database connection.
This id stays the same while the connection is open.
The database engine may re-use a session id after the connection is closed.
","
CALL SESSION_ID()
"

"Functions (System)","SET","
SET(@variableName, value): value
","
Updates a variable with the given value. The new value is returned.
When used in a query, the value is updated in the order the rows are read.
","
SELECT X, SET(@I, IFNULL(@I, 0)+X) RUNNING_TOTAL FROM SYSTEM_RANGE(1, 10)
"

"Functions (System)","TABLE","
TABLE|TABLE_DISTINCT( { name dataType = expression } [,..]): result set
","
Returns the result set. TABLE_DISTINCT removes duplicate rows.
","
SELECT * FROM TABLE(ID INT=(1, 2), NAME VARCHAR=('Hello', 'World'))
"

"Functions (System)","USER","
{USER | CURRENT_USER}(): string
","
Returns the name of the current user of this session.
","
CURRENT_USER()
"

"System tables","Information schema","
INFORMATION_SCHEMA.tableName
","
INFORMATION_SCHEMA.CATALOGS contains the catalogs.
INFORMATION_SCHEMA.COLLATIONS contains the available collations.
INFORMATION_SCHEMA.COLUMNS contains the columns.
INFORMATION_SCHEMA.COLUMN_PRIVILEGES contains column privileges.
INFORMATION_SCHEMA.CONSTANTS contains the constants.
INFORMATION_SCHEMA.CONSTRAINTS contains the constraints.
INFORMATION_SCHEMA.CROSS_REFERENCES contains all foreign key constraint data.
INFORMATION_SCHEMA.DOMAINS contains all domains (custom data types).
INFORMATION_SCHEMA.FUNCTION_ALIASES contains the function aliases.
INFORMATION_SCHEMA.FUNCTION_COLUMNS contains the function columns.
INFORMATION_SCHEMA.HELP contains the reference help.
INFORMATION_SCHEMA.INDEXES contains the indexes.
INFORMATION_SCHEMA.IN_DOUBT contains all in-doubt transactions.
INFORMATION_SCHEMA.LOCKS contains all locks.
INFORMATION_SCHEMA.RIGHTS contains the rights.
INFORMATION_SCHEMA.ROLES contains the roles.
INFORMATION_SCHEMA.SCHEMATA contains the schemas.
INFORMATION_SCHEMA.SESSIONS contains the open sessions.
INFORMATION_SCHEMA.SEQUENCES contains the sequences.
INFORMATION_SCHEMA.SETTINGS contains the settings.
INFORMATION_SCHEMA.TABLES contains the tables.
INFORMATION_SCHEMA.TABLE_PRIVILEGES contains table privileges.
INFORMATION_SCHEMA.TABLE_TYPES contains the table types.
INFORMATION_SCHEMA.TRIGGERS contains the triggers.
INFORMATION_SCHEMA.TYPE_INFO contains the data types.
INFORMATION_SCHEMA.USERS contains the users.
INFORMATION_SCHEMA.VIEWS contains the views.
","

"
"System tables","Range table","
SYSTEM_RANGE(start, end)
","
Contains all values from start to end (this is a dynamic table).
","
SYSTEM_RANGE(0, 100)
"
